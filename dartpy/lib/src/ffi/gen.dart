// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to Python C interface
// ignore_for_file: unused_field, unused_element
class DartPyC {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DartPyC(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DartPyC.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int Py_get_387controlword() {
    return _Py_get_387controlword();
  }

  late final _Py_get_387controlword_ptr =
      _lookup<ffi.NativeFunction<_c_Py_get_387controlword>>(
          '_Py_get_387controlword');
  late final _dart_Py_get_387controlword _Py_get_387controlword =
      _Py_get_387controlword_ptr.asFunction<_dart_Py_get_387controlword>();

  void Py_set_387controlword(
    int arg0,
  ) {
    return _Py_set_387controlword(
      arg0,
    );
  }

  late final _Py_set_387controlword_ptr =
      _lookup<ffi.NativeFunction<_c_Py_set_387controlword>>(
          '_Py_set_387controlword');
  late final _dart_Py_set_387controlword _Py_set_387controlword =
      _Py_set_387controlword_ptr.asFunction<_dart_Py_set_387controlword>();

  ffi.Pointer<ffi.Void> PyMem_Malloc(
    int size,
  ) {
    return _PyMem_Malloc(
      size,
    );
  }

  late final _PyMem_Malloc_ptr =
      _lookup<ffi.NativeFunction<_c_PyMem_Malloc>>('PyMem_Malloc');
  late final _dart_PyMem_Malloc _PyMem_Malloc =
      _PyMem_Malloc_ptr.asFunction<_dart_PyMem_Malloc>();

  ffi.Pointer<ffi.Void> PyMem_Realloc(
    ffi.Pointer<ffi.Void> ptr,
    int new_size,
  ) {
    return _PyMem_Realloc(
      ptr,
      new_size,
    );
  }

  late final _PyMem_Realloc_ptr =
      _lookup<ffi.NativeFunction<_c_PyMem_Realloc>>('PyMem_Realloc');
  late final _dart_PyMem_Realloc _PyMem_Realloc =
      _PyMem_Realloc_ptr.asFunction<_dart_PyMem_Realloc>();

  void PyMem_Free(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _PyMem_Free(
      ptr,
    );
  }

  late final _PyMem_Free_ptr =
      _lookup<ffi.NativeFunction<_c_PyMem_Free>>('PyMem_Free');
  late final _dart_PyMem_Free _PyMem_Free =
      _PyMem_Free_ptr.asFunction<_dart_PyMem_Free>();

  late final ffi.Pointer<_PyTraceMalloc_Config> _Py_tracemalloc_config =
      _lookup<_PyTraceMalloc_Config>('_Py_tracemalloc_config');

  _PyTraceMalloc_Config get Py_tracemalloc_config => _Py_tracemalloc_config.ref;

  ffi.Pointer<PyObject> PyType_FromSpec(
    ffi.Pointer<PyType_Spec> arg0,
  ) {
    return _PyType_FromSpec(
      arg0,
    );
  }

  late final _PyType_FromSpec_ptr =
      _lookup<ffi.NativeFunction<_c_PyType_FromSpec>>('PyType_FromSpec');
  late final _dart_PyType_FromSpec _PyType_FromSpec =
      _PyType_FromSpec_ptr.asFunction<_dart_PyType_FromSpec>();

  ffi.Pointer<PyObject> PyType_FromSpecWithBases(
    ffi.Pointer<PyType_Spec> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyType_FromSpecWithBases(
      arg0,
      arg1,
    );
  }

  late final _PyType_FromSpecWithBases_ptr =
      _lookup<ffi.NativeFunction<_c_PyType_FromSpecWithBases>>(
          'PyType_FromSpecWithBases');
  late final _dart_PyType_FromSpecWithBases _PyType_FromSpecWithBases =
      _PyType_FromSpecWithBases_ptr.asFunction<
          _dart_PyType_FromSpecWithBases>();

  ffi.Pointer<ffi.Void> PyType_GetSlot(
    ffi.Pointer<_typeobject> arg0,
    int arg1,
  ) {
    return _PyType_GetSlot(
      arg0,
      arg1,
    );
  }

  late final _PyType_GetSlot_ptr =
      _lookup<ffi.NativeFunction<_c_PyType_GetSlot>>('PyType_GetSlot');
  late final _dart_PyType_GetSlot _PyType_GetSlot =
      _PyType_GetSlot_ptr.asFunction<_dart_PyType_GetSlot>();

  int PyType_IsSubtype(
    ffi.Pointer<_typeobject> arg0,
    ffi.Pointer<_typeobject> arg1,
  ) {
    return _PyType_IsSubtype(
      arg0,
      arg1,
    );
  }

  late final _PyType_IsSubtype_ptr =
      _lookup<ffi.NativeFunction<_c_PyType_IsSubtype>>('PyType_IsSubtype');
  late final _dart_PyType_IsSubtype _PyType_IsSubtype =
      _PyType_IsSubtype_ptr.asFunction<_dart_PyType_IsSubtype>();

  late final ffi.Pointer<_typeobject> _PyType_Type =
      _lookup<_typeobject>('PyType_Type');

  _typeobject get PyType_Type => _PyType_Type.ref;

  late final ffi.Pointer<_typeobject> _PyBaseObject_Type =
      _lookup<_typeobject>('PyBaseObject_Type');

  _typeobject get PyBaseObject_Type => _PyBaseObject_Type.ref;

  late final ffi.Pointer<_typeobject> _PySuper_Type =
      _lookup<_typeobject>('PySuper_Type');

  _typeobject get PySuper_Type => _PySuper_Type.ref;

  int PyType_GetFlags(
    ffi.Pointer<_typeobject> arg0,
  ) {
    return _PyType_GetFlags(
      arg0,
    );
  }

  late final _PyType_GetFlags_ptr =
      _lookup<ffi.NativeFunction<_c_PyType_GetFlags>>('PyType_GetFlags');
  late final _dart_PyType_GetFlags _PyType_GetFlags =
      _PyType_GetFlags_ptr.asFunction<_dart_PyType_GetFlags>();

  int PyType_Ready(
    ffi.Pointer<_typeobject> arg0,
  ) {
    return _PyType_Ready(
      arg0,
    );
  }

  late final _PyType_Ready_ptr =
      _lookup<ffi.NativeFunction<_c_PyType_Ready>>('PyType_Ready');
  late final _dart_PyType_Ready _PyType_Ready =
      _PyType_Ready_ptr.asFunction<_dart_PyType_Ready>();

  ffi.Pointer<PyObject> PyType_GenericAlloc(
    ffi.Pointer<_typeobject> arg0,
    int arg1,
  ) {
    return _PyType_GenericAlloc(
      arg0,
      arg1,
    );
  }

  late final _PyType_GenericAlloc_ptr =
      _lookup<ffi.NativeFunction<_c_PyType_GenericAlloc>>(
          'PyType_GenericAlloc');
  late final _dart_PyType_GenericAlloc _PyType_GenericAlloc =
      _PyType_GenericAlloc_ptr.asFunction<_dart_PyType_GenericAlloc>();

  ffi.Pointer<PyObject> PyType_GenericNew(
    ffi.Pointer<_typeobject> arg0,
    ffi.Pointer<PyObject> arg1,
    ffi.Pointer<PyObject> arg2,
  ) {
    return _PyType_GenericNew(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyType_GenericNew_ptr =
      _lookup<ffi.NativeFunction<_c_PyType_GenericNew>>('PyType_GenericNew');
  late final _dart_PyType_GenericNew _PyType_GenericNew =
      _PyType_GenericNew_ptr.asFunction<_dart_PyType_GenericNew>();

  int PyType_ClearCache() {
    return _PyType_ClearCache();
  }

  late final _PyType_ClearCache_ptr =
      _lookup<ffi.NativeFunction<_c_PyType_ClearCache>>('PyType_ClearCache');
  late final _dart_PyType_ClearCache _PyType_ClearCache =
      _PyType_ClearCache_ptr.asFunction<_dart_PyType_ClearCache>();

  void PyType_Modified(
    ffi.Pointer<_typeobject> arg0,
  ) {
    return _PyType_Modified(
      arg0,
    );
  }

  late final _PyType_Modified_ptr =
      _lookup<ffi.NativeFunction<_c_PyType_Modified>>('PyType_Modified');
  late final _dart_PyType_Modified _PyType_Modified =
      _PyType_Modified_ptr.asFunction<_dart_PyType_Modified>();

  ffi.Pointer<PyObject> PyObject_Repr(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyObject_Repr(
      arg0,
    );
  }

  late final _PyObject_Repr_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_Repr>>('PyObject_Repr');
  late final _dart_PyObject_Repr _PyObject_Repr =
      _PyObject_Repr_ptr.asFunction<_dart_PyObject_Repr>();

  ffi.Pointer<PyObject> PyObject_Str(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyObject_Str(
      arg0,
    );
  }

  late final _PyObject_Str_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_Str>>('PyObject_Str');
  late final _dart_PyObject_Str _PyObject_Str =
      _PyObject_Str_ptr.asFunction<_dart_PyObject_Str>();

  ffi.Pointer<PyObject> PyObject_ASCII(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyObject_ASCII(
      arg0,
    );
  }

  late final _PyObject_ASCII_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_ASCII>>('PyObject_ASCII');
  late final _dart_PyObject_ASCII _PyObject_ASCII =
      _PyObject_ASCII_ptr.asFunction<_dart_PyObject_ASCII>();

  ffi.Pointer<PyObject> PyObject_Bytes(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyObject_Bytes(
      arg0,
    );
  }

  late final _PyObject_Bytes_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_Bytes>>('PyObject_Bytes');
  late final _dart_PyObject_Bytes _PyObject_Bytes =
      _PyObject_Bytes_ptr.asFunction<_dart_PyObject_Bytes>();

  ffi.Pointer<PyObject> PyObject_RichCompare(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
    int arg2,
  ) {
    return _PyObject_RichCompare(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyObject_RichCompare_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_RichCompare>>(
          'PyObject_RichCompare');
  late final _dart_PyObject_RichCompare _PyObject_RichCompare =
      _PyObject_RichCompare_ptr.asFunction<_dart_PyObject_RichCompare>();

  int PyObject_RichCompareBool(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
    int arg2,
  ) {
    return _PyObject_RichCompareBool(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyObject_RichCompareBool_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_RichCompareBool>>(
          'PyObject_RichCompareBool');
  late final _dart_PyObject_RichCompareBool _PyObject_RichCompareBool =
      _PyObject_RichCompareBool_ptr.asFunction<
          _dart_PyObject_RichCompareBool>();

  ffi.Pointer<PyObject> PyObject_GetAttrString(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _PyObject_GetAttrString(
      arg0,
      arg1,
    );
  }

  late final _PyObject_GetAttrString_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_GetAttrString>>(
          'PyObject_GetAttrString');
  late final _dart_PyObject_GetAttrString _PyObject_GetAttrString =
      _PyObject_GetAttrString_ptr.asFunction<_dart_PyObject_GetAttrString>();

  int PyObject_SetAttrString(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<PyObject> arg2,
  ) {
    return _PyObject_SetAttrString(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyObject_SetAttrString_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_SetAttrString>>(
          'PyObject_SetAttrString');
  late final _dart_PyObject_SetAttrString _PyObject_SetAttrString =
      _PyObject_SetAttrString_ptr.asFunction<_dart_PyObject_SetAttrString>();

  int PyObject_HasAttrString(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _PyObject_HasAttrString(
      arg0,
      arg1,
    );
  }

  late final _PyObject_HasAttrString_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_HasAttrString>>(
          'PyObject_HasAttrString');
  late final _dart_PyObject_HasAttrString _PyObject_HasAttrString =
      _PyObject_HasAttrString_ptr.asFunction<_dart_PyObject_HasAttrString>();

  ffi.Pointer<PyObject> PyObject_GetAttr(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyObject_GetAttr(
      arg0,
      arg1,
    );
  }

  late final _PyObject_GetAttr_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_GetAttr>>('PyObject_GetAttr');
  late final _dart_PyObject_GetAttr _PyObject_GetAttr =
      _PyObject_GetAttr_ptr.asFunction<_dart_PyObject_GetAttr>();

  int PyObject_SetAttr(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
    ffi.Pointer<PyObject> arg2,
  ) {
    return _PyObject_SetAttr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyObject_SetAttr_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_SetAttr>>('PyObject_SetAttr');
  late final _dart_PyObject_SetAttr _PyObject_SetAttr =
      _PyObject_SetAttr_ptr.asFunction<_dart_PyObject_SetAttr>();

  int PyObject_HasAttr(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyObject_HasAttr(
      arg0,
      arg1,
    );
  }

  late final _PyObject_HasAttr_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_HasAttr>>('PyObject_HasAttr');
  late final _dart_PyObject_HasAttr _PyObject_HasAttr =
      _PyObject_HasAttr_ptr.asFunction<_dart_PyObject_HasAttr>();

  ffi.Pointer<PyObject> PyObject_SelfIter(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyObject_SelfIter(
      arg0,
    );
  }

  late final _PyObject_SelfIter_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_SelfIter>>('PyObject_SelfIter');
  late final _dart_PyObject_SelfIter _PyObject_SelfIter =
      _PyObject_SelfIter_ptr.asFunction<_dart_PyObject_SelfIter>();

  ffi.Pointer<PyObject> PyObject_GenericGetAttr(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyObject_GenericGetAttr(
      arg0,
      arg1,
    );
  }

  late final _PyObject_GenericGetAttr_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_GenericGetAttr>>(
          'PyObject_GenericGetAttr');
  late final _dart_PyObject_GenericGetAttr _PyObject_GenericGetAttr =
      _PyObject_GenericGetAttr_ptr.asFunction<_dart_PyObject_GenericGetAttr>();

  int PyObject_GenericSetAttr(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
    ffi.Pointer<PyObject> arg2,
  ) {
    return _PyObject_GenericSetAttr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyObject_GenericSetAttr_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_GenericSetAttr>>(
          'PyObject_GenericSetAttr');
  late final _dart_PyObject_GenericSetAttr _PyObject_GenericSetAttr =
      _PyObject_GenericSetAttr_ptr.asFunction<_dart_PyObject_GenericSetAttr>();

  int PyObject_GenericSetDict(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _PyObject_GenericSetDict(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyObject_GenericSetDict_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_GenericSetDict>>(
          'PyObject_GenericSetDict');
  late final _dart_PyObject_GenericSetDict _PyObject_GenericSetDict =
      _PyObject_GenericSetDict_ptr.asFunction<_dart_PyObject_GenericSetDict>();

  int PyObject_Hash(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyObject_Hash(
      arg0,
    );
  }

  late final _PyObject_Hash_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_Hash>>('PyObject_Hash');
  late final _dart_PyObject_Hash _PyObject_Hash =
      _PyObject_Hash_ptr.asFunction<_dart_PyObject_Hash>();

  int PyObject_HashNotImplemented(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyObject_HashNotImplemented(
      arg0,
    );
  }

  late final _PyObject_HashNotImplemented_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_HashNotImplemented>>(
          'PyObject_HashNotImplemented');
  late final _dart_PyObject_HashNotImplemented _PyObject_HashNotImplemented =
      _PyObject_HashNotImplemented_ptr.asFunction<
          _dart_PyObject_HashNotImplemented>();

  int PyObject_IsTrue(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyObject_IsTrue(
      arg0,
    );
  }

  late final _PyObject_IsTrue_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_IsTrue>>('PyObject_IsTrue');
  late final _dart_PyObject_IsTrue _PyObject_IsTrue =
      _PyObject_IsTrue_ptr.asFunction<_dart_PyObject_IsTrue>();

  int PyObject_Not(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyObject_Not(
      arg0,
    );
  }

  late final _PyObject_Not_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_Not>>('PyObject_Not');
  late final _dart_PyObject_Not _PyObject_Not =
      _PyObject_Not_ptr.asFunction<_dart_PyObject_Not>();

  int PyCallable_Check(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyCallable_Check(
      arg0,
    );
  }

  late final _PyCallable_Check_ptr =
      _lookup<ffi.NativeFunction<_c_PyCallable_Check>>('PyCallable_Check');
  late final _dart_PyCallable_Check _PyCallable_Check =
      _PyCallable_Check_ptr.asFunction<_dart_PyCallable_Check>();

  void PyObject_ClearWeakRefs(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyObject_ClearWeakRefs(
      arg0,
    );
  }

  late final _PyObject_ClearWeakRefs_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_ClearWeakRefs>>(
          'PyObject_ClearWeakRefs');
  late final _dart_PyObject_ClearWeakRefs _PyObject_ClearWeakRefs =
      _PyObject_ClearWeakRefs_ptr.asFunction<_dart_PyObject_ClearWeakRefs>();

  ffi.Pointer<PyObject> PyObject_Dir(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyObject_Dir(
      arg0,
    );
  }

  late final _PyObject_Dir_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_Dir>>('PyObject_Dir');
  late final _dart_PyObject_Dir _PyObject_Dir =
      _PyObject_Dir_ptr.asFunction<_dart_PyObject_Dir>();

  int Py_ReprEnter(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _Py_ReprEnter(
      arg0,
    );
  }

  late final _Py_ReprEnter_ptr =
      _lookup<ffi.NativeFunction<_c_Py_ReprEnter>>('Py_ReprEnter');
  late final _dart_Py_ReprEnter _Py_ReprEnter =
      _Py_ReprEnter_ptr.asFunction<_dart_Py_ReprEnter>();

  void Py_ReprLeave(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _Py_ReprLeave(
      arg0,
    );
  }

  late final _Py_ReprLeave_ptr =
      _lookup<ffi.NativeFunction<_c_Py_ReprLeave>>('Py_ReprLeave');
  late final _dart_Py_ReprLeave _Py_ReprLeave =
      _Py_ReprLeave_ptr.asFunction<_dart_Py_ReprLeave>();

  int PyTraceMalloc_NewReference(
    ffi.Pointer<PyObject> op,
  ) {
    return _PyTraceMalloc_NewReference(
      op,
    );
  }

  late final _PyTraceMalloc_NewReference_ptr =
      _lookup<ffi.NativeFunction<_c_PyTraceMalloc_NewReference>>(
          '_PyTraceMalloc_NewReference');
  late final _dart_PyTraceMalloc_NewReference _PyTraceMalloc_NewReference =
      _PyTraceMalloc_NewReference_ptr.asFunction<
          _dart_PyTraceMalloc_NewReference>();

  void Py_Dealloc(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _Py_Dealloc(
      arg0,
    );
  }

  late final _Py_Dealloc_ptr =
      _lookup<ffi.NativeFunction<_c_Py_Dealloc>>('_Py_Dealloc');
  late final _dart_Py_Dealloc _Py_Dealloc =
      _Py_Dealloc_ptr.asFunction<_dart_Py_Dealloc>();

  void Py_IncRef(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _Py_IncRef(
      arg0,
    );
  }

  late final _Py_IncRef_ptr =
      _lookup<ffi.NativeFunction<_c_Py_IncRef>>('Py_IncRef');
  late final _dart_Py_IncRef _Py_IncRef =
      _Py_IncRef_ptr.asFunction<_dart_Py_IncRef>();

  void Py_DecRef(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _Py_DecRef(
      arg0,
    );
  }

  late final _Py_DecRef_ptr =
      _lookup<ffi.NativeFunction<_c_Py_DecRef>>('Py_DecRef');
  late final _dart_Py_DecRef _Py_DecRef =
      _Py_DecRef_ptr.asFunction<_dart_Py_DecRef>();

  late final ffi.Pointer<PyObject> _Py_NoneStruct =
      _lookup<PyObject>('_Py_NoneStruct');

  PyObject get Py_NoneStruct => _Py_NoneStruct.ref;

  late final ffi.Pointer<PyObject> _Py_NotImplementedStruct =
      _lookup<PyObject>('_Py_NotImplementedStruct');

  PyObject get Py_NotImplementedStruct => _Py_NotImplementedStruct.ref;

  void PyTrash_thread_deposit_object(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyTrash_thread_deposit_object(
      arg0,
    );
  }

  late final _PyTrash_thread_deposit_object_ptr =
      _lookup<ffi.NativeFunction<_c_PyTrash_thread_deposit_object>>(
          '_PyTrash_thread_deposit_object');
  late final _dart_PyTrash_thread_deposit_object
      _PyTrash_thread_deposit_object = _PyTrash_thread_deposit_object_ptr
          .asFunction<_dart_PyTrash_thread_deposit_object>();

  void PyTrash_thread_destroy_chain() {
    return _PyTrash_thread_destroy_chain();
  }

  late final _PyTrash_thread_destroy_chain_ptr =
      _lookup<ffi.NativeFunction<_c_PyTrash_thread_destroy_chain>>(
          '_PyTrash_thread_destroy_chain');
  late final _dart_PyTrash_thread_destroy_chain _PyTrash_thread_destroy_chain =
      _PyTrash_thread_destroy_chain_ptr.asFunction<
          _dart_PyTrash_thread_destroy_chain>();

  ffi.Pointer<PyObject> PyLong_FromTime_t(
    int sec,
  ) {
    return _PyLong_FromTime_t(
      sec,
    );
  }

  late final _PyLong_FromTime_t_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_FromTime_t>>('_PyLong_FromTime_t');
  late final _dart_PyLong_FromTime_t _PyLong_FromTime_t =
      _PyLong_FromTime_t_ptr.asFunction<_dart_PyLong_FromTime_t>();

  int PyLong_AsTime_t(
    ffi.Pointer<PyObject> obj,
  ) {
    return _PyLong_AsTime_t(
      obj,
    );
  }

  late final _PyLong_AsTime_t_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_AsTime_t>>('_PyLong_AsTime_t');
  late final _dart_PyLong_AsTime_t _PyLong_AsTime_t =
      _PyLong_AsTime_t_ptr.asFunction<_dart_PyLong_AsTime_t>();

  int PyTime_ObjectToTime_t(
    ffi.Pointer<PyObject> obj,
    ffi.Pointer<ffi.Int64> sec,
    int arg2,
  ) {
    return _PyTime_ObjectToTime_t(
      obj,
      sec,
      arg2,
    );
  }

  late final _PyTime_ObjectToTime_t_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_ObjectToTime_t>>(
          '_PyTime_ObjectToTime_t');
  late final _dart_PyTime_ObjectToTime_t _PyTime_ObjectToTime_t =
      _PyTime_ObjectToTime_t_ptr.asFunction<_dart_PyTime_ObjectToTime_t>();

  int PyTime_ObjectToTimeval(
    ffi.Pointer<PyObject> obj,
    ffi.Pointer<ffi.Int64> sec,
    ffi.Pointer<ffi.Int64> usec,
    int arg3,
  ) {
    return _PyTime_ObjectToTimeval(
      obj,
      sec,
      usec,
      arg3,
    );
  }

  late final _PyTime_ObjectToTimeval_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_ObjectToTimeval>>(
          '_PyTime_ObjectToTimeval');
  late final _dart_PyTime_ObjectToTimeval _PyTime_ObjectToTimeval =
      _PyTime_ObjectToTimeval_ptr.asFunction<_dart_PyTime_ObjectToTimeval>();

  int PyTime_ObjectToTimespec(
    ffi.Pointer<PyObject> obj,
    ffi.Pointer<ffi.Int64> sec,
    ffi.Pointer<ffi.Int64> nsec,
    int arg3,
  ) {
    return _PyTime_ObjectToTimespec(
      obj,
      sec,
      nsec,
      arg3,
    );
  }

  late final _PyTime_ObjectToTimespec_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_ObjectToTimespec>>(
          '_PyTime_ObjectToTimespec');
  late final _dart_PyTime_ObjectToTimespec _PyTime_ObjectToTimespec =
      _PyTime_ObjectToTimespec_ptr.asFunction<_dart_PyTime_ObjectToTimespec>();

  int PyTime_FromSeconds(
    int seconds,
  ) {
    return _PyTime_FromSeconds(
      seconds,
    );
  }

  late final _PyTime_FromSeconds_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_FromSeconds>>('_PyTime_FromSeconds');
  late final _dart_PyTime_FromSeconds _PyTime_FromSeconds =
      _PyTime_FromSeconds_ptr.asFunction<_dart_PyTime_FromSeconds>();

  int PyTime_FromNanoseconds(
    int ns,
  ) {
    return _PyTime_FromNanoseconds(
      ns,
    );
  }

  late final _PyTime_FromNanoseconds_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_FromNanoseconds>>(
          '_PyTime_FromNanoseconds');
  late final _dart_PyTime_FromNanoseconds _PyTime_FromNanoseconds =
      _PyTime_FromNanoseconds_ptr.asFunction<_dart_PyTime_FromNanoseconds>();

  int PyTime_FromNanosecondsObject(
    ffi.Pointer<ffi.Int64> t,
    ffi.Pointer<PyObject> obj,
  ) {
    return _PyTime_FromNanosecondsObject(
      t,
      obj,
    );
  }

  late final _PyTime_FromNanosecondsObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_FromNanosecondsObject>>(
          '_PyTime_FromNanosecondsObject');
  late final _dart_PyTime_FromNanosecondsObject _PyTime_FromNanosecondsObject =
      _PyTime_FromNanosecondsObject_ptr.asFunction<
          _dart_PyTime_FromNanosecondsObject>();

  int PyTime_FromSecondsObject(
    ffi.Pointer<ffi.Int64> t,
    ffi.Pointer<PyObject> obj,
    int round,
  ) {
    return _PyTime_FromSecondsObject(
      t,
      obj,
      round,
    );
  }

  late final _PyTime_FromSecondsObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_FromSecondsObject>>(
          '_PyTime_FromSecondsObject');
  late final _dart_PyTime_FromSecondsObject _PyTime_FromSecondsObject =
      _PyTime_FromSecondsObject_ptr.asFunction<
          _dart_PyTime_FromSecondsObject>();

  int PyTime_FromMillisecondsObject(
    ffi.Pointer<ffi.Int64> t,
    ffi.Pointer<PyObject> obj,
    int round,
  ) {
    return _PyTime_FromMillisecondsObject(
      t,
      obj,
      round,
    );
  }

  late final _PyTime_FromMillisecondsObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_FromMillisecondsObject>>(
          '_PyTime_FromMillisecondsObject');
  late final _dart_PyTime_FromMillisecondsObject
      _PyTime_FromMillisecondsObject = _PyTime_FromMillisecondsObject_ptr
          .asFunction<_dart_PyTime_FromMillisecondsObject>();

  double PyTime_AsSecondsDouble(
    int t,
  ) {
    return _PyTime_AsSecondsDouble(
      t,
    );
  }

  late final _PyTime_AsSecondsDouble_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_AsSecondsDouble>>(
          '_PyTime_AsSecondsDouble');
  late final _dart_PyTime_AsSecondsDouble _PyTime_AsSecondsDouble =
      _PyTime_AsSecondsDouble_ptr.asFunction<_dart_PyTime_AsSecondsDouble>();

  int PyTime_AsMilliseconds(
    int t,
    int round,
  ) {
    return _PyTime_AsMilliseconds(
      t,
      round,
    );
  }

  late final _PyTime_AsMilliseconds_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_AsMilliseconds>>(
          '_PyTime_AsMilliseconds');
  late final _dart_PyTime_AsMilliseconds _PyTime_AsMilliseconds =
      _PyTime_AsMilliseconds_ptr.asFunction<_dart_PyTime_AsMilliseconds>();

  int PyTime_AsMicroseconds(
    int t,
    int round,
  ) {
    return _PyTime_AsMicroseconds(
      t,
      round,
    );
  }

  late final _PyTime_AsMicroseconds_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_AsMicroseconds>>(
          '_PyTime_AsMicroseconds');
  late final _dart_PyTime_AsMicroseconds _PyTime_AsMicroseconds =
      _PyTime_AsMicroseconds_ptr.asFunction<_dart_PyTime_AsMicroseconds>();

  ffi.Pointer<PyObject> PyTime_AsNanosecondsObject(
    int t,
  ) {
    return _PyTime_AsNanosecondsObject(
      t,
    );
  }

  late final _PyTime_AsNanosecondsObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_AsNanosecondsObject>>(
          '_PyTime_AsNanosecondsObject');
  late final _dart_PyTime_AsNanosecondsObject _PyTime_AsNanosecondsObject =
      _PyTime_AsNanosecondsObject_ptr.asFunction<
          _dart_PyTime_AsNanosecondsObject>();

  int PyTime_FromTimeval(
    ffi.Pointer<ffi.Int64> tp,
    ffi.Pointer<timeval> tv,
  ) {
    return _PyTime_FromTimeval(
      tp,
      tv,
    );
  }

  late final _PyTime_FromTimeval_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_FromTimeval>>('_PyTime_FromTimeval');
  late final _dart_PyTime_FromTimeval _PyTime_FromTimeval =
      _PyTime_FromTimeval_ptr.asFunction<_dart_PyTime_FromTimeval>();

  int PyTime_AsTimeval(
    int t,
    ffi.Pointer<timeval> tv,
    int round,
  ) {
    return _PyTime_AsTimeval(
      t,
      tv,
      round,
    );
  }

  late final _PyTime_AsTimeval_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_AsTimeval>>('_PyTime_AsTimeval');
  late final _dart_PyTime_AsTimeval _PyTime_AsTimeval =
      _PyTime_AsTimeval_ptr.asFunction<_dart_PyTime_AsTimeval>();

  int PyTime_AsTimeval_noraise(
    int t,
    ffi.Pointer<timeval> tv,
    int round,
  ) {
    return _PyTime_AsTimeval_noraise(
      t,
      tv,
      round,
    );
  }

  late final _PyTime_AsTimeval_noraise_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_AsTimeval_noraise>>(
          '_PyTime_AsTimeval_noraise');
  late final _dart_PyTime_AsTimeval_noraise _PyTime_AsTimeval_noraise =
      _PyTime_AsTimeval_noraise_ptr.asFunction<
          _dart_PyTime_AsTimeval_noraise>();

  int PyTime_AsTimevalTime_t(
    int t,
    ffi.Pointer<ffi.Int64> secs,
    ffi.Pointer<ffi.Int32> us,
    int round,
  ) {
    return _PyTime_AsTimevalTime_t(
      t,
      secs,
      us,
      round,
    );
  }

  late final _PyTime_AsTimevalTime_t_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_AsTimevalTime_t>>(
          '_PyTime_AsTimevalTime_t');
  late final _dart_PyTime_AsTimevalTime_t _PyTime_AsTimevalTime_t =
      _PyTime_AsTimevalTime_t_ptr.asFunction<_dart_PyTime_AsTimevalTime_t>();

  int PyTime_FromTimespec(
    ffi.Pointer<ffi.Int64> tp,
    ffi.Pointer<timespec> ts,
  ) {
    return _PyTime_FromTimespec(
      tp,
      ts,
    );
  }

  late final _PyTime_FromTimespec_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_FromTimespec>>(
          '_PyTime_FromTimespec');
  late final _dart_PyTime_FromTimespec _PyTime_FromTimespec =
      _PyTime_FromTimespec_ptr.asFunction<_dart_PyTime_FromTimespec>();

  int PyTime_AsTimespec(
    int t,
    ffi.Pointer<timespec> ts,
  ) {
    return _PyTime_AsTimespec(
      t,
      ts,
    );
  }

  late final _PyTime_AsTimespec_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_AsTimespec>>('_PyTime_AsTimespec');
  late final _dart_PyTime_AsTimespec _PyTime_AsTimespec =
      _PyTime_AsTimespec_ptr.asFunction<_dart_PyTime_AsTimespec>();

  int PyTime_MulDiv(
    int ticks,
    int mul,
    int div,
  ) {
    return _PyTime_MulDiv(
      ticks,
      mul,
      div,
    );
  }

  late final _PyTime_MulDiv_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_MulDiv>>('_PyTime_MulDiv');
  late final _dart_PyTime_MulDiv _PyTime_MulDiv =
      _PyTime_MulDiv_ptr.asFunction<_dart_PyTime_MulDiv>();

  int PyTime_GetSystemClock() {
    return _PyTime_GetSystemClock();
  }

  late final _PyTime_GetSystemClock_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_GetSystemClock>>(
          '_PyTime_GetSystemClock');
  late final _dart_PyTime_GetSystemClock _PyTime_GetSystemClock =
      _PyTime_GetSystemClock_ptr.asFunction<_dart_PyTime_GetSystemClock>();

  int PyTime_GetMonotonicClock() {
    return _PyTime_GetMonotonicClock();
  }

  late final _PyTime_GetMonotonicClock_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_GetMonotonicClock>>(
          '_PyTime_GetMonotonicClock');
  late final _dart_PyTime_GetMonotonicClock _PyTime_GetMonotonicClock =
      _PyTime_GetMonotonicClock_ptr.asFunction<
          _dart_PyTime_GetMonotonicClock>();

  int PyTime_GetSystemClockWithInfo(
    ffi.Pointer<ffi.Int64> t,
    ffi.Pointer<_Py_clock_info_t> info,
  ) {
    return _PyTime_GetSystemClockWithInfo(
      t,
      info,
    );
  }

  late final _PyTime_GetSystemClockWithInfo_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_GetSystemClockWithInfo>>(
          '_PyTime_GetSystemClockWithInfo');
  late final _dart_PyTime_GetSystemClockWithInfo
      _PyTime_GetSystemClockWithInfo = _PyTime_GetSystemClockWithInfo_ptr
          .asFunction<_dart_PyTime_GetSystemClockWithInfo>();

  int PyTime_GetMonotonicClockWithInfo(
    ffi.Pointer<ffi.Int64> t,
    ffi.Pointer<_Py_clock_info_t> info,
  ) {
    return _PyTime_GetMonotonicClockWithInfo(
      t,
      info,
    );
  }

  late final _PyTime_GetMonotonicClockWithInfo_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_GetMonotonicClockWithInfo>>(
          '_PyTime_GetMonotonicClockWithInfo');
  late final _dart_PyTime_GetMonotonicClockWithInfo
      _PyTime_GetMonotonicClockWithInfo = _PyTime_GetMonotonicClockWithInfo_ptr
          .asFunction<_dart_PyTime_GetMonotonicClockWithInfo>();

  int PyTime_Init() {
    return _PyTime_Init();
  }

  late final _PyTime_Init_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_Init>>('_PyTime_Init');
  late final _dart_PyTime_Init _PyTime_Init =
      _PyTime_Init_ptr.asFunction<_dart_PyTime_Init>();

  int PyTime_localtime(
    int t,
    ffi.Pointer<tm> tm,
  ) {
    return _PyTime_localtime(
      t,
      tm,
    );
  }

  late final _PyTime_localtime_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_localtime>>('_PyTime_localtime');
  late final _dart_PyTime_localtime _PyTime_localtime =
      _PyTime_localtime_ptr.asFunction<_dart_PyTime_localtime>();

  int PyTime_gmtime(
    int t,
    ffi.Pointer<tm> tm,
  ) {
    return _PyTime_gmtime(
      t,
      tm,
    );
  }

  late final _PyTime_gmtime_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_gmtime>>('_PyTime_gmtime');
  late final _dart_PyTime_gmtime _PyTime_gmtime =
      _PyTime_gmtime_ptr.asFunction<_dart_PyTime_gmtime>();

  int PyTime_GetPerfCounter() {
    return _PyTime_GetPerfCounter();
  }

  late final _PyTime_GetPerfCounter_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_GetPerfCounter>>(
          '_PyTime_GetPerfCounter');
  late final _dart_PyTime_GetPerfCounter _PyTime_GetPerfCounter =
      _PyTime_GetPerfCounter_ptr.asFunction<_dart_PyTime_GetPerfCounter>();

  int PyTime_GetPerfCounterWithInfo(
    ffi.Pointer<ffi.Int64> t,
    ffi.Pointer<_Py_clock_info_t> info,
  ) {
    return _PyTime_GetPerfCounterWithInfo(
      t,
      info,
    );
  }

  late final _PyTime_GetPerfCounterWithInfo_ptr =
      _lookup<ffi.NativeFunction<_c_PyTime_GetPerfCounterWithInfo>>(
          '_PyTime_GetPerfCounterWithInfo');
  late final _dart_PyTime_GetPerfCounterWithInfo
      _PyTime_GetPerfCounterWithInfo = _PyTime_GetPerfCounterWithInfo_ptr
          .asFunction<_dart_PyTime_GetPerfCounterWithInfo>();

  ffi.Pointer<ffi.Void> PyObject_Malloc(
    int size,
  ) {
    return _PyObject_Malloc(
      size,
    );
  }

  late final _PyObject_Malloc_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_Malloc>>('PyObject_Malloc');
  late final _dart_PyObject_Malloc _PyObject_Malloc =
      _PyObject_Malloc_ptr.asFunction<_dart_PyObject_Malloc>();

  ffi.Pointer<ffi.Void> PyObject_Calloc(
    int nelem,
    int elsize,
  ) {
    return _PyObject_Calloc(
      nelem,
      elsize,
    );
  }

  late final _PyObject_Calloc_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_Calloc>>('PyObject_Calloc');
  late final _dart_PyObject_Calloc _PyObject_Calloc =
      _PyObject_Calloc_ptr.asFunction<_dart_PyObject_Calloc>();

  ffi.Pointer<ffi.Void> PyObject_Realloc(
    ffi.Pointer<ffi.Void> ptr,
    int new_size,
  ) {
    return _PyObject_Realloc(
      ptr,
      new_size,
    );
  }

  late final _PyObject_Realloc_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_Realloc>>('PyObject_Realloc');
  late final _dart_PyObject_Realloc _PyObject_Realloc =
      _PyObject_Realloc_ptr.asFunction<_dart_PyObject_Realloc>();

  void PyObject_Free(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _PyObject_Free(
      ptr,
    );
  }

  late final _PyObject_Free_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_Free>>('PyObject_Free');
  late final _dart_PyObject_Free _PyObject_Free =
      _PyObject_Free_ptr.asFunction<_dart_PyObject_Free>();

  ffi.Pointer<PyObject> PyObject_Init(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<_typeobject> arg1,
  ) {
    return _PyObject_Init(
      arg0,
      arg1,
    );
  }

  late final _PyObject_Init_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_Init>>('PyObject_Init');
  late final _dart_PyObject_Init _PyObject_Init =
      _PyObject_Init_ptr.asFunction<_dart_PyObject_Init>();

  ffi.Pointer<PyVarObject> PyObject_InitVar(
    ffi.Pointer<PyVarObject> arg0,
    ffi.Pointer<_typeobject> arg1,
    int arg2,
  ) {
    return _PyObject_InitVar(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyObject_InitVar_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_InitVar>>('PyObject_InitVar');
  late final _dart_PyObject_InitVar _PyObject_InitVar =
      _PyObject_InitVar_ptr.asFunction<_dart_PyObject_InitVar>();

  ffi.Pointer<PyObject> PyObject_New(
    ffi.Pointer<_typeobject> arg0,
  ) {
    return _PyObject_New(
      arg0,
    );
  }

  late final _PyObject_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_New>>('_PyObject_New');
  late final _dart_PyObject_New _PyObject_New =
      _PyObject_New_ptr.asFunction<_dart_PyObject_New>();

  ffi.Pointer<PyVarObject> PyObject_NewVar(
    ffi.Pointer<_typeobject> arg0,
    int arg1,
  ) {
    return _PyObject_NewVar(
      arg0,
      arg1,
    );
  }

  late final _PyObject_NewVar_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_NewVar>>('_PyObject_NewVar');
  late final _dart_PyObject_NewVar _PyObject_NewVar =
      _PyObject_NewVar_ptr.asFunction<_dart_PyObject_NewVar>();

  int PyGC_Collect() {
    return _PyGC_Collect();
  }

  late final _PyGC_Collect_ptr =
      _lookup<ffi.NativeFunction<_c_PyGC_Collect>>('PyGC_Collect');
  late final _dart_PyGC_Collect _PyGC_Collect =
      _PyGC_Collect_ptr.asFunction<_dart_PyGC_Collect>();

  ffi.Pointer<PyVarObject> PyObject_GC_Resize(
    ffi.Pointer<PyVarObject> arg0,
    int arg1,
  ) {
    return _PyObject_GC_Resize(
      arg0,
      arg1,
    );
  }

  late final _PyObject_GC_Resize_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_GC_Resize>>('_PyObject_GC_Resize');
  late final _dart_PyObject_GC_Resize _PyObject_GC_Resize =
      _PyObject_GC_Resize_ptr.asFunction<_dart_PyObject_GC_Resize>();

  ffi.Pointer<PyObject> PyObject_GC_New(
    ffi.Pointer<_typeobject> arg0,
  ) {
    return _PyObject_GC_New(
      arg0,
    );
  }

  late final _PyObject_GC_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_GC_New>>('_PyObject_GC_New');
  late final _dart_PyObject_GC_New _PyObject_GC_New =
      _PyObject_GC_New_ptr.asFunction<_dart_PyObject_GC_New>();

  ffi.Pointer<PyVarObject> PyObject_GC_NewVar(
    ffi.Pointer<_typeobject> arg0,
    int arg1,
  ) {
    return _PyObject_GC_NewVar(
      arg0,
      arg1,
    );
  }

  late final _PyObject_GC_NewVar_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_GC_NewVar>>('_PyObject_GC_NewVar');
  late final _dart_PyObject_GC_NewVar _PyObject_GC_NewVar =
      _PyObject_GC_NewVar_ptr.asFunction<_dart_PyObject_GC_NewVar>();

  void PyObject_GC_Track(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _PyObject_GC_Track(
      arg0,
    );
  }

  late final _PyObject_GC_Track_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_GC_Track>>('PyObject_GC_Track');
  late final _dart_PyObject_GC_Track _PyObject_GC_Track =
      _PyObject_GC_Track_ptr.asFunction<_dart_PyObject_GC_Track>();

  void PyObject_GC_UnTrack(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _PyObject_GC_UnTrack(
      arg0,
    );
  }

  late final _PyObject_GC_UnTrack_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_GC_UnTrack>>(
          'PyObject_GC_UnTrack');
  late final _dart_PyObject_GC_UnTrack _PyObject_GC_UnTrack =
      _PyObject_GC_UnTrack_ptr.asFunction<_dart_PyObject_GC_UnTrack>();

  void PyObject_GC_Del(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _PyObject_GC_Del(
      arg0,
    );
  }

  late final _PyObject_GC_Del_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_GC_Del>>('PyObject_GC_Del');
  late final _dart_PyObject_GC_Del _PyObject_GC_Del =
      _PyObject_GC_Del_ptr.asFunction<_dart_PyObject_GC_Del>();

  int Py_HashDouble(
    double arg0,
  ) {
    return _Py_HashDouble(
      arg0,
    );
  }

  late final _Py_HashDouble_ptr =
      _lookup<ffi.NativeFunction<_c_Py_HashDouble>>('_Py_HashDouble');
  late final _dart_Py_HashDouble _Py_HashDouble =
      _Py_HashDouble_ptr.asFunction<_dart_Py_HashDouble>();

  int Py_HashPointer(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _Py_HashPointer(
      arg0,
    );
  }

  late final _Py_HashPointer_ptr =
      _lookup<ffi.NativeFunction<_c_Py_HashPointer>>('_Py_HashPointer');
  late final _dart_Py_HashPointer _Py_HashPointer =
      _Py_HashPointer_ptr.asFunction<_dart_Py_HashPointer>();

  int Py_HashBytes(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _Py_HashBytes(
      arg0,
      arg1,
    );
  }

  late final _Py_HashBytes_ptr =
      _lookup<ffi.NativeFunction<_c_Py_HashBytes>>('_Py_HashBytes');
  late final _dart_Py_HashBytes _Py_HashBytes =
      _Py_HashBytes_ptr.asFunction<_dart_Py_HashBytes>();

  ffi.Pointer<PyHash_FuncDef> PyHash_GetFuncDef() {
    return _PyHash_GetFuncDef();
  }

  late final _PyHash_GetFuncDef_ptr =
      _lookup<ffi.NativeFunction<_c_PyHash_GetFuncDef>>('PyHash_GetFuncDef');
  late final _dart_PyHash_GetFuncDef _PyHash_GetFuncDef =
      _PyHash_GetFuncDef_ptr.asFunction<_dart_PyHash_GetFuncDef>();

  late final ffi.Pointer<ffi.Int32> _Py_DebugFlag =
      _lookup<ffi.Int32>('Py_DebugFlag');

  int get Py_DebugFlag => _Py_DebugFlag.value;

  set Py_DebugFlag(int value) => _Py_DebugFlag.value = value;

  late final ffi.Pointer<ffi.Int32> _Py_VerboseFlag =
      _lookup<ffi.Int32>('Py_VerboseFlag');

  int get Py_VerboseFlag => _Py_VerboseFlag.value;

  set Py_VerboseFlag(int value) => _Py_VerboseFlag.value = value;

  late final ffi.Pointer<ffi.Int32> _Py_QuietFlag =
      _lookup<ffi.Int32>('Py_QuietFlag');

  int get Py_QuietFlag => _Py_QuietFlag.value;

  set Py_QuietFlag(int value) => _Py_QuietFlag.value = value;

  late final ffi.Pointer<ffi.Int32> _Py_InteractiveFlag =
      _lookup<ffi.Int32>('Py_InteractiveFlag');

  int get Py_InteractiveFlag => _Py_InteractiveFlag.value;

  set Py_InteractiveFlag(int value) => _Py_InteractiveFlag.value = value;

  late final ffi.Pointer<ffi.Int32> _Py_InspectFlag =
      _lookup<ffi.Int32>('Py_InspectFlag');

  int get Py_InspectFlag => _Py_InspectFlag.value;

  set Py_InspectFlag(int value) => _Py_InspectFlag.value = value;

  late final ffi.Pointer<ffi.Int32> _Py_OptimizeFlag =
      _lookup<ffi.Int32>('Py_OptimizeFlag');

  int get Py_OptimizeFlag => _Py_OptimizeFlag.value;

  set Py_OptimizeFlag(int value) => _Py_OptimizeFlag.value = value;

  late final ffi.Pointer<ffi.Int32> _Py_NoSiteFlag =
      _lookup<ffi.Int32>('Py_NoSiteFlag');

  int get Py_NoSiteFlag => _Py_NoSiteFlag.value;

  set Py_NoSiteFlag(int value) => _Py_NoSiteFlag.value = value;

  late final ffi.Pointer<ffi.Int32> _Py_BytesWarningFlag =
      _lookup<ffi.Int32>('Py_BytesWarningFlag');

  int get Py_BytesWarningFlag => _Py_BytesWarningFlag.value;

  set Py_BytesWarningFlag(int value) => _Py_BytesWarningFlag.value = value;

  late final ffi.Pointer<ffi.Int32> _Py_FrozenFlag =
      _lookup<ffi.Int32>('Py_FrozenFlag');

  int get Py_FrozenFlag => _Py_FrozenFlag.value;

  set Py_FrozenFlag(int value) => _Py_FrozenFlag.value = value;

  late final ffi.Pointer<ffi.Int32> _Py_IgnoreEnvironmentFlag =
      _lookup<ffi.Int32>('Py_IgnoreEnvironmentFlag');

  int get Py_IgnoreEnvironmentFlag => _Py_IgnoreEnvironmentFlag.value;

  set Py_IgnoreEnvironmentFlag(int value) =>
      _Py_IgnoreEnvironmentFlag.value = value;

  late final ffi.Pointer<ffi.Int32> _Py_DontWriteBytecodeFlag =
      _lookup<ffi.Int32>('Py_DontWriteBytecodeFlag');

  int get Py_DontWriteBytecodeFlag => _Py_DontWriteBytecodeFlag.value;

  set Py_DontWriteBytecodeFlag(int value) =>
      _Py_DontWriteBytecodeFlag.value = value;

  late final ffi.Pointer<ffi.Int32> _Py_NoUserSiteDirectory =
      _lookup<ffi.Int32>('Py_NoUserSiteDirectory');

  int get Py_NoUserSiteDirectory => _Py_NoUserSiteDirectory.value;

  set Py_NoUserSiteDirectory(int value) =>
      _Py_NoUserSiteDirectory.value = value;

  late final ffi.Pointer<ffi.Int32> _Py_UnbufferedStdioFlag =
      _lookup<ffi.Int32>('Py_UnbufferedStdioFlag');

  int get Py_UnbufferedStdioFlag => _Py_UnbufferedStdioFlag.value;

  set Py_UnbufferedStdioFlag(int value) =>
      _Py_UnbufferedStdioFlag.value = value;

  late final ffi.Pointer<ffi.Int32> _Py_HashRandomizationFlag =
      _lookup<ffi.Int32>('Py_HashRandomizationFlag');

  int get Py_HashRandomizationFlag => _Py_HashRandomizationFlag.value;

  set Py_HashRandomizationFlag(int value) =>
      _Py_HashRandomizationFlag.value = value;

  late final ffi.Pointer<ffi.Int32> _Py_IsolatedFlag =
      _lookup<ffi.Int32>('Py_IsolatedFlag');

  int get Py_IsolatedFlag => _Py_IsolatedFlag.value;

  set Py_IsolatedFlag(int value) => _Py_IsolatedFlag.value = value;

  late final ffi.Pointer<_typeobject> _PyByteArray_Type =
      _lookup<_typeobject>('PyByteArray_Type');

  _typeobject get PyByteArray_Type => _PyByteArray_Type.ref;

  late final ffi.Pointer<_typeobject> _PyByteArrayIter_Type =
      _lookup<_typeobject>('PyByteArrayIter_Type');

  _typeobject get PyByteArrayIter_Type => _PyByteArrayIter_Type.ref;

  ffi.Pointer<PyObject> PyByteArray_FromObject(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyByteArray_FromObject(
      arg0,
    );
  }

  late final _PyByteArray_FromObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyByteArray_FromObject>>(
          'PyByteArray_FromObject');
  late final _dart_PyByteArray_FromObject _PyByteArray_FromObject =
      _PyByteArray_FromObject_ptr.asFunction<_dart_PyByteArray_FromObject>();

  ffi.Pointer<PyObject> PyByteArray_Concat(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyByteArray_Concat(
      arg0,
      arg1,
    );
  }

  late final _PyByteArray_Concat_ptr =
      _lookup<ffi.NativeFunction<_c_PyByteArray_Concat>>('PyByteArray_Concat');
  late final _dart_PyByteArray_Concat _PyByteArray_Concat =
      _PyByteArray_Concat_ptr.asFunction<_dart_PyByteArray_Concat>();

  ffi.Pointer<PyObject> PyByteArray_FromStringAndSize(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _PyByteArray_FromStringAndSize(
      arg0,
      arg1,
    );
  }

  late final _PyByteArray_FromStringAndSize_ptr =
      _lookup<ffi.NativeFunction<_c_PyByteArray_FromStringAndSize>>(
          'PyByteArray_FromStringAndSize');
  late final _dart_PyByteArray_FromStringAndSize
      _PyByteArray_FromStringAndSize = _PyByteArray_FromStringAndSize_ptr
          .asFunction<_dart_PyByteArray_FromStringAndSize>();

  int PyByteArray_Size(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyByteArray_Size(
      arg0,
    );
  }

  late final _PyByteArray_Size_ptr =
      _lookup<ffi.NativeFunction<_c_PyByteArray_Size>>('PyByteArray_Size');
  late final _dart_PyByteArray_Size _PyByteArray_Size =
      _PyByteArray_Size_ptr.asFunction<_dart_PyByteArray_Size>();

  ffi.Pointer<ffi.Int8> PyByteArray_AsString(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyByteArray_AsString(
      arg0,
    );
  }

  late final _PyByteArray_AsString_ptr =
      _lookup<ffi.NativeFunction<_c_PyByteArray_AsString>>(
          'PyByteArray_AsString');
  late final _dart_PyByteArray_AsString _PyByteArray_AsString =
      _PyByteArray_AsString_ptr.asFunction<_dart_PyByteArray_AsString>();

  int PyByteArray_Resize(
    ffi.Pointer<PyObject> arg0,
    int arg1,
  ) {
    return _PyByteArray_Resize(
      arg0,
      arg1,
    );
  }

  late final _PyByteArray_Resize_ptr =
      _lookup<ffi.NativeFunction<_c_PyByteArray_Resize>>('PyByteArray_Resize');
  late final _dart_PyByteArray_Resize _PyByteArray_Resize =
      _PyByteArray_Resize_ptr.asFunction<_dart_PyByteArray_Resize>();

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _PyByteArray_empty_string =
      _lookup<ffi.Pointer<ffi.Int8>>('_PyByteArray_empty_string');

  ffi.Pointer<ffi.Int8> get PyByteArray_empty_string =>
      _PyByteArray_empty_string.value;

  set PyByteArray_empty_string(ffi.Pointer<ffi.Int8> value) =>
      _PyByteArray_empty_string.value = value;

  late final ffi.Pointer<_typeobject> _PyBytes_Type =
      _lookup<_typeobject>('PyBytes_Type');

  _typeobject get PyBytes_Type => _PyBytes_Type.ref;

  late final ffi.Pointer<_typeobject> _PyBytesIter_Type =
      _lookup<_typeobject>('PyBytesIter_Type');

  _typeobject get PyBytesIter_Type => _PyBytesIter_Type.ref;

  ffi.Pointer<PyObject> PyBytes_FromStringAndSize(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _PyBytes_FromStringAndSize(
      arg0,
      arg1,
    );
  }

  late final _PyBytes_FromStringAndSize_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytes_FromStringAndSize>>(
          'PyBytes_FromStringAndSize');
  late final _dart_PyBytes_FromStringAndSize _PyBytes_FromStringAndSize =
      _PyBytes_FromStringAndSize_ptr.asFunction<
          _dart_PyBytes_FromStringAndSize>();

  ffi.Pointer<PyObject> PyBytes_FromString(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _PyBytes_FromString(
      arg0,
    );
  }

  late final _PyBytes_FromString_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytes_FromString>>('PyBytes_FromString');
  late final _dart_PyBytes_FromString _PyBytes_FromString =
      _PyBytes_FromString_ptr.asFunction<_dart_PyBytes_FromString>();

  ffi.Pointer<PyObject> PyBytes_FromObject(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyBytes_FromObject(
      arg0,
    );
  }

  late final _PyBytes_FromObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytes_FromObject>>('PyBytes_FromObject');
  late final _dart_PyBytes_FromObject _PyBytes_FromObject =
      _PyBytes_FromObject_ptr.asFunction<_dart_PyBytes_FromObject>();

  ffi.Pointer<PyObject> PyBytes_FromFormatV(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<__va_list_tag> arg1,
  ) {
    return _PyBytes_FromFormatV(
      arg0,
      arg1,
    );
  }

  late final _PyBytes_FromFormatV_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytes_FromFormatV>>(
          'PyBytes_FromFormatV');
  late final _dart_PyBytes_FromFormatV _PyBytes_FromFormatV =
      _PyBytes_FromFormatV_ptr.asFunction<_dart_PyBytes_FromFormatV>();

  ffi.Pointer<PyObject> PyBytes_FromFormat(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _PyBytes_FromFormat(
      arg0,
    );
  }

  late final _PyBytes_FromFormat_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytes_FromFormat>>('PyBytes_FromFormat');
  late final _dart_PyBytes_FromFormat _PyBytes_FromFormat =
      _PyBytes_FromFormat_ptr.asFunction<_dart_PyBytes_FromFormat>();

  int PyBytes_Size(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyBytes_Size(
      arg0,
    );
  }

  late final _PyBytes_Size_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytes_Size>>('PyBytes_Size');
  late final _dart_PyBytes_Size _PyBytes_Size =
      _PyBytes_Size_ptr.asFunction<_dart_PyBytes_Size>();

  ffi.Pointer<ffi.Int8> PyBytes_AsString(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyBytes_AsString(
      arg0,
    );
  }

  late final _PyBytes_AsString_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytes_AsString>>('PyBytes_AsString');
  late final _dart_PyBytes_AsString _PyBytes_AsString =
      _PyBytes_AsString_ptr.asFunction<_dart_PyBytes_AsString>();

  ffi.Pointer<PyObject> PyBytes_Repr(
    ffi.Pointer<PyObject> arg0,
    int arg1,
  ) {
    return _PyBytes_Repr(
      arg0,
      arg1,
    );
  }

  late final _PyBytes_Repr_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytes_Repr>>('PyBytes_Repr');
  late final _dart_PyBytes_Repr _PyBytes_Repr =
      _PyBytes_Repr_ptr.asFunction<_dart_PyBytes_Repr>();

  void PyBytes_Concat(
    ffi.Pointer<ffi.Pointer<PyObject>> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyBytes_Concat(
      arg0,
      arg1,
    );
  }

  late final _PyBytes_Concat_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytes_Concat>>('PyBytes_Concat');
  late final _dart_PyBytes_Concat _PyBytes_Concat =
      _PyBytes_Concat_ptr.asFunction<_dart_PyBytes_Concat>();

  void PyBytes_ConcatAndDel(
    ffi.Pointer<ffi.Pointer<PyObject>> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyBytes_ConcatAndDel(
      arg0,
      arg1,
    );
  }

  late final _PyBytes_ConcatAndDel_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytes_ConcatAndDel>>(
          'PyBytes_ConcatAndDel');
  late final _dart_PyBytes_ConcatAndDel _PyBytes_ConcatAndDel =
      _PyBytes_ConcatAndDel_ptr.asFunction<_dart_PyBytes_ConcatAndDel>();

  int PyBytes_Resize(
    ffi.Pointer<ffi.Pointer<PyObject>> arg0,
    int arg1,
  ) {
    return _PyBytes_Resize(
      arg0,
      arg1,
    );
  }

  late final _PyBytes_Resize_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytes_Resize>>('_PyBytes_Resize');
  late final _dart_PyBytes_Resize _PyBytes_Resize =
      _PyBytes_Resize_ptr.asFunction<_dart_PyBytes_Resize>();

  ffi.Pointer<PyObject> PyBytes_FormatEx(
    ffi.Pointer<ffi.Int8> format,
    int format_len,
    ffi.Pointer<PyObject> args,
    int use_bytearray,
  ) {
    return _PyBytes_FormatEx(
      format,
      format_len,
      args,
      use_bytearray,
    );
  }

  late final _PyBytes_FormatEx_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytes_FormatEx>>('_PyBytes_FormatEx');
  late final _dart_PyBytes_FormatEx _PyBytes_FormatEx =
      _PyBytes_FormatEx_ptr.asFunction<_dart_PyBytes_FormatEx>();

  ffi.Pointer<PyObject> PyBytes_FromHex(
    ffi.Pointer<PyObject> string,
    int use_bytearray,
  ) {
    return _PyBytes_FromHex(
      string,
      use_bytearray,
    );
  }

  late final _PyBytes_FromHex_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytes_FromHex>>('_PyBytes_FromHex');
  late final _dart_PyBytes_FromHex _PyBytes_FromHex =
      _PyBytes_FromHex_ptr.asFunction<_dart_PyBytes_FromHex>();

  ffi.Pointer<PyObject> PyBytes_DecodeEscape(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    int arg3,
    ffi.Pointer<ffi.Int8> arg4,
  ) {
    return _PyBytes_DecodeEscape(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _PyBytes_DecodeEscape_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytes_DecodeEscape>>(
          'PyBytes_DecodeEscape');
  late final _dart_PyBytes_DecodeEscape _PyBytes_DecodeEscape =
      _PyBytes_DecodeEscape_ptr.asFunction<_dart_PyBytes_DecodeEscape>();

  ffi.Pointer<PyObject> PyBytes_DecodeEscape_1(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    int arg3,
    ffi.Pointer<ffi.Int8> arg4,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg5,
  ) {
    return _PyBytes_DecodeEscape_1(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _PyBytes_DecodeEscape_1_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytes_DecodeEscape_1>>(
          '_PyBytes_DecodeEscape');
  late final _dart_PyBytes_DecodeEscape_1 _PyBytes_DecodeEscape_1 =
      _PyBytes_DecodeEscape_1_ptr.asFunction<_dart_PyBytes_DecodeEscape_1>();

  ffi.Pointer<PyObject> PyBytes_Join(
    ffi.Pointer<PyObject> sep,
    ffi.Pointer<PyObject> x,
  ) {
    return _PyBytes_Join(
      sep,
      x,
    );
  }

  late final _PyBytes_Join_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytes_Join>>('_PyBytes_Join');
  late final _dart_PyBytes_Join _PyBytes_Join =
      _PyBytes_Join_ptr.asFunction<_dart_PyBytes_Join>();

  int PyBytes_AsStringAndSize(
    ffi.Pointer<PyObject> obj,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> s,
    ffi.Pointer<ffi.Int64> len,
  ) {
    return _PyBytes_AsStringAndSize(
      obj,
      s,
      len,
    );
  }

  late final _PyBytes_AsStringAndSize_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytes_AsStringAndSize>>(
          'PyBytes_AsStringAndSize');
  late final _dart_PyBytes_AsStringAndSize _PyBytes_AsStringAndSize =
      _PyBytes_AsStringAndSize_ptr.asFunction<_dart_PyBytes_AsStringAndSize>();

  int PyBytes_InsertThousandsGroupingLocale(
    ffi.Pointer<ffi.Int8> buffer,
    int n_buffer,
    ffi.Pointer<ffi.Int8> digits,
    int n_digits,
    int min_width,
  ) {
    return _PyBytes_InsertThousandsGroupingLocale(
      buffer,
      n_buffer,
      digits,
      n_digits,
      min_width,
    );
  }

  late final _PyBytes_InsertThousandsGroupingLocale_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytes_InsertThousandsGroupingLocale>>(
          '_PyBytes_InsertThousandsGroupingLocale');
  late final _dart_PyBytes_InsertThousandsGroupingLocale
      _PyBytes_InsertThousandsGroupingLocale =
      _PyBytes_InsertThousandsGroupingLocale_ptr.asFunction<
          _dart_PyBytes_InsertThousandsGroupingLocale>();

  int PyBytes_InsertThousandsGrouping(
    ffi.Pointer<ffi.Int8> buffer,
    int n_buffer,
    ffi.Pointer<ffi.Int8> digits,
    int n_digits,
    int min_width,
    ffi.Pointer<ffi.Int8> grouping,
    ffi.Pointer<ffi.Int8> thousands_sep,
  ) {
    return _PyBytes_InsertThousandsGrouping(
      buffer,
      n_buffer,
      digits,
      n_digits,
      min_width,
      grouping,
      thousands_sep,
    );
  }

  late final _PyBytes_InsertThousandsGrouping_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytes_InsertThousandsGrouping>>(
          '_PyBytes_InsertThousandsGrouping');
  late final _dart_PyBytes_InsertThousandsGrouping
      _PyBytes_InsertThousandsGrouping = _PyBytes_InsertThousandsGrouping_ptr
          .asFunction<_dart_PyBytes_InsertThousandsGrouping>();

  void PyBytesWriter_Init(
    ffi.Pointer<_PyBytesWriter> writer,
  ) {
    return _PyBytesWriter_Init(
      writer,
    );
  }

  late final _PyBytesWriter_Init_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytesWriter_Init>>('_PyBytesWriter_Init');
  late final _dart_PyBytesWriter_Init _PyBytesWriter_Init =
      _PyBytesWriter_Init_ptr.asFunction<_dart_PyBytesWriter_Init>();

  ffi.Pointer<PyObject> PyBytesWriter_Finish(
    ffi.Pointer<_PyBytesWriter> writer,
    ffi.Pointer<ffi.Void> str,
  ) {
    return _PyBytesWriter_Finish(
      writer,
      str,
    );
  }

  late final _PyBytesWriter_Finish_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytesWriter_Finish>>(
          '_PyBytesWriter_Finish');
  late final _dart_PyBytesWriter_Finish _PyBytesWriter_Finish =
      _PyBytesWriter_Finish_ptr.asFunction<_dart_PyBytesWriter_Finish>();

  void PyBytesWriter_Dealloc(
    ffi.Pointer<_PyBytesWriter> writer,
  ) {
    return _PyBytesWriter_Dealloc(
      writer,
    );
  }

  late final _PyBytesWriter_Dealloc_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytesWriter_Dealloc>>(
          '_PyBytesWriter_Dealloc');
  late final _dart_PyBytesWriter_Dealloc _PyBytesWriter_Dealloc =
      _PyBytesWriter_Dealloc_ptr.asFunction<_dart_PyBytesWriter_Dealloc>();

  ffi.Pointer<ffi.Void> PyBytesWriter_Alloc(
    ffi.Pointer<_PyBytesWriter> writer,
    int size,
  ) {
    return _PyBytesWriter_Alloc(
      writer,
      size,
    );
  }

  late final _PyBytesWriter_Alloc_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytesWriter_Alloc>>(
          '_PyBytesWriter_Alloc');
  late final _dart_PyBytesWriter_Alloc _PyBytesWriter_Alloc =
      _PyBytesWriter_Alloc_ptr.asFunction<_dart_PyBytesWriter_Alloc>();

  ffi.Pointer<ffi.Void> PyBytesWriter_Prepare(
    ffi.Pointer<_PyBytesWriter> writer,
    ffi.Pointer<ffi.Void> str,
    int size,
  ) {
    return _PyBytesWriter_Prepare(
      writer,
      str,
      size,
    );
  }

  late final _PyBytesWriter_Prepare_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytesWriter_Prepare>>(
          '_PyBytesWriter_Prepare');
  late final _dart_PyBytesWriter_Prepare _PyBytesWriter_Prepare =
      _PyBytesWriter_Prepare_ptr.asFunction<_dart_PyBytesWriter_Prepare>();

  ffi.Pointer<ffi.Void> PyBytesWriter_Resize(
    ffi.Pointer<_PyBytesWriter> writer,
    ffi.Pointer<ffi.Void> str,
    int size,
  ) {
    return _PyBytesWriter_Resize(
      writer,
      str,
      size,
    );
  }

  late final _PyBytesWriter_Resize_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytesWriter_Resize>>(
          '_PyBytesWriter_Resize');
  late final _dart_PyBytesWriter_Resize _PyBytesWriter_Resize =
      _PyBytesWriter_Resize_ptr.asFunction<_dart_PyBytesWriter_Resize>();

  ffi.Pointer<ffi.Void> PyBytesWriter_WriteBytes(
    ffi.Pointer<_PyBytesWriter> writer,
    ffi.Pointer<ffi.Void> str,
    ffi.Pointer<ffi.Void> bytes,
    int size,
  ) {
    return _PyBytesWriter_WriteBytes(
      writer,
      str,
      bytes,
      size,
    );
  }

  late final _PyBytesWriter_WriteBytes_ptr =
      _lookup<ffi.NativeFunction<_c_PyBytesWriter_WriteBytes>>(
          '_PyBytesWriter_WriteBytes');
  late final _dart_PyBytesWriter_WriteBytes _PyBytesWriter_WriteBytes =
      _PyBytesWriter_WriteBytes_ptr.asFunction<
          _dart_PyBytesWriter_WriteBytes>();

  late final ffi.Pointer<_typeobject> _PyUnicode_Type =
      _lookup<_typeobject>('PyUnicode_Type');

  _typeobject get PyUnicode_Type => _PyUnicode_Type.ref;

  late final ffi.Pointer<_typeobject> _PyUnicodeIter_Type =
      _lookup<_typeobject>('PyUnicodeIter_Type');

  _typeobject get PyUnicodeIter_Type => _PyUnicodeIter_Type.ref;

  ffi.Pointer<PyObject> PyUnicode_FromStringAndSize(
    ffi.Pointer<ffi.Int8> u,
    int size,
  ) {
    return _PyUnicode_FromStringAndSize(
      u,
      size,
    );
  }

  late final _PyUnicode_FromStringAndSize_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_FromStringAndSize>>(
          'PyUnicode_FromStringAndSize');
  late final _dart_PyUnicode_FromStringAndSize _PyUnicode_FromStringAndSize =
      _PyUnicode_FromStringAndSize_ptr.asFunction<
          _dart_PyUnicode_FromStringAndSize>();

  ffi.Pointer<PyObject> PyUnicode_FromString(
    ffi.Pointer<ffi.Int8> u,
  ) {
    return _PyUnicode_FromString(
      u,
    );
  }

  late final _PyUnicode_FromString_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_FromString>>(
          'PyUnicode_FromString');
  late final _dart_PyUnicode_FromString _PyUnicode_FromString =
      _PyUnicode_FromString_ptr.asFunction<_dart_PyUnicode_FromString>();

  ffi.Pointer<PyObject> PyUnicode_Substring(
    ffi.Pointer<PyObject> str,
    int start,
    int end,
  ) {
    return _PyUnicode_Substring(
      str,
      start,
      end,
    );
  }

  late final _PyUnicode_Substring_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_Substring>>(
          'PyUnicode_Substring');
  late final _dart_PyUnicode_Substring _PyUnicode_Substring =
      _PyUnicode_Substring_ptr.asFunction<_dart_PyUnicode_Substring>();

  ffi.Pointer<ffi.Uint32> PyUnicode_AsUCS4(
    ffi.Pointer<PyObject> unicode,
    ffi.Pointer<ffi.Uint32> buffer,
    int buflen,
    int copy_null,
  ) {
    return _PyUnicode_AsUCS4(
      unicode,
      buffer,
      buflen,
      copy_null,
    );
  }

  late final _PyUnicode_AsUCS4_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_AsUCS4>>('PyUnicode_AsUCS4');
  late final _dart_PyUnicode_AsUCS4 _PyUnicode_AsUCS4 =
      _PyUnicode_AsUCS4_ptr.asFunction<_dart_PyUnicode_AsUCS4>();

  ffi.Pointer<ffi.Uint32> PyUnicode_AsUCS4Copy(
    ffi.Pointer<PyObject> unicode,
  ) {
    return _PyUnicode_AsUCS4Copy(
      unicode,
    );
  }

  late final _PyUnicode_AsUCS4Copy_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_AsUCS4Copy>>(
          'PyUnicode_AsUCS4Copy');
  late final _dart_PyUnicode_AsUCS4Copy _PyUnicode_AsUCS4Copy =
      _PyUnicode_AsUCS4Copy_ptr.asFunction<_dart_PyUnicode_AsUCS4Copy>();

  int PyUnicode_GetLength(
    ffi.Pointer<PyObject> unicode,
  ) {
    return _PyUnicode_GetLength(
      unicode,
    );
  }

  late final _PyUnicode_GetLength_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_GetLength>>(
          'PyUnicode_GetLength');
  late final _dart_PyUnicode_GetLength _PyUnicode_GetLength =
      _PyUnicode_GetLength_ptr.asFunction<_dart_PyUnicode_GetLength>();

  int PyUnicode_GetSize(
    ffi.Pointer<PyObject> unicode,
  ) {
    return _PyUnicode_GetSize(
      unicode,
    );
  }

  late final _PyUnicode_GetSize_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_GetSize>>('PyUnicode_GetSize');
  late final _dart_PyUnicode_GetSize _PyUnicode_GetSize =
      _PyUnicode_GetSize_ptr.asFunction<_dart_PyUnicode_GetSize>();

  int PyUnicode_ReadChar(
    ffi.Pointer<PyObject> unicode,
    int index,
  ) {
    return _PyUnicode_ReadChar(
      unicode,
      index,
    );
  }

  late final _PyUnicode_ReadChar_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_ReadChar>>('PyUnicode_ReadChar');
  late final _dart_PyUnicode_ReadChar _PyUnicode_ReadChar =
      _PyUnicode_ReadChar_ptr.asFunction<_dart_PyUnicode_ReadChar>();

  int PyUnicode_WriteChar(
    ffi.Pointer<PyObject> unicode,
    int index,
    int character,
  ) {
    return _PyUnicode_WriteChar(
      unicode,
      index,
      character,
    );
  }

  late final _PyUnicode_WriteChar_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_WriteChar>>(
          'PyUnicode_WriteChar');
  late final _dart_PyUnicode_WriteChar _PyUnicode_WriteChar =
      _PyUnicode_WriteChar_ptr.asFunction<_dart_PyUnicode_WriteChar>();

  int PyUnicode_Resize(
    ffi.Pointer<ffi.Pointer<PyObject>> unicode,
    int length,
  ) {
    return _PyUnicode_Resize(
      unicode,
      length,
    );
  }

  late final _PyUnicode_Resize_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_Resize>>('PyUnicode_Resize');
  late final _dart_PyUnicode_Resize _PyUnicode_Resize =
      _PyUnicode_Resize_ptr.asFunction<_dart_PyUnicode_Resize>();

  ffi.Pointer<PyObject> PyUnicode_FromEncodedObject(
    ffi.Pointer<PyObject> obj,
    ffi.Pointer<ffi.Int8> encoding,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyUnicode_FromEncodedObject(
      obj,
      encoding,
      errors,
    );
  }

  late final _PyUnicode_FromEncodedObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_FromEncodedObject>>(
          'PyUnicode_FromEncodedObject');
  late final _dart_PyUnicode_FromEncodedObject _PyUnicode_FromEncodedObject =
      _PyUnicode_FromEncodedObject_ptr.asFunction<
          _dart_PyUnicode_FromEncodedObject>();

  ffi.Pointer<PyObject> PyUnicode_FromObject(
    ffi.Pointer<PyObject> obj,
  ) {
    return _PyUnicode_FromObject(
      obj,
    );
  }

  late final _PyUnicode_FromObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_FromObject>>(
          'PyUnicode_FromObject');
  late final _dart_PyUnicode_FromObject _PyUnicode_FromObject =
      _PyUnicode_FromObject_ptr.asFunction<_dart_PyUnicode_FromObject>();

  ffi.Pointer<PyObject> PyUnicode_FromFormatV(
    ffi.Pointer<ffi.Int8> format,
    ffi.Pointer<__va_list_tag> vargs,
  ) {
    return _PyUnicode_FromFormatV(
      format,
      vargs,
    );
  }

  late final _PyUnicode_FromFormatV_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_FromFormatV>>(
          'PyUnicode_FromFormatV');
  late final _dart_PyUnicode_FromFormatV _PyUnicode_FromFormatV =
      _PyUnicode_FromFormatV_ptr.asFunction<_dart_PyUnicode_FromFormatV>();

  ffi.Pointer<PyObject> PyUnicode_FromFormat(
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _PyUnicode_FromFormat(
      format,
    );
  }

  late final _PyUnicode_FromFormat_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_FromFormat>>(
          'PyUnicode_FromFormat');
  late final _dart_PyUnicode_FromFormat _PyUnicode_FromFormat =
      _PyUnicode_FromFormat_ptr.asFunction<_dart_PyUnicode_FromFormat>();

  void PyUnicode_InternInPlace(
    ffi.Pointer<ffi.Pointer<PyObject>> arg0,
  ) {
    return _PyUnicode_InternInPlace(
      arg0,
    );
  }

  late final _PyUnicode_InternInPlace_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_InternInPlace>>(
          'PyUnicode_InternInPlace');
  late final _dart_PyUnicode_InternInPlace _PyUnicode_InternInPlace =
      _PyUnicode_InternInPlace_ptr.asFunction<_dart_PyUnicode_InternInPlace>();

  void PyUnicode_InternImmortal(
    ffi.Pointer<ffi.Pointer<PyObject>> arg0,
  ) {
    return _PyUnicode_InternImmortal(
      arg0,
    );
  }

  late final _PyUnicode_InternImmortal_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_InternImmortal>>(
          'PyUnicode_InternImmortal');
  late final _dart_PyUnicode_InternImmortal _PyUnicode_InternImmortal =
      _PyUnicode_InternImmortal_ptr.asFunction<
          _dart_PyUnicode_InternImmortal>();

  ffi.Pointer<PyObject> PyUnicode_InternFromString(
    ffi.Pointer<ffi.Int8> u,
  ) {
    return _PyUnicode_InternFromString(
      u,
    );
  }

  late final _PyUnicode_InternFromString_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_InternFromString>>(
          'PyUnicode_InternFromString');
  late final _dart_PyUnicode_InternFromString _PyUnicode_InternFromString =
      _PyUnicode_InternFromString_ptr.asFunction<
          _dart_PyUnicode_InternFromString>();

  ffi.Pointer<PyObject> PyUnicode_FromWideChar(
    ffi.Pointer<ffi.Int32> w,
    int size,
  ) {
    return _PyUnicode_FromWideChar(
      w,
      size,
    );
  }

  late final _PyUnicode_FromWideChar_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_FromWideChar>>(
          'PyUnicode_FromWideChar');
  late final _dart_PyUnicode_FromWideChar _PyUnicode_FromWideChar =
      _PyUnicode_FromWideChar_ptr.asFunction<_dart_PyUnicode_FromWideChar>();

  int PyUnicode_AsWideChar(
    ffi.Pointer<PyObject> unicode,
    ffi.Pointer<ffi.Int32> w,
    int size,
  ) {
    return _PyUnicode_AsWideChar(
      unicode,
      w,
      size,
    );
  }

  late final _PyUnicode_AsWideChar_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_AsWideChar>>(
          'PyUnicode_AsWideChar');
  late final _dart_PyUnicode_AsWideChar _PyUnicode_AsWideChar =
      _PyUnicode_AsWideChar_ptr.asFunction<_dart_PyUnicode_AsWideChar>();

  ffi.Pointer<ffi.Int32> PyUnicode_AsWideCharString(
    ffi.Pointer<PyObject> unicode,
    ffi.Pointer<ffi.Int64> size,
  ) {
    return _PyUnicode_AsWideCharString(
      unicode,
      size,
    );
  }

  late final _PyUnicode_AsWideCharString_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_AsWideCharString>>(
          'PyUnicode_AsWideCharString');
  late final _dart_PyUnicode_AsWideCharString _PyUnicode_AsWideCharString =
      _PyUnicode_AsWideCharString_ptr.asFunction<
          _dart_PyUnicode_AsWideCharString>();

  ffi.Pointer<PyObject> PyUnicode_FromOrdinal(
    int ordinal,
  ) {
    return _PyUnicode_FromOrdinal(
      ordinal,
    );
  }

  late final _PyUnicode_FromOrdinal_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_FromOrdinal>>(
          'PyUnicode_FromOrdinal');
  late final _dart_PyUnicode_FromOrdinal _PyUnicode_FromOrdinal =
      _PyUnicode_FromOrdinal_ptr.asFunction<_dart_PyUnicode_FromOrdinal>();

  int PyUnicode_ClearFreeList() {
    return _PyUnicode_ClearFreeList();
  }

  late final _PyUnicode_ClearFreeList_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_ClearFreeList>>(
          'PyUnicode_ClearFreeList');
  late final _dart_PyUnicode_ClearFreeList _PyUnicode_ClearFreeList =
      _PyUnicode_ClearFreeList_ptr.asFunction<_dart_PyUnicode_ClearFreeList>();

  ffi.Pointer<ffi.Int8> PyUnicode_GetDefaultEncoding() {
    return _PyUnicode_GetDefaultEncoding();
  }

  late final _PyUnicode_GetDefaultEncoding_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_GetDefaultEncoding>>(
          'PyUnicode_GetDefaultEncoding');
  late final _dart_PyUnicode_GetDefaultEncoding _PyUnicode_GetDefaultEncoding =
      _PyUnicode_GetDefaultEncoding_ptr.asFunction<
          _dart_PyUnicode_GetDefaultEncoding>();

  ffi.Pointer<PyObject> PyUnicode_Decode(
    ffi.Pointer<ffi.Int8> s,
    int size,
    ffi.Pointer<ffi.Int8> encoding,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyUnicode_Decode(
      s,
      size,
      encoding,
      errors,
    );
  }

  late final _PyUnicode_Decode_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_Decode>>('PyUnicode_Decode');
  late final _dart_PyUnicode_Decode _PyUnicode_Decode =
      _PyUnicode_Decode_ptr.asFunction<_dart_PyUnicode_Decode>();

  ffi.Pointer<PyObject> PyUnicode_AsDecodedObject(
    ffi.Pointer<PyObject> unicode,
    ffi.Pointer<ffi.Int8> encoding,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyUnicode_AsDecodedObject(
      unicode,
      encoding,
      errors,
    );
  }

  late final _PyUnicode_AsDecodedObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_AsDecodedObject>>(
          'PyUnicode_AsDecodedObject');
  late final _dart_PyUnicode_AsDecodedObject _PyUnicode_AsDecodedObject =
      _PyUnicode_AsDecodedObject_ptr.asFunction<
          _dart_PyUnicode_AsDecodedObject>();

  ffi.Pointer<PyObject> PyUnicode_AsDecodedUnicode(
    ffi.Pointer<PyObject> unicode,
    ffi.Pointer<ffi.Int8> encoding,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyUnicode_AsDecodedUnicode(
      unicode,
      encoding,
      errors,
    );
  }

  late final _PyUnicode_AsDecodedUnicode_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_AsDecodedUnicode>>(
          'PyUnicode_AsDecodedUnicode');
  late final _dart_PyUnicode_AsDecodedUnicode _PyUnicode_AsDecodedUnicode =
      _PyUnicode_AsDecodedUnicode_ptr.asFunction<
          _dart_PyUnicode_AsDecodedUnicode>();

  ffi.Pointer<PyObject> PyUnicode_AsEncodedObject(
    ffi.Pointer<PyObject> unicode,
    ffi.Pointer<ffi.Int8> encoding,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyUnicode_AsEncodedObject(
      unicode,
      encoding,
      errors,
    );
  }

  late final _PyUnicode_AsEncodedObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_AsEncodedObject>>(
          'PyUnicode_AsEncodedObject');
  late final _dart_PyUnicode_AsEncodedObject _PyUnicode_AsEncodedObject =
      _PyUnicode_AsEncodedObject_ptr.asFunction<
          _dart_PyUnicode_AsEncodedObject>();

  ffi.Pointer<PyObject> PyUnicode_AsEncodedString(
    ffi.Pointer<PyObject> unicode,
    ffi.Pointer<ffi.Int8> encoding,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyUnicode_AsEncodedString(
      unicode,
      encoding,
      errors,
    );
  }

  late final _PyUnicode_AsEncodedString_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_AsEncodedString>>(
          'PyUnicode_AsEncodedString');
  late final _dart_PyUnicode_AsEncodedString _PyUnicode_AsEncodedString =
      _PyUnicode_AsEncodedString_ptr.asFunction<
          _dart_PyUnicode_AsEncodedString>();

  ffi.Pointer<PyObject> PyUnicode_AsEncodedUnicode(
    ffi.Pointer<PyObject> unicode,
    ffi.Pointer<ffi.Int8> encoding,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyUnicode_AsEncodedUnicode(
      unicode,
      encoding,
      errors,
    );
  }

  late final _PyUnicode_AsEncodedUnicode_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_AsEncodedUnicode>>(
          'PyUnicode_AsEncodedUnicode');
  late final _dart_PyUnicode_AsEncodedUnicode _PyUnicode_AsEncodedUnicode =
      _PyUnicode_AsEncodedUnicode_ptr.asFunction<
          _dart_PyUnicode_AsEncodedUnicode>();

  ffi.Pointer<PyObject> PyUnicode_BuildEncodingMap(
    ffi.Pointer<PyObject> string,
  ) {
    return _PyUnicode_BuildEncodingMap(
      string,
    );
  }

  late final _PyUnicode_BuildEncodingMap_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_BuildEncodingMap>>(
          'PyUnicode_BuildEncodingMap');
  late final _dart_PyUnicode_BuildEncodingMap _PyUnicode_BuildEncodingMap =
      _PyUnicode_BuildEncodingMap_ptr.asFunction<
          _dart_PyUnicode_BuildEncodingMap>();

  ffi.Pointer<PyObject> PyUnicode_DecodeUTF7(
    ffi.Pointer<ffi.Int8> string,
    int length,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyUnicode_DecodeUTF7(
      string,
      length,
      errors,
    );
  }

  late final _PyUnicode_DecodeUTF7_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_DecodeUTF7>>(
          'PyUnicode_DecodeUTF7');
  late final _dart_PyUnicode_DecodeUTF7 _PyUnicode_DecodeUTF7 =
      _PyUnicode_DecodeUTF7_ptr.asFunction<_dart_PyUnicode_DecodeUTF7>();

  ffi.Pointer<PyObject> PyUnicode_DecodeUTF7Stateful(
    ffi.Pointer<ffi.Int8> string,
    int length,
    ffi.Pointer<ffi.Int8> errors,
    ffi.Pointer<ffi.Int64> consumed,
  ) {
    return _PyUnicode_DecodeUTF7Stateful(
      string,
      length,
      errors,
      consumed,
    );
  }

  late final _PyUnicode_DecodeUTF7Stateful_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_DecodeUTF7Stateful>>(
          'PyUnicode_DecodeUTF7Stateful');
  late final _dart_PyUnicode_DecodeUTF7Stateful _PyUnicode_DecodeUTF7Stateful =
      _PyUnicode_DecodeUTF7Stateful_ptr.asFunction<
          _dart_PyUnicode_DecodeUTF7Stateful>();

  ffi.Pointer<PyObject> PyUnicode_DecodeUTF8(
    ffi.Pointer<ffi.Int8> string,
    int length,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyUnicode_DecodeUTF8(
      string,
      length,
      errors,
    );
  }

  late final _PyUnicode_DecodeUTF8_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_DecodeUTF8>>(
          'PyUnicode_DecodeUTF8');
  late final _dart_PyUnicode_DecodeUTF8 _PyUnicode_DecodeUTF8 =
      _PyUnicode_DecodeUTF8_ptr.asFunction<_dart_PyUnicode_DecodeUTF8>();

  ffi.Pointer<PyObject> PyUnicode_DecodeUTF8Stateful(
    ffi.Pointer<ffi.Int8> string,
    int length,
    ffi.Pointer<ffi.Int8> errors,
    ffi.Pointer<ffi.Int64> consumed,
  ) {
    return _PyUnicode_DecodeUTF8Stateful(
      string,
      length,
      errors,
      consumed,
    );
  }

  late final _PyUnicode_DecodeUTF8Stateful_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_DecodeUTF8Stateful>>(
          'PyUnicode_DecodeUTF8Stateful');
  late final _dart_PyUnicode_DecodeUTF8Stateful _PyUnicode_DecodeUTF8Stateful =
      _PyUnicode_DecodeUTF8Stateful_ptr.asFunction<
          _dart_PyUnicode_DecodeUTF8Stateful>();

  ffi.Pointer<PyObject> PyUnicode_AsUTF8String(
    ffi.Pointer<PyObject> unicode,
  ) {
    return _PyUnicode_AsUTF8String(
      unicode,
    );
  }

  late final _PyUnicode_AsUTF8String_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_AsUTF8String>>(
          'PyUnicode_AsUTF8String');
  late final _dart_PyUnicode_AsUTF8String _PyUnicode_AsUTF8String =
      _PyUnicode_AsUTF8String_ptr.asFunction<_dart_PyUnicode_AsUTF8String>();

  ffi.Pointer<PyObject> PyUnicode_DecodeUTF32(
    ffi.Pointer<ffi.Int8> string,
    int length,
    ffi.Pointer<ffi.Int8> errors,
    ffi.Pointer<ffi.Int32> byteorder,
  ) {
    return _PyUnicode_DecodeUTF32(
      string,
      length,
      errors,
      byteorder,
    );
  }

  late final _PyUnicode_DecodeUTF32_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_DecodeUTF32>>(
          'PyUnicode_DecodeUTF32');
  late final _dart_PyUnicode_DecodeUTF32 _PyUnicode_DecodeUTF32 =
      _PyUnicode_DecodeUTF32_ptr.asFunction<_dart_PyUnicode_DecodeUTF32>();

  ffi.Pointer<PyObject> PyUnicode_DecodeUTF32Stateful(
    ffi.Pointer<ffi.Int8> string,
    int length,
    ffi.Pointer<ffi.Int8> errors,
    ffi.Pointer<ffi.Int32> byteorder,
    ffi.Pointer<ffi.Int64> consumed,
  ) {
    return _PyUnicode_DecodeUTF32Stateful(
      string,
      length,
      errors,
      byteorder,
      consumed,
    );
  }

  late final _PyUnicode_DecodeUTF32Stateful_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_DecodeUTF32Stateful>>(
          'PyUnicode_DecodeUTF32Stateful');
  late final _dart_PyUnicode_DecodeUTF32Stateful
      _PyUnicode_DecodeUTF32Stateful = _PyUnicode_DecodeUTF32Stateful_ptr
          .asFunction<_dart_PyUnicode_DecodeUTF32Stateful>();

  ffi.Pointer<PyObject> PyUnicode_AsUTF32String(
    ffi.Pointer<PyObject> unicode,
  ) {
    return _PyUnicode_AsUTF32String(
      unicode,
    );
  }

  late final _PyUnicode_AsUTF32String_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_AsUTF32String>>(
          'PyUnicode_AsUTF32String');
  late final _dart_PyUnicode_AsUTF32String _PyUnicode_AsUTF32String =
      _PyUnicode_AsUTF32String_ptr.asFunction<_dart_PyUnicode_AsUTF32String>();

  ffi.Pointer<PyObject> PyUnicode_DecodeUTF16(
    ffi.Pointer<ffi.Int8> string,
    int length,
    ffi.Pointer<ffi.Int8> errors,
    ffi.Pointer<ffi.Int32> byteorder,
  ) {
    return _PyUnicode_DecodeUTF16(
      string,
      length,
      errors,
      byteorder,
    );
  }

  late final _PyUnicode_DecodeUTF16_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_DecodeUTF16>>(
          'PyUnicode_DecodeUTF16');
  late final _dart_PyUnicode_DecodeUTF16 _PyUnicode_DecodeUTF16 =
      _PyUnicode_DecodeUTF16_ptr.asFunction<_dart_PyUnicode_DecodeUTF16>();

  ffi.Pointer<PyObject> PyUnicode_DecodeUTF16Stateful(
    ffi.Pointer<ffi.Int8> string,
    int length,
    ffi.Pointer<ffi.Int8> errors,
    ffi.Pointer<ffi.Int32> byteorder,
    ffi.Pointer<ffi.Int64> consumed,
  ) {
    return _PyUnicode_DecodeUTF16Stateful(
      string,
      length,
      errors,
      byteorder,
      consumed,
    );
  }

  late final _PyUnicode_DecodeUTF16Stateful_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_DecodeUTF16Stateful>>(
          'PyUnicode_DecodeUTF16Stateful');
  late final _dart_PyUnicode_DecodeUTF16Stateful
      _PyUnicode_DecodeUTF16Stateful = _PyUnicode_DecodeUTF16Stateful_ptr
          .asFunction<_dart_PyUnicode_DecodeUTF16Stateful>();

  ffi.Pointer<PyObject> PyUnicode_AsUTF16String(
    ffi.Pointer<PyObject> unicode,
  ) {
    return _PyUnicode_AsUTF16String(
      unicode,
    );
  }

  late final _PyUnicode_AsUTF16String_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_AsUTF16String>>(
          'PyUnicode_AsUTF16String');
  late final _dart_PyUnicode_AsUTF16String _PyUnicode_AsUTF16String =
      _PyUnicode_AsUTF16String_ptr.asFunction<_dart_PyUnicode_AsUTF16String>();

  ffi.Pointer<PyObject> PyUnicode_DecodeUnicodeEscape(
    ffi.Pointer<ffi.Int8> string,
    int length,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyUnicode_DecodeUnicodeEscape(
      string,
      length,
      errors,
    );
  }

  late final _PyUnicode_DecodeUnicodeEscape_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_DecodeUnicodeEscape>>(
          'PyUnicode_DecodeUnicodeEscape');
  late final _dart_PyUnicode_DecodeUnicodeEscape
      _PyUnicode_DecodeUnicodeEscape = _PyUnicode_DecodeUnicodeEscape_ptr
          .asFunction<_dart_PyUnicode_DecodeUnicodeEscape>();

  ffi.Pointer<PyObject> PyUnicode_AsUnicodeEscapeString(
    ffi.Pointer<PyObject> unicode,
  ) {
    return _PyUnicode_AsUnicodeEscapeString(
      unicode,
    );
  }

  late final _PyUnicode_AsUnicodeEscapeString_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_AsUnicodeEscapeString>>(
          'PyUnicode_AsUnicodeEscapeString');
  late final _dart_PyUnicode_AsUnicodeEscapeString
      _PyUnicode_AsUnicodeEscapeString = _PyUnicode_AsUnicodeEscapeString_ptr
          .asFunction<_dart_PyUnicode_AsUnicodeEscapeString>();

  ffi.Pointer<PyObject> PyUnicode_DecodeRawUnicodeEscape(
    ffi.Pointer<ffi.Int8> string,
    int length,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyUnicode_DecodeRawUnicodeEscape(
      string,
      length,
      errors,
    );
  }

  late final _PyUnicode_DecodeRawUnicodeEscape_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_DecodeRawUnicodeEscape>>(
          'PyUnicode_DecodeRawUnicodeEscape');
  late final _dart_PyUnicode_DecodeRawUnicodeEscape
      _PyUnicode_DecodeRawUnicodeEscape = _PyUnicode_DecodeRawUnicodeEscape_ptr
          .asFunction<_dart_PyUnicode_DecodeRawUnicodeEscape>();

  ffi.Pointer<PyObject> PyUnicode_AsRawUnicodeEscapeString(
    ffi.Pointer<PyObject> unicode,
  ) {
    return _PyUnicode_AsRawUnicodeEscapeString(
      unicode,
    );
  }

  late final _PyUnicode_AsRawUnicodeEscapeString_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_AsRawUnicodeEscapeString>>(
          'PyUnicode_AsRawUnicodeEscapeString');
  late final _dart_PyUnicode_AsRawUnicodeEscapeString
      _PyUnicode_AsRawUnicodeEscapeString =
      _PyUnicode_AsRawUnicodeEscapeString_ptr.asFunction<
          _dart_PyUnicode_AsRawUnicodeEscapeString>();

  ffi.Pointer<PyObject> PyUnicode_DecodeLatin1(
    ffi.Pointer<ffi.Int8> string,
    int length,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyUnicode_DecodeLatin1(
      string,
      length,
      errors,
    );
  }

  late final _PyUnicode_DecodeLatin1_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_DecodeLatin1>>(
          'PyUnicode_DecodeLatin1');
  late final _dart_PyUnicode_DecodeLatin1 _PyUnicode_DecodeLatin1 =
      _PyUnicode_DecodeLatin1_ptr.asFunction<_dart_PyUnicode_DecodeLatin1>();

  ffi.Pointer<PyObject> PyUnicode_AsLatin1String(
    ffi.Pointer<PyObject> unicode,
  ) {
    return _PyUnicode_AsLatin1String(
      unicode,
    );
  }

  late final _PyUnicode_AsLatin1String_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_AsLatin1String>>(
          'PyUnicode_AsLatin1String');
  late final _dart_PyUnicode_AsLatin1String _PyUnicode_AsLatin1String =
      _PyUnicode_AsLatin1String_ptr.asFunction<
          _dart_PyUnicode_AsLatin1String>();

  ffi.Pointer<PyObject> PyUnicode_DecodeASCII(
    ffi.Pointer<ffi.Int8> string,
    int length,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyUnicode_DecodeASCII(
      string,
      length,
      errors,
    );
  }

  late final _PyUnicode_DecodeASCII_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_DecodeASCII>>(
          'PyUnicode_DecodeASCII');
  late final _dart_PyUnicode_DecodeASCII _PyUnicode_DecodeASCII =
      _PyUnicode_DecodeASCII_ptr.asFunction<_dart_PyUnicode_DecodeASCII>();

  ffi.Pointer<PyObject> PyUnicode_AsASCIIString(
    ffi.Pointer<PyObject> unicode,
  ) {
    return _PyUnicode_AsASCIIString(
      unicode,
    );
  }

  late final _PyUnicode_AsASCIIString_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_AsASCIIString>>(
          'PyUnicode_AsASCIIString');
  late final _dart_PyUnicode_AsASCIIString _PyUnicode_AsASCIIString =
      _PyUnicode_AsASCIIString_ptr.asFunction<_dart_PyUnicode_AsASCIIString>();

  ffi.Pointer<PyObject> PyUnicode_DecodeCharmap(
    ffi.Pointer<ffi.Int8> string,
    int length,
    ffi.Pointer<PyObject> mapping,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyUnicode_DecodeCharmap(
      string,
      length,
      mapping,
      errors,
    );
  }

  late final _PyUnicode_DecodeCharmap_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_DecodeCharmap>>(
          'PyUnicode_DecodeCharmap');
  late final _dart_PyUnicode_DecodeCharmap _PyUnicode_DecodeCharmap =
      _PyUnicode_DecodeCharmap_ptr.asFunction<_dart_PyUnicode_DecodeCharmap>();

  ffi.Pointer<PyObject> PyUnicode_AsCharmapString(
    ffi.Pointer<PyObject> unicode,
    ffi.Pointer<PyObject> mapping,
  ) {
    return _PyUnicode_AsCharmapString(
      unicode,
      mapping,
    );
  }

  late final _PyUnicode_AsCharmapString_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_AsCharmapString>>(
          'PyUnicode_AsCharmapString');
  late final _dart_PyUnicode_AsCharmapString _PyUnicode_AsCharmapString =
      _PyUnicode_AsCharmapString_ptr.asFunction<
          _dart_PyUnicode_AsCharmapString>();

  ffi.Pointer<PyObject> PyUnicode_DecodeLocaleAndSize(
    ffi.Pointer<ffi.Int8> str,
    int len,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyUnicode_DecodeLocaleAndSize(
      str,
      len,
      errors,
    );
  }

  late final _PyUnicode_DecodeLocaleAndSize_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_DecodeLocaleAndSize>>(
          'PyUnicode_DecodeLocaleAndSize');
  late final _dart_PyUnicode_DecodeLocaleAndSize
      _PyUnicode_DecodeLocaleAndSize = _PyUnicode_DecodeLocaleAndSize_ptr
          .asFunction<_dart_PyUnicode_DecodeLocaleAndSize>();

  ffi.Pointer<PyObject> PyUnicode_DecodeLocale(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyUnicode_DecodeLocale(
      str,
      errors,
    );
  }

  late final _PyUnicode_DecodeLocale_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_DecodeLocale>>(
          'PyUnicode_DecodeLocale');
  late final _dart_PyUnicode_DecodeLocale _PyUnicode_DecodeLocale =
      _PyUnicode_DecodeLocale_ptr.asFunction<_dart_PyUnicode_DecodeLocale>();

  ffi.Pointer<PyObject> PyUnicode_EncodeLocale(
    ffi.Pointer<PyObject> unicode,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyUnicode_EncodeLocale(
      unicode,
      errors,
    );
  }

  late final _PyUnicode_EncodeLocale_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_EncodeLocale>>(
          'PyUnicode_EncodeLocale');
  late final _dart_PyUnicode_EncodeLocale _PyUnicode_EncodeLocale =
      _PyUnicode_EncodeLocale_ptr.asFunction<_dart_PyUnicode_EncodeLocale>();

  int PyUnicode_FSConverter(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _PyUnicode_FSConverter(
      arg0,
      arg1,
    );
  }

  late final _PyUnicode_FSConverter_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_FSConverter>>(
          'PyUnicode_FSConverter');
  late final _dart_PyUnicode_FSConverter _PyUnicode_FSConverter =
      _PyUnicode_FSConverter_ptr.asFunction<_dart_PyUnicode_FSConverter>();

  int PyUnicode_FSDecoder(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _PyUnicode_FSDecoder(
      arg0,
      arg1,
    );
  }

  late final _PyUnicode_FSDecoder_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_FSDecoder>>(
          'PyUnicode_FSDecoder');
  late final _dart_PyUnicode_FSDecoder _PyUnicode_FSDecoder =
      _PyUnicode_FSDecoder_ptr.asFunction<_dart_PyUnicode_FSDecoder>();

  ffi.Pointer<PyObject> PyUnicode_DecodeFSDefault(
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _PyUnicode_DecodeFSDefault(
      s,
    );
  }

  late final _PyUnicode_DecodeFSDefault_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_DecodeFSDefault>>(
          'PyUnicode_DecodeFSDefault');
  late final _dart_PyUnicode_DecodeFSDefault _PyUnicode_DecodeFSDefault =
      _PyUnicode_DecodeFSDefault_ptr.asFunction<
          _dart_PyUnicode_DecodeFSDefault>();

  ffi.Pointer<PyObject> PyUnicode_DecodeFSDefaultAndSize(
    ffi.Pointer<ffi.Int8> s,
    int size,
  ) {
    return _PyUnicode_DecodeFSDefaultAndSize(
      s,
      size,
    );
  }

  late final _PyUnicode_DecodeFSDefaultAndSize_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_DecodeFSDefaultAndSize>>(
          'PyUnicode_DecodeFSDefaultAndSize');
  late final _dart_PyUnicode_DecodeFSDefaultAndSize
      _PyUnicode_DecodeFSDefaultAndSize = _PyUnicode_DecodeFSDefaultAndSize_ptr
          .asFunction<_dart_PyUnicode_DecodeFSDefaultAndSize>();

  ffi.Pointer<PyObject> PyUnicode_EncodeFSDefault(
    ffi.Pointer<PyObject> unicode,
  ) {
    return _PyUnicode_EncodeFSDefault(
      unicode,
    );
  }

  late final _PyUnicode_EncodeFSDefault_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_EncodeFSDefault>>(
          'PyUnicode_EncodeFSDefault');
  late final _dart_PyUnicode_EncodeFSDefault _PyUnicode_EncodeFSDefault =
      _PyUnicode_EncodeFSDefault_ptr.asFunction<
          _dart_PyUnicode_EncodeFSDefault>();

  ffi.Pointer<PyObject> PyUnicode_Concat(
    ffi.Pointer<PyObject> left,
    ffi.Pointer<PyObject> right,
  ) {
    return _PyUnicode_Concat(
      left,
      right,
    );
  }

  late final _PyUnicode_Concat_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_Concat>>('PyUnicode_Concat');
  late final _dart_PyUnicode_Concat _PyUnicode_Concat =
      _PyUnicode_Concat_ptr.asFunction<_dart_PyUnicode_Concat>();

  void PyUnicode_Append(
    ffi.Pointer<ffi.Pointer<PyObject>> pleft,
    ffi.Pointer<PyObject> right,
  ) {
    return _PyUnicode_Append(
      pleft,
      right,
    );
  }

  late final _PyUnicode_Append_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_Append>>('PyUnicode_Append');
  late final _dart_PyUnicode_Append _PyUnicode_Append =
      _PyUnicode_Append_ptr.asFunction<_dart_PyUnicode_Append>();

  void PyUnicode_AppendAndDel(
    ffi.Pointer<ffi.Pointer<PyObject>> pleft,
    ffi.Pointer<PyObject> right,
  ) {
    return _PyUnicode_AppendAndDel(
      pleft,
      right,
    );
  }

  late final _PyUnicode_AppendAndDel_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_AppendAndDel>>(
          'PyUnicode_AppendAndDel');
  late final _dart_PyUnicode_AppendAndDel _PyUnicode_AppendAndDel =
      _PyUnicode_AppendAndDel_ptr.asFunction<_dart_PyUnicode_AppendAndDel>();

  ffi.Pointer<PyObject> PyUnicode_Split(
    ffi.Pointer<PyObject> s,
    ffi.Pointer<PyObject> sep,
    int maxsplit,
  ) {
    return _PyUnicode_Split(
      s,
      sep,
      maxsplit,
    );
  }

  late final _PyUnicode_Split_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_Split>>('PyUnicode_Split');
  late final _dart_PyUnicode_Split _PyUnicode_Split =
      _PyUnicode_Split_ptr.asFunction<_dart_PyUnicode_Split>();

  ffi.Pointer<PyObject> PyUnicode_Splitlines(
    ffi.Pointer<PyObject> s,
    int keepends,
  ) {
    return _PyUnicode_Splitlines(
      s,
      keepends,
    );
  }

  late final _PyUnicode_Splitlines_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_Splitlines>>(
          'PyUnicode_Splitlines');
  late final _dart_PyUnicode_Splitlines _PyUnicode_Splitlines =
      _PyUnicode_Splitlines_ptr.asFunction<_dart_PyUnicode_Splitlines>();

  ffi.Pointer<PyObject> PyUnicode_Partition(
    ffi.Pointer<PyObject> s,
    ffi.Pointer<PyObject> sep,
  ) {
    return _PyUnicode_Partition(
      s,
      sep,
    );
  }

  late final _PyUnicode_Partition_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_Partition>>(
          'PyUnicode_Partition');
  late final _dart_PyUnicode_Partition _PyUnicode_Partition =
      _PyUnicode_Partition_ptr.asFunction<_dart_PyUnicode_Partition>();

  ffi.Pointer<PyObject> PyUnicode_RPartition(
    ffi.Pointer<PyObject> s,
    ffi.Pointer<PyObject> sep,
  ) {
    return _PyUnicode_RPartition(
      s,
      sep,
    );
  }

  late final _PyUnicode_RPartition_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_RPartition>>(
          'PyUnicode_RPartition');
  late final _dart_PyUnicode_RPartition _PyUnicode_RPartition =
      _PyUnicode_RPartition_ptr.asFunction<_dart_PyUnicode_RPartition>();

  ffi.Pointer<PyObject> PyUnicode_RSplit(
    ffi.Pointer<PyObject> s,
    ffi.Pointer<PyObject> sep,
    int maxsplit,
  ) {
    return _PyUnicode_RSplit(
      s,
      sep,
      maxsplit,
    );
  }

  late final _PyUnicode_RSplit_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_RSplit>>('PyUnicode_RSplit');
  late final _dart_PyUnicode_RSplit _PyUnicode_RSplit =
      _PyUnicode_RSplit_ptr.asFunction<_dart_PyUnicode_RSplit>();

  ffi.Pointer<PyObject> PyUnicode_Translate(
    ffi.Pointer<PyObject> str,
    ffi.Pointer<PyObject> table,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyUnicode_Translate(
      str,
      table,
      errors,
    );
  }

  late final _PyUnicode_Translate_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_Translate>>(
          'PyUnicode_Translate');
  late final _dart_PyUnicode_Translate _PyUnicode_Translate =
      _PyUnicode_Translate_ptr.asFunction<_dart_PyUnicode_Translate>();

  ffi.Pointer<PyObject> PyUnicode_Join(
    ffi.Pointer<PyObject> separator,
    ffi.Pointer<PyObject> seq,
  ) {
    return _PyUnicode_Join(
      separator,
      seq,
    );
  }

  late final _PyUnicode_Join_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_Join>>('PyUnicode_Join');
  late final _dart_PyUnicode_Join _PyUnicode_Join =
      _PyUnicode_Join_ptr.asFunction<_dart_PyUnicode_Join>();

  int PyUnicode_Tailmatch(
    ffi.Pointer<PyObject> str,
    ffi.Pointer<PyObject> substr,
    int start,
    int end,
    int direction,
  ) {
    return _PyUnicode_Tailmatch(
      str,
      substr,
      start,
      end,
      direction,
    );
  }

  late final _PyUnicode_Tailmatch_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_Tailmatch>>(
          'PyUnicode_Tailmatch');
  late final _dart_PyUnicode_Tailmatch _PyUnicode_Tailmatch =
      _PyUnicode_Tailmatch_ptr.asFunction<_dart_PyUnicode_Tailmatch>();

  int PyUnicode_Find(
    ffi.Pointer<PyObject> str,
    ffi.Pointer<PyObject> substr,
    int start,
    int end,
    int direction,
  ) {
    return _PyUnicode_Find(
      str,
      substr,
      start,
      end,
      direction,
    );
  }

  late final _PyUnicode_Find_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_Find>>('PyUnicode_Find');
  late final _dart_PyUnicode_Find _PyUnicode_Find =
      _PyUnicode_Find_ptr.asFunction<_dart_PyUnicode_Find>();

  int PyUnicode_FindChar(
    ffi.Pointer<PyObject> str,
    int ch,
    int start,
    int end,
    int direction,
  ) {
    return _PyUnicode_FindChar(
      str,
      ch,
      start,
      end,
      direction,
    );
  }

  late final _PyUnicode_FindChar_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_FindChar>>('PyUnicode_FindChar');
  late final _dart_PyUnicode_FindChar _PyUnicode_FindChar =
      _PyUnicode_FindChar_ptr.asFunction<_dart_PyUnicode_FindChar>();

  int PyUnicode_Count(
    ffi.Pointer<PyObject> str,
    ffi.Pointer<PyObject> substr,
    int start,
    int end,
  ) {
    return _PyUnicode_Count(
      str,
      substr,
      start,
      end,
    );
  }

  late final _PyUnicode_Count_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_Count>>('PyUnicode_Count');
  late final _dart_PyUnicode_Count _PyUnicode_Count =
      _PyUnicode_Count_ptr.asFunction<_dart_PyUnicode_Count>();

  ffi.Pointer<PyObject> PyUnicode_Replace(
    ffi.Pointer<PyObject> str,
    ffi.Pointer<PyObject> substr,
    ffi.Pointer<PyObject> replstr,
    int maxcount,
  ) {
    return _PyUnicode_Replace(
      str,
      substr,
      replstr,
      maxcount,
    );
  }

  late final _PyUnicode_Replace_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_Replace>>('PyUnicode_Replace');
  late final _dart_PyUnicode_Replace _PyUnicode_Replace =
      _PyUnicode_Replace_ptr.asFunction<_dart_PyUnicode_Replace>();

  int PyUnicode_Compare(
    ffi.Pointer<PyObject> left,
    ffi.Pointer<PyObject> right,
  ) {
    return _PyUnicode_Compare(
      left,
      right,
    );
  }

  late final _PyUnicode_Compare_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_Compare>>('PyUnicode_Compare');
  late final _dart_PyUnicode_Compare _PyUnicode_Compare =
      _PyUnicode_Compare_ptr.asFunction<_dart_PyUnicode_Compare>();

  int PyUnicode_CompareWithASCIIString(
    ffi.Pointer<PyObject> left,
    ffi.Pointer<ffi.Int8> right,
  ) {
    return _PyUnicode_CompareWithASCIIString(
      left,
      right,
    );
  }

  late final _PyUnicode_CompareWithASCIIString_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_CompareWithASCIIString>>(
          'PyUnicode_CompareWithASCIIString');
  late final _dart_PyUnicode_CompareWithASCIIString
      _PyUnicode_CompareWithASCIIString = _PyUnicode_CompareWithASCIIString_ptr
          .asFunction<_dart_PyUnicode_CompareWithASCIIString>();

  ffi.Pointer<PyObject> PyUnicode_RichCompare(
    ffi.Pointer<PyObject> left,
    ffi.Pointer<PyObject> right,
    int op,
  ) {
    return _PyUnicode_RichCompare(
      left,
      right,
      op,
    );
  }

  late final _PyUnicode_RichCompare_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_RichCompare>>(
          'PyUnicode_RichCompare');
  late final _dart_PyUnicode_RichCompare _PyUnicode_RichCompare =
      _PyUnicode_RichCompare_ptr.asFunction<_dart_PyUnicode_RichCompare>();

  ffi.Pointer<PyObject> PyUnicode_Format(
    ffi.Pointer<PyObject> format,
    ffi.Pointer<PyObject> args,
  ) {
    return _PyUnicode_Format(
      format,
      args,
    );
  }

  late final _PyUnicode_Format_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_Format>>('PyUnicode_Format');
  late final _dart_PyUnicode_Format _PyUnicode_Format =
      _PyUnicode_Format_ptr.asFunction<_dart_PyUnicode_Format>();

  int PyUnicode_Contains(
    ffi.Pointer<PyObject> container,
    ffi.Pointer<PyObject> element,
  ) {
    return _PyUnicode_Contains(
      container,
      element,
    );
  }

  late final _PyUnicode_Contains_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_Contains>>('PyUnicode_Contains');
  late final _dart_PyUnicode_Contains _PyUnicode_Contains =
      _PyUnicode_Contains_ptr.asFunction<_dart_PyUnicode_Contains>();

  int PyUnicode_IsIdentifier(
    ffi.Pointer<PyObject> s,
  ) {
    return _PyUnicode_IsIdentifier(
      s,
    );
  }

  late final _PyUnicode_IsIdentifier_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicode_IsIdentifier>>(
          'PyUnicode_IsIdentifier');
  late final _dart_PyUnicode_IsIdentifier _PyUnicode_IsIdentifier =
      _PyUnicode_IsIdentifier_ptr.asFunction<_dart_PyUnicode_IsIdentifier>();

  late final ffi.Pointer<_typeobject> _PyLong_Type =
      _lookup<_typeobject>('PyLong_Type');

  _typeobject get PyLong_Type => _PyLong_Type.ref;

  ffi.Pointer<PyObject> PyLong_FromLong(
    int arg0,
  ) {
    return _PyLong_FromLong(
      arg0,
    );
  }

  late final _PyLong_FromLong_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_FromLong>>('PyLong_FromLong');
  late final _dart_PyLong_FromLong _PyLong_FromLong =
      _PyLong_FromLong_ptr.asFunction<_dart_PyLong_FromLong>();

  ffi.Pointer<PyObject> PyLong_FromUnsignedLong(
    int arg0,
  ) {
    return _PyLong_FromUnsignedLong(
      arg0,
    );
  }

  late final _PyLong_FromUnsignedLong_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_FromUnsignedLong>>(
          'PyLong_FromUnsignedLong');
  late final _dart_PyLong_FromUnsignedLong _PyLong_FromUnsignedLong =
      _PyLong_FromUnsignedLong_ptr.asFunction<_dart_PyLong_FromUnsignedLong>();

  ffi.Pointer<PyObject> PyLong_FromSize_t(
    int arg0,
  ) {
    return _PyLong_FromSize_t(
      arg0,
    );
  }

  late final _PyLong_FromSize_t_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_FromSize_t>>('PyLong_FromSize_t');
  late final _dart_PyLong_FromSize_t _PyLong_FromSize_t =
      _PyLong_FromSize_t_ptr.asFunction<_dart_PyLong_FromSize_t>();

  ffi.Pointer<PyObject> PyLong_FromSsize_t(
    int arg0,
  ) {
    return _PyLong_FromSsize_t(
      arg0,
    );
  }

  late final _PyLong_FromSsize_t_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_FromSsize_t>>('PyLong_FromSsize_t');
  late final _dart_PyLong_FromSsize_t _PyLong_FromSsize_t =
      _PyLong_FromSsize_t_ptr.asFunction<_dart_PyLong_FromSsize_t>();

  ffi.Pointer<PyObject> PyLong_FromDouble(
    double arg0,
  ) {
    return _PyLong_FromDouble(
      arg0,
    );
  }

  late final _PyLong_FromDouble_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_FromDouble>>('PyLong_FromDouble');
  late final _dart_PyLong_FromDouble _PyLong_FromDouble =
      _PyLong_FromDouble_ptr.asFunction<_dart_PyLong_FromDouble>();

  int PyLong_AsLong(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyLong_AsLong(
      arg0,
    );
  }

  late final _PyLong_AsLong_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_AsLong>>('PyLong_AsLong');
  late final _dart_PyLong_AsLong _PyLong_AsLong =
      _PyLong_AsLong_ptr.asFunction<_dart_PyLong_AsLong>();

  int PyLong_AsLongAndOverflow(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    return _PyLong_AsLongAndOverflow(
      arg0,
      arg1,
    );
  }

  late final _PyLong_AsLongAndOverflow_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_AsLongAndOverflow>>(
          'PyLong_AsLongAndOverflow');
  late final _dart_PyLong_AsLongAndOverflow _PyLong_AsLongAndOverflow =
      _PyLong_AsLongAndOverflow_ptr.asFunction<
          _dart_PyLong_AsLongAndOverflow>();

  int PyLong_AsSsize_t(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyLong_AsSsize_t(
      arg0,
    );
  }

  late final _PyLong_AsSsize_t_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_AsSsize_t>>('PyLong_AsSsize_t');
  late final _dart_PyLong_AsSsize_t _PyLong_AsSsize_t =
      _PyLong_AsSsize_t_ptr.asFunction<_dart_PyLong_AsSsize_t>();

  int PyLong_AsSize_t(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyLong_AsSize_t(
      arg0,
    );
  }

  late final _PyLong_AsSize_t_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_AsSize_t>>('PyLong_AsSize_t');
  late final _dart_PyLong_AsSize_t _PyLong_AsSize_t =
      _PyLong_AsSize_t_ptr.asFunction<_dart_PyLong_AsSize_t>();

  int PyLong_AsUnsignedLong(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyLong_AsUnsignedLong(
      arg0,
    );
  }

  late final _PyLong_AsUnsignedLong_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_AsUnsignedLong>>(
          'PyLong_AsUnsignedLong');
  late final _dart_PyLong_AsUnsignedLong _PyLong_AsUnsignedLong =
      _PyLong_AsUnsignedLong_ptr.asFunction<_dart_PyLong_AsUnsignedLong>();

  int PyLong_AsUnsignedLongMask(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyLong_AsUnsignedLongMask(
      arg0,
    );
  }

  late final _PyLong_AsUnsignedLongMask_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_AsUnsignedLongMask>>(
          'PyLong_AsUnsignedLongMask');
  late final _dart_PyLong_AsUnsignedLongMask _PyLong_AsUnsignedLongMask =
      _PyLong_AsUnsignedLongMask_ptr.asFunction<
          _dart_PyLong_AsUnsignedLongMask>();

  int PyLong_AsInt(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyLong_AsInt(
      arg0,
    );
  }

  late final _PyLong_AsInt_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_AsInt>>('_PyLong_AsInt');
  late final _dart_PyLong_AsInt _PyLong_AsInt =
      _PyLong_AsInt_ptr.asFunction<_dart_PyLong_AsInt>();

  ffi.Pointer<PyObject> PyLong_GetInfo() {
    return _PyLong_GetInfo();
  }

  late final _PyLong_GetInfo_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_GetInfo>>('PyLong_GetInfo');
  late final _dart_PyLong_GetInfo _PyLong_GetInfo =
      _PyLong_GetInfo_ptr.asFunction<_dart_PyLong_GetInfo>();

  int PyLong_UnsignedShort_Converter(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _PyLong_UnsignedShort_Converter(
      arg0,
      arg1,
    );
  }

  late final _PyLong_UnsignedShort_Converter_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_UnsignedShort_Converter>>(
          '_PyLong_UnsignedShort_Converter');
  late final _dart_PyLong_UnsignedShort_Converter
      _PyLong_UnsignedShort_Converter = _PyLong_UnsignedShort_Converter_ptr
          .asFunction<_dart_PyLong_UnsignedShort_Converter>();

  int PyLong_UnsignedInt_Converter(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _PyLong_UnsignedInt_Converter(
      arg0,
      arg1,
    );
  }

  late final _PyLong_UnsignedInt_Converter_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_UnsignedInt_Converter>>(
          '_PyLong_UnsignedInt_Converter');
  late final _dart_PyLong_UnsignedInt_Converter _PyLong_UnsignedInt_Converter =
      _PyLong_UnsignedInt_Converter_ptr.asFunction<
          _dart_PyLong_UnsignedInt_Converter>();

  int PyLong_UnsignedLong_Converter(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _PyLong_UnsignedLong_Converter(
      arg0,
      arg1,
    );
  }

  late final _PyLong_UnsignedLong_Converter_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_UnsignedLong_Converter>>(
          '_PyLong_UnsignedLong_Converter');
  late final _dart_PyLong_UnsignedLong_Converter
      _PyLong_UnsignedLong_Converter = _PyLong_UnsignedLong_Converter_ptr
          .asFunction<_dart_PyLong_UnsignedLong_Converter>();

  int PyLong_UnsignedLongLong_Converter(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _PyLong_UnsignedLongLong_Converter(
      arg0,
      arg1,
    );
  }

  late final _PyLong_UnsignedLongLong_Converter_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_UnsignedLongLong_Converter>>(
          '_PyLong_UnsignedLongLong_Converter');
  late final _dart_PyLong_UnsignedLongLong_Converter
      _PyLong_UnsignedLongLong_Converter =
      _PyLong_UnsignedLongLong_Converter_ptr.asFunction<
          _dart_PyLong_UnsignedLongLong_Converter>();

  int PyLong_Size_t_Converter(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _PyLong_Size_t_Converter(
      arg0,
      arg1,
    );
  }

  late final _PyLong_Size_t_Converter_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_Size_t_Converter>>(
          '_PyLong_Size_t_Converter');
  late final _dart_PyLong_Size_t_Converter _PyLong_Size_t_Converter =
      _PyLong_Size_t_Converter_ptr.asFunction<_dart_PyLong_Size_t_Converter>();

  late final ffi.Pointer<ffi.Pointer<ffi.Uint8>> _PyLong_DigitValue =
      _lookup<ffi.Pointer<ffi.Uint8>>('_PyLong_DigitValue');

  ffi.Pointer<ffi.Uint8> get PyLong_DigitValue => _PyLong_DigitValue.value;

  set PyLong_DigitValue(ffi.Pointer<ffi.Uint8> value) =>
      _PyLong_DigitValue.value = value;

  double PyLong_Frexp(
    ffi.Pointer<_longobject> a,
    ffi.Pointer<ffi.Int64> e,
  ) {
    return _PyLong_Frexp(
      a,
      e,
    );
  }

  late final _PyLong_Frexp_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_Frexp>>('_PyLong_Frexp');
  late final _dart_PyLong_Frexp _PyLong_Frexp =
      _PyLong_Frexp_ptr.asFunction<_dart_PyLong_Frexp>();

  double PyLong_AsDouble(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyLong_AsDouble(
      arg0,
    );
  }

  late final _PyLong_AsDouble_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_AsDouble>>('PyLong_AsDouble');
  late final _dart_PyLong_AsDouble _PyLong_AsDouble =
      _PyLong_AsDouble_ptr.asFunction<_dart_PyLong_AsDouble>();

  ffi.Pointer<PyObject> PyLong_FromVoidPtr(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _PyLong_FromVoidPtr(
      arg0,
    );
  }

  late final _PyLong_FromVoidPtr_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_FromVoidPtr>>('PyLong_FromVoidPtr');
  late final _dart_PyLong_FromVoidPtr _PyLong_FromVoidPtr =
      _PyLong_FromVoidPtr_ptr.asFunction<_dart_PyLong_FromVoidPtr>();

  ffi.Pointer<ffi.Void> PyLong_AsVoidPtr(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyLong_AsVoidPtr(
      arg0,
    );
  }

  late final _PyLong_AsVoidPtr_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_AsVoidPtr>>('PyLong_AsVoidPtr');
  late final _dart_PyLong_AsVoidPtr _PyLong_AsVoidPtr =
      _PyLong_AsVoidPtr_ptr.asFunction<_dart_PyLong_AsVoidPtr>();

  ffi.Pointer<PyObject> PyLong_FromLongLong(
    int arg0,
  ) {
    return _PyLong_FromLongLong(
      arg0,
    );
  }

  late final _PyLong_FromLongLong_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_FromLongLong>>(
          'PyLong_FromLongLong');
  late final _dart_PyLong_FromLongLong _PyLong_FromLongLong =
      _PyLong_FromLongLong_ptr.asFunction<_dart_PyLong_FromLongLong>();

  ffi.Pointer<PyObject> PyLong_FromUnsignedLongLong(
    int arg0,
  ) {
    return _PyLong_FromUnsignedLongLong(
      arg0,
    );
  }

  late final _PyLong_FromUnsignedLongLong_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_FromUnsignedLongLong>>(
          'PyLong_FromUnsignedLongLong');
  late final _dart_PyLong_FromUnsignedLongLong _PyLong_FromUnsignedLongLong =
      _PyLong_FromUnsignedLongLong_ptr.asFunction<
          _dart_PyLong_FromUnsignedLongLong>();

  int PyLong_AsLongLong(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyLong_AsLongLong(
      arg0,
    );
  }

  late final _PyLong_AsLongLong_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_AsLongLong>>('PyLong_AsLongLong');
  late final _dart_PyLong_AsLongLong _PyLong_AsLongLong =
      _PyLong_AsLongLong_ptr.asFunction<_dart_PyLong_AsLongLong>();

  int PyLong_AsUnsignedLongLong(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyLong_AsUnsignedLongLong(
      arg0,
    );
  }

  late final _PyLong_AsUnsignedLongLong_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_AsUnsignedLongLong>>(
          'PyLong_AsUnsignedLongLong');
  late final _dart_PyLong_AsUnsignedLongLong _PyLong_AsUnsignedLongLong =
      _PyLong_AsUnsignedLongLong_ptr.asFunction<
          _dart_PyLong_AsUnsignedLongLong>();

  int PyLong_AsUnsignedLongLongMask(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyLong_AsUnsignedLongLongMask(
      arg0,
    );
  }

  late final _PyLong_AsUnsignedLongLongMask_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_AsUnsignedLongLongMask>>(
          'PyLong_AsUnsignedLongLongMask');
  late final _dart_PyLong_AsUnsignedLongLongMask
      _PyLong_AsUnsignedLongLongMask = _PyLong_AsUnsignedLongLongMask_ptr
          .asFunction<_dart_PyLong_AsUnsignedLongLongMask>();

  int PyLong_AsLongLongAndOverflow(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    return _PyLong_AsLongLongAndOverflow(
      arg0,
      arg1,
    );
  }

  late final _PyLong_AsLongLongAndOverflow_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_AsLongLongAndOverflow>>(
          'PyLong_AsLongLongAndOverflow');
  late final _dart_PyLong_AsLongLongAndOverflow _PyLong_AsLongLongAndOverflow =
      _PyLong_AsLongLongAndOverflow_ptr.asFunction<
          _dart_PyLong_AsLongLongAndOverflow>();

  ffi.Pointer<PyObject> PyLong_FromString(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    int arg2,
  ) {
    return _PyLong_FromString(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyLong_FromString_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_FromString>>('PyLong_FromString');
  late final _dart_PyLong_FromString _PyLong_FromString =
      _PyLong_FromString_ptr.asFunction<_dart_PyLong_FromString>();

  ffi.Pointer<PyObject> PyLong_FromUnicode(
    ffi.Pointer<ffi.Int32> arg0,
    int arg1,
    int arg2,
  ) {
    return _PyLong_FromUnicode(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyLong_FromUnicode_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_FromUnicode>>('PyLong_FromUnicode');
  late final _dart_PyLong_FromUnicode _PyLong_FromUnicode =
      _PyLong_FromUnicode_ptr.asFunction<_dart_PyLong_FromUnicode>();

  ffi.Pointer<PyObject> PyLong_FromUnicodeObject(
    ffi.Pointer<PyObject> u,
    int base,
  ) {
    return _PyLong_FromUnicodeObject(
      u,
      base,
    );
  }

  late final _PyLong_FromUnicodeObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_FromUnicodeObject>>(
          'PyLong_FromUnicodeObject');
  late final _dart_PyLong_FromUnicodeObject _PyLong_FromUnicodeObject =
      _PyLong_FromUnicodeObject_ptr.asFunction<
          _dart_PyLong_FromUnicodeObject>();

  ffi.Pointer<PyObject> PyLong_FromBytes(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
  ) {
    return _PyLong_FromBytes(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyLong_FromBytes_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_FromBytes>>('_PyLong_FromBytes');
  late final _dart_PyLong_FromBytes _PyLong_FromBytes =
      _PyLong_FromBytes_ptr.asFunction<_dart_PyLong_FromBytes>();

  int PyLong_Sign(
    ffi.Pointer<PyObject> v,
  ) {
    return _PyLong_Sign(
      v,
    );
  }

  late final _PyLong_Sign_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_Sign>>('_PyLong_Sign');
  late final _dart_PyLong_Sign _PyLong_Sign =
      _PyLong_Sign_ptr.asFunction<_dart_PyLong_Sign>();

  int PyLong_NumBits(
    ffi.Pointer<PyObject> v,
  ) {
    return _PyLong_NumBits(
      v,
    );
  }

  late final _PyLong_NumBits_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_NumBits>>('_PyLong_NumBits');
  late final _dart_PyLong_NumBits _PyLong_NumBits =
      _PyLong_NumBits_ptr.asFunction<_dart_PyLong_NumBits>();

  ffi.Pointer<PyObject> PyLong_DivmodNear(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyLong_DivmodNear(
      arg0,
      arg1,
    );
  }

  late final _PyLong_DivmodNear_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_DivmodNear>>('_PyLong_DivmodNear');
  late final _dart_PyLong_DivmodNear _PyLong_DivmodNear =
      _PyLong_DivmodNear_ptr.asFunction<_dart_PyLong_DivmodNear>();

  ffi.Pointer<PyObject> PyLong_FromByteArray(
    ffi.Pointer<ffi.Uint8> bytes,
    int n,
    int little_endian,
    int is_signed,
  ) {
    return _PyLong_FromByteArray(
      bytes,
      n,
      little_endian,
      is_signed,
    );
  }

  late final _PyLong_FromByteArray_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_FromByteArray>>(
          '_PyLong_FromByteArray');
  late final _dart_PyLong_FromByteArray _PyLong_FromByteArray =
      _PyLong_FromByteArray_ptr.asFunction<_dart_PyLong_FromByteArray>();

  int PyLong_AsByteArray(
    ffi.Pointer<_longobject> v,
    ffi.Pointer<ffi.Uint8> bytes,
    int n,
    int little_endian,
    int is_signed,
  ) {
    return _PyLong_AsByteArray(
      v,
      bytes,
      n,
      little_endian,
      is_signed,
    );
  }

  late final _PyLong_AsByteArray_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_AsByteArray>>('_PyLong_AsByteArray');
  late final _dart_PyLong_AsByteArray _PyLong_AsByteArray =
      _PyLong_AsByteArray_ptr.asFunction<_dart_PyLong_AsByteArray>();

  ffi.Pointer<PyObject> PyLong_FromNbInt(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyLong_FromNbInt(
      arg0,
    );
  }

  late final _PyLong_FromNbInt_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_FromNbInt>>('_PyLong_FromNbInt');
  late final _dart_PyLong_FromNbInt _PyLong_FromNbInt =
      _PyLong_FromNbInt_ptr.asFunction<_dart_PyLong_FromNbInt>();

  ffi.Pointer<PyObject> PyLong_FromNbIndexOrNbInt(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyLong_FromNbIndexOrNbInt(
      arg0,
    );
  }

  late final _PyLong_FromNbIndexOrNbInt_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_FromNbIndexOrNbInt>>(
          '_PyLong_FromNbIndexOrNbInt');
  late final _dart_PyLong_FromNbIndexOrNbInt _PyLong_FromNbIndexOrNbInt =
      _PyLong_FromNbIndexOrNbInt_ptr.asFunction<
          _dart_PyLong_FromNbIndexOrNbInt>();

  ffi.Pointer<PyObject> PyLong_Format(
    ffi.Pointer<PyObject> obj,
    int base,
  ) {
    return _PyLong_Format(
      obj,
      base,
    );
  }

  late final _PyLong_Format_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_Format>>('_PyLong_Format');
  late final _dart_PyLong_Format _PyLong_Format =
      _PyLong_Format_ptr.asFunction<_dart_PyLong_Format>();

  int PyLong_FormatWriter(
    ffi.Pointer<_PyUnicodeWriter> writer,
    ffi.Pointer<PyObject> obj,
    int base,
    int alternate,
  ) {
    return _PyLong_FormatWriter(
      writer,
      obj,
      base,
      alternate,
    );
  }

  late final _PyLong_FormatWriter_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_FormatWriter>>(
          '_PyLong_FormatWriter');
  late final _dart_PyLong_FormatWriter _PyLong_FormatWriter =
      _PyLong_FormatWriter_ptr.asFunction<_dart_PyLong_FormatWriter>();

  ffi.Pointer<ffi.Int8> PyLong_FormatBytesWriter(
    ffi.Pointer<_PyBytesWriter> writer,
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<PyObject> obj,
    int base,
    int alternate,
  ) {
    return _PyLong_FormatBytesWriter(
      writer,
      str,
      obj,
      base,
      alternate,
    );
  }

  late final _PyLong_FormatBytesWriter_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_FormatBytesWriter>>(
          '_PyLong_FormatBytesWriter');
  late final _dart_PyLong_FormatBytesWriter _PyLong_FormatBytesWriter =
      _PyLong_FormatBytesWriter_ptr.asFunction<
          _dart_PyLong_FormatBytesWriter>();

  int PyLong_FormatAdvancedWriter(
    ffi.Pointer<_PyUnicodeWriter> writer,
    ffi.Pointer<PyObject> obj,
    ffi.Pointer<PyObject> format_spec,
    int start,
    int end,
  ) {
    return _PyLong_FormatAdvancedWriter(
      writer,
      obj,
      format_spec,
      start,
      end,
    );
  }

  late final _PyLong_FormatAdvancedWriter_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_FormatAdvancedWriter>>(
          '_PyLong_FormatAdvancedWriter');
  late final _dart_PyLong_FormatAdvancedWriter _PyLong_FormatAdvancedWriter =
      _PyLong_FormatAdvancedWriter_ptr.asFunction<
          _dart_PyLong_FormatAdvancedWriter>();

  int PyOS_strtoul(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    int arg2,
  ) {
    return _PyOS_strtoul(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyOS_strtoul_ptr =
      _lookup<ffi.NativeFunction<_c_PyOS_strtoul>>('PyOS_strtoul');
  late final _dart_PyOS_strtoul _PyOS_strtoul =
      _PyOS_strtoul_ptr.asFunction<_dart_PyOS_strtoul>();

  int PyOS_strtol(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    int arg2,
  ) {
    return _PyOS_strtol(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyOS_strtol_ptr =
      _lookup<ffi.NativeFunction<_c_PyOS_strtol>>('PyOS_strtol');
  late final _dart_PyOS_strtol _PyOS_strtol =
      _PyOS_strtol_ptr.asFunction<_dart_PyOS_strtol>();

  ffi.Pointer<PyObject> PyLong_GCD(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyLong_GCD(
      arg0,
      arg1,
    );
  }

  late final _PyLong_GCD_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_GCD>>('_PyLong_GCD');
  late final _dart_PyLong_GCD _PyLong_GCD =
      _PyLong_GCD_ptr.asFunction<_dart_PyLong_GCD>();

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyLong_Zero =
      _lookup<ffi.Pointer<PyObject>>('_PyLong_Zero');

  ffi.Pointer<PyObject> get PyLong_Zero => _PyLong_Zero.value;

  set PyLong_Zero(ffi.Pointer<PyObject> value) => _PyLong_Zero.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyLong_One =
      _lookup<ffi.Pointer<PyObject>>('_PyLong_One');

  ffi.Pointer<PyObject> get PyLong_One => _PyLong_One.value;

  set PyLong_One(ffi.Pointer<PyObject> value) => _PyLong_One.value = value;

  ffi.Pointer<PyObject> PyLong_Rshift(
    ffi.Pointer<PyObject> arg0,
    int arg1,
  ) {
    return _PyLong_Rshift(
      arg0,
      arg1,
    );
  }

  late final _PyLong_Rshift_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_Rshift>>('_PyLong_Rshift');
  late final _dart_PyLong_Rshift _PyLong_Rshift =
      _PyLong_Rshift_ptr.asFunction<_dart_PyLong_Rshift>();

  ffi.Pointer<PyObject> PyLong_Lshift(
    ffi.Pointer<PyObject> arg0,
    int arg1,
  ) {
    return _PyLong_Lshift(
      arg0,
      arg1,
    );
  }

  late final _PyLong_Lshift_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_Lshift>>('_PyLong_Lshift');
  late final _dart_PyLong_Lshift _PyLong_Lshift =
      _PyLong_Lshift_ptr.asFunction<_dart_PyLong_Lshift>();

  ffi.Pointer<_longobject> PyLong_New(
    int arg0,
  ) {
    return _PyLong_New(
      arg0,
    );
  }

  late final _PyLong_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_New>>('_PyLong_New');
  late final _dart_PyLong_New _PyLong_New =
      _PyLong_New_ptr.asFunction<_dart_PyLong_New>();

  ffi.Pointer<PyObject> PyLong_Copy(
    ffi.Pointer<_longobject> src,
  ) {
    return _PyLong_Copy(
      src,
    );
  }

  late final _PyLong_Copy_ptr =
      _lookup<ffi.NativeFunction<_c_PyLong_Copy>>('_PyLong_Copy');
  late final _dart_PyLong_Copy _PyLong_Copy =
      _PyLong_Copy_ptr.asFunction<_dart_PyLong_Copy>();

  late final ffi.Pointer<_typeobject> _PyBool_Type =
      _lookup<_typeobject>('PyBool_Type');

  _typeobject get PyBool_Type => _PyBool_Type.ref;

  late final ffi.Pointer<_longobject> _Py_FalseStruct =
      _lookup<_longobject>('_Py_FalseStruct');

  _longobject get Py_FalseStruct => _Py_FalseStruct.ref;

  late final ffi.Pointer<_longobject> _Py_TrueStruct =
      _lookup<_longobject>('_Py_TrueStruct');

  _longobject get Py_TrueStruct => _Py_TrueStruct.ref;

  ffi.Pointer<PyObject> PyBool_FromLong(
    int arg0,
  ) {
    return _PyBool_FromLong(
      arg0,
    );
  }

  late final _PyBool_FromLong_ptr =
      _lookup<ffi.NativeFunction<_c_PyBool_FromLong>>('PyBool_FromLong');
  late final _dart_PyBool_FromLong _PyBool_FromLong =
      _PyBool_FromLong_ptr.asFunction<_dart_PyBool_FromLong>();

  late final ffi.Pointer<_typeobject> _PyFloat_Type =
      _lookup<_typeobject>('PyFloat_Type');

  _typeobject get PyFloat_Type => _PyFloat_Type.ref;

  double PyFloat_GetMax() {
    return _PyFloat_GetMax();
  }

  late final _PyFloat_GetMax_ptr =
      _lookup<ffi.NativeFunction<_c_PyFloat_GetMax>>('PyFloat_GetMax');
  late final _dart_PyFloat_GetMax _PyFloat_GetMax =
      _PyFloat_GetMax_ptr.asFunction<_dart_PyFloat_GetMax>();

  double PyFloat_GetMin() {
    return _PyFloat_GetMin();
  }

  late final _PyFloat_GetMin_ptr =
      _lookup<ffi.NativeFunction<_c_PyFloat_GetMin>>('PyFloat_GetMin');
  late final _dart_PyFloat_GetMin _PyFloat_GetMin =
      _PyFloat_GetMin_ptr.asFunction<_dart_PyFloat_GetMin>();

  ffi.Pointer<PyObject> PyFloat_GetInfo() {
    return _PyFloat_GetInfo();
  }

  late final _PyFloat_GetInfo_ptr =
      _lookup<ffi.NativeFunction<_c_PyFloat_GetInfo>>('PyFloat_GetInfo');
  late final _dart_PyFloat_GetInfo _PyFloat_GetInfo =
      _PyFloat_GetInfo_ptr.asFunction<_dart_PyFloat_GetInfo>();

  ffi.Pointer<PyObject> PyFloat_FromString(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyFloat_FromString(
      arg0,
    );
  }

  late final _PyFloat_FromString_ptr =
      _lookup<ffi.NativeFunction<_c_PyFloat_FromString>>('PyFloat_FromString');
  late final _dart_PyFloat_FromString _PyFloat_FromString =
      _PyFloat_FromString_ptr.asFunction<_dart_PyFloat_FromString>();

  ffi.Pointer<PyObject> PyFloat_FromDouble(
    double arg0,
  ) {
    return _PyFloat_FromDouble(
      arg0,
    );
  }

  late final _PyFloat_FromDouble_ptr =
      _lookup<ffi.NativeFunction<_c_PyFloat_FromDouble>>('PyFloat_FromDouble');
  late final _dart_PyFloat_FromDouble _PyFloat_FromDouble =
      _PyFloat_FromDouble_ptr.asFunction<_dart_PyFloat_FromDouble>();

  double PyFloat_AsDouble(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyFloat_AsDouble(
      arg0,
    );
  }

  late final _PyFloat_AsDouble_ptr =
      _lookup<ffi.NativeFunction<_c_PyFloat_AsDouble>>('PyFloat_AsDouble');
  late final _dart_PyFloat_AsDouble _PyFloat_AsDouble =
      _PyFloat_AsDouble_ptr.asFunction<_dart_PyFloat_AsDouble>();

  int PyFloat_Pack2(
    double x,
    ffi.Pointer<ffi.Uint8> p,
    int le,
  ) {
    return _PyFloat_Pack2(
      x,
      p,
      le,
    );
  }

  late final _PyFloat_Pack2_ptr =
      _lookup<ffi.NativeFunction<_c_PyFloat_Pack2>>('_PyFloat_Pack2');
  late final _dart_PyFloat_Pack2 _PyFloat_Pack2 =
      _PyFloat_Pack2_ptr.asFunction<_dart_PyFloat_Pack2>();

  int PyFloat_Pack4(
    double x,
    ffi.Pointer<ffi.Uint8> p,
    int le,
  ) {
    return _PyFloat_Pack4(
      x,
      p,
      le,
    );
  }

  late final _PyFloat_Pack4_ptr =
      _lookup<ffi.NativeFunction<_c_PyFloat_Pack4>>('_PyFloat_Pack4');
  late final _dart_PyFloat_Pack4 _PyFloat_Pack4 =
      _PyFloat_Pack4_ptr.asFunction<_dart_PyFloat_Pack4>();

  int PyFloat_Pack8(
    double x,
    ffi.Pointer<ffi.Uint8> p,
    int le,
  ) {
    return _PyFloat_Pack8(
      x,
      p,
      le,
    );
  }

  late final _PyFloat_Pack8_ptr =
      _lookup<ffi.NativeFunction<_c_PyFloat_Pack8>>('_PyFloat_Pack8');
  late final _dart_PyFloat_Pack8 _PyFloat_Pack8 =
      _PyFloat_Pack8_ptr.asFunction<_dart_PyFloat_Pack8>();

  int PyFloat_Repr(
    double x,
    ffi.Pointer<ffi.Int8> p,
    int len,
  ) {
    return _PyFloat_Repr(
      x,
      p,
      len,
    );
  }

  late final _PyFloat_Repr_ptr =
      _lookup<ffi.NativeFunction<_c_PyFloat_Repr>>('_PyFloat_Repr');
  late final _dart_PyFloat_Repr _PyFloat_Repr =
      _PyFloat_Repr_ptr.asFunction<_dart_PyFloat_Repr>();

  int PyFloat_Digits(
    ffi.Pointer<ffi.Int8> buf,
    double v,
    ffi.Pointer<ffi.Int32> signum,
  ) {
    return _PyFloat_Digits(
      buf,
      v,
      signum,
    );
  }

  late final _PyFloat_Digits_ptr =
      _lookup<ffi.NativeFunction<_c_PyFloat_Digits>>('_PyFloat_Digits');
  late final _dart_PyFloat_Digits _PyFloat_Digits =
      _PyFloat_Digits_ptr.asFunction<_dart_PyFloat_Digits>();

  void PyFloat_DigitsInit() {
    return _PyFloat_DigitsInit();
  }

  late final _PyFloat_DigitsInit_ptr =
      _lookup<ffi.NativeFunction<_c_PyFloat_DigitsInit>>('_PyFloat_DigitsInit');
  late final _dart_PyFloat_DigitsInit _PyFloat_DigitsInit =
      _PyFloat_DigitsInit_ptr.asFunction<_dart_PyFloat_DigitsInit>();

  double PyFloat_Unpack2(
    ffi.Pointer<ffi.Uint8> p,
    int le,
  ) {
    return _PyFloat_Unpack2(
      p,
      le,
    );
  }

  late final _PyFloat_Unpack2_ptr =
      _lookup<ffi.NativeFunction<_c_PyFloat_Unpack2>>('_PyFloat_Unpack2');
  late final _dart_PyFloat_Unpack2 _PyFloat_Unpack2 =
      _PyFloat_Unpack2_ptr.asFunction<_dart_PyFloat_Unpack2>();

  double PyFloat_Unpack4(
    ffi.Pointer<ffi.Uint8> p,
    int le,
  ) {
    return _PyFloat_Unpack4(
      p,
      le,
    );
  }

  late final _PyFloat_Unpack4_ptr =
      _lookup<ffi.NativeFunction<_c_PyFloat_Unpack4>>('_PyFloat_Unpack4');
  late final _dart_PyFloat_Unpack4 _PyFloat_Unpack4 =
      _PyFloat_Unpack4_ptr.asFunction<_dart_PyFloat_Unpack4>();

  double PyFloat_Unpack8(
    ffi.Pointer<ffi.Uint8> p,
    int le,
  ) {
    return _PyFloat_Unpack8(
      p,
      le,
    );
  }

  late final _PyFloat_Unpack8_ptr =
      _lookup<ffi.NativeFunction<_c_PyFloat_Unpack8>>('_PyFloat_Unpack8');
  late final _dart_PyFloat_Unpack8 _PyFloat_Unpack8 =
      _PyFloat_Unpack8_ptr.asFunction<_dart_PyFloat_Unpack8>();

  int PyFloat_ClearFreeList() {
    return _PyFloat_ClearFreeList();
  }

  late final _PyFloat_ClearFreeList_ptr =
      _lookup<ffi.NativeFunction<_c_PyFloat_ClearFreeList>>(
          'PyFloat_ClearFreeList');
  late final _dart_PyFloat_ClearFreeList _PyFloat_ClearFreeList =
      _PyFloat_ClearFreeList_ptr.asFunction<_dart_PyFloat_ClearFreeList>();

  void PyFloat_DebugMallocStats(
    ffi.Pointer<FILE> out,
  ) {
    return _PyFloat_DebugMallocStats(
      out,
    );
  }

  late final _PyFloat_DebugMallocStats_ptr =
      _lookup<ffi.NativeFunction<_c_PyFloat_DebugMallocStats>>(
          '_PyFloat_DebugMallocStats');
  late final _dart_PyFloat_DebugMallocStats _PyFloat_DebugMallocStats =
      _PyFloat_DebugMallocStats_ptr.asFunction<
          _dart_PyFloat_DebugMallocStats>();

  int PyFloat_FormatAdvancedWriter(
    ffi.Pointer<_PyUnicodeWriter> writer,
    ffi.Pointer<PyObject> obj,
    ffi.Pointer<PyObject> format_spec,
    int start,
    int end,
  ) {
    return _PyFloat_FormatAdvancedWriter(
      writer,
      obj,
      format_spec,
      start,
      end,
    );
  }

  late final _PyFloat_FormatAdvancedWriter_ptr =
      _lookup<ffi.NativeFunction<_c_PyFloat_FormatAdvancedWriter>>(
          '_PyFloat_FormatAdvancedWriter');
  late final _dart_PyFloat_FormatAdvancedWriter _PyFloat_FormatAdvancedWriter =
      _PyFloat_FormatAdvancedWriter_ptr.asFunction<
          _dart_PyFloat_FormatAdvancedWriter>();

  Py_complex Py_c_sum(
    Py_complex arg0,
    Py_complex arg1,
  ) {
    return _Py_c_sum(
      arg0,
      arg1,
    );
  }

  late final _Py_c_sum_ptr =
      _lookup<ffi.NativeFunction<_c_Py_c_sum>>('_Py_c_sum');
  late final _dart_Py_c_sum _Py_c_sum =
      _Py_c_sum_ptr.asFunction<_dart_Py_c_sum>();

  Py_complex Py_c_diff(
    Py_complex arg0,
    Py_complex arg1,
  ) {
    return _Py_c_diff(
      arg0,
      arg1,
    );
  }

  late final _Py_c_diff_ptr =
      _lookup<ffi.NativeFunction<_c_Py_c_diff>>('_Py_c_diff');
  late final _dart_Py_c_diff _Py_c_diff =
      _Py_c_diff_ptr.asFunction<_dart_Py_c_diff>();

  Py_complex Py_c_neg(
    Py_complex arg0,
  ) {
    return _Py_c_neg(
      arg0,
    );
  }

  late final _Py_c_neg_ptr =
      _lookup<ffi.NativeFunction<_c_Py_c_neg>>('_Py_c_neg');
  late final _dart_Py_c_neg _Py_c_neg =
      _Py_c_neg_ptr.asFunction<_dart_Py_c_neg>();

  Py_complex Py_c_prod(
    Py_complex arg0,
    Py_complex arg1,
  ) {
    return _Py_c_prod(
      arg0,
      arg1,
    );
  }

  late final _Py_c_prod_ptr =
      _lookup<ffi.NativeFunction<_c_Py_c_prod>>('_Py_c_prod');
  late final _dart_Py_c_prod _Py_c_prod =
      _Py_c_prod_ptr.asFunction<_dart_Py_c_prod>();

  Py_complex Py_c_quot(
    Py_complex arg0,
    Py_complex arg1,
  ) {
    return _Py_c_quot(
      arg0,
      arg1,
    );
  }

  late final _Py_c_quot_ptr =
      _lookup<ffi.NativeFunction<_c_Py_c_quot>>('_Py_c_quot');
  late final _dart_Py_c_quot _Py_c_quot =
      _Py_c_quot_ptr.asFunction<_dart_Py_c_quot>();

  Py_complex Py_c_pow(
    Py_complex arg0,
    Py_complex arg1,
  ) {
    return _Py_c_pow(
      arg0,
      arg1,
    );
  }

  late final _Py_c_pow_ptr =
      _lookup<ffi.NativeFunction<_c_Py_c_pow>>('_Py_c_pow');
  late final _dart_Py_c_pow _Py_c_pow =
      _Py_c_pow_ptr.asFunction<_dart_Py_c_pow>();

  double Py_c_abs(
    Py_complex arg0,
  ) {
    return _Py_c_abs(
      arg0,
    );
  }

  late final _Py_c_abs_ptr =
      _lookup<ffi.NativeFunction<_c_Py_c_abs>>('_Py_c_abs');
  late final _dart_Py_c_abs _Py_c_abs =
      _Py_c_abs_ptr.asFunction<_dart_Py_c_abs>();

  late final ffi.Pointer<_typeobject> _PyComplex_Type =
      _lookup<_typeobject>('PyComplex_Type');

  _typeobject get PyComplex_Type => _PyComplex_Type.ref;

  ffi.Pointer<PyObject> PyComplex_FromCComplex(
    Py_complex arg0,
  ) {
    return _PyComplex_FromCComplex(
      arg0,
    );
  }

  late final _PyComplex_FromCComplex_ptr =
      _lookup<ffi.NativeFunction<_c_PyComplex_FromCComplex>>(
          'PyComplex_FromCComplex');
  late final _dart_PyComplex_FromCComplex _PyComplex_FromCComplex =
      _PyComplex_FromCComplex_ptr.asFunction<_dart_PyComplex_FromCComplex>();

  ffi.Pointer<PyObject> PyComplex_FromDoubles(
    double real,
    double imag,
  ) {
    return _PyComplex_FromDoubles(
      real,
      imag,
    );
  }

  late final _PyComplex_FromDoubles_ptr =
      _lookup<ffi.NativeFunction<_c_PyComplex_FromDoubles>>(
          'PyComplex_FromDoubles');
  late final _dart_PyComplex_FromDoubles _PyComplex_FromDoubles =
      _PyComplex_FromDoubles_ptr.asFunction<_dart_PyComplex_FromDoubles>();

  double PyComplex_RealAsDouble(
    ffi.Pointer<PyObject> op,
  ) {
    return _PyComplex_RealAsDouble(
      op,
    );
  }

  late final _PyComplex_RealAsDouble_ptr =
      _lookup<ffi.NativeFunction<_c_PyComplex_RealAsDouble>>(
          'PyComplex_RealAsDouble');
  late final _dart_PyComplex_RealAsDouble _PyComplex_RealAsDouble =
      _PyComplex_RealAsDouble_ptr.asFunction<_dart_PyComplex_RealAsDouble>();

  double PyComplex_ImagAsDouble(
    ffi.Pointer<PyObject> op,
  ) {
    return _PyComplex_ImagAsDouble(
      op,
    );
  }

  late final _PyComplex_ImagAsDouble_ptr =
      _lookup<ffi.NativeFunction<_c_PyComplex_ImagAsDouble>>(
          'PyComplex_ImagAsDouble');
  late final _dart_PyComplex_ImagAsDouble _PyComplex_ImagAsDouble =
      _PyComplex_ImagAsDouble_ptr.asFunction<_dart_PyComplex_ImagAsDouble>();

  Py_complex PyComplex_AsCComplex(
    ffi.Pointer<PyObject> op,
  ) {
    return _PyComplex_AsCComplex(
      op,
    );
  }

  late final _PyComplex_AsCComplex_ptr =
      _lookup<ffi.NativeFunction<_c_PyComplex_AsCComplex>>(
          'PyComplex_AsCComplex');
  late final _dart_PyComplex_AsCComplex _PyComplex_AsCComplex =
      _PyComplex_AsCComplex_ptr.asFunction<_dart_PyComplex_AsCComplex>();

  int PyComplex_FormatAdvancedWriter(
    ffi.Pointer<_PyUnicodeWriter> writer,
    ffi.Pointer<PyObject> obj,
    ffi.Pointer<PyObject> format_spec,
    int start,
    int end,
  ) {
    return _PyComplex_FormatAdvancedWriter(
      writer,
      obj,
      format_spec,
      start,
      end,
    );
  }

  late final _PyComplex_FormatAdvancedWriter_ptr =
      _lookup<ffi.NativeFunction<_c_PyComplex_FormatAdvancedWriter>>(
          '_PyComplex_FormatAdvancedWriter');
  late final _dart_PyComplex_FormatAdvancedWriter
      _PyComplex_FormatAdvancedWriter = _PyComplex_FormatAdvancedWriter_ptr
          .asFunction<_dart_PyComplex_FormatAdvancedWriter>();

  late final ffi.Pointer<_typeobject> _PyRange_Type =
      _lookup<_typeobject>('PyRange_Type');

  _typeobject get PyRange_Type => _PyRange_Type.ref;

  late final ffi.Pointer<_typeobject> _PyRangeIter_Type =
      _lookup<_typeobject>('PyRangeIter_Type');

  _typeobject get PyRangeIter_Type => _PyRangeIter_Type.ref;

  late final ffi.Pointer<_typeobject> _PyLongRangeIter_Type =
      _lookup<_typeobject>('PyLongRangeIter_Type');

  _typeobject get PyLongRangeIter_Type => _PyLongRangeIter_Type.ref;

  late final ffi.Pointer<_typeobject> _PyManagedBuffer_Type =
      _lookup<_typeobject>('_PyManagedBuffer_Type');

  _typeobject get PyManagedBuffer_Type => _PyManagedBuffer_Type.ref;

  late final ffi.Pointer<_typeobject> _PyMemoryView_Type =
      _lookup<_typeobject>('PyMemoryView_Type');

  _typeobject get PyMemoryView_Type => _PyMemoryView_Type.ref;

  ffi.Pointer<PyObject> PyMemoryView_FromObject(
    ffi.Pointer<PyObject> base,
  ) {
    return _PyMemoryView_FromObject(
      base,
    );
  }

  late final _PyMemoryView_FromObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyMemoryView_FromObject>>(
          'PyMemoryView_FromObject');
  late final _dart_PyMemoryView_FromObject _PyMemoryView_FromObject =
      _PyMemoryView_FromObject_ptr.asFunction<_dart_PyMemoryView_FromObject>();

  ffi.Pointer<PyObject> PyMemoryView_FromMemory(
    ffi.Pointer<ffi.Int8> mem,
    int size,
    int flags,
  ) {
    return _PyMemoryView_FromMemory(
      mem,
      size,
      flags,
    );
  }

  late final _PyMemoryView_FromMemory_ptr =
      _lookup<ffi.NativeFunction<_c_PyMemoryView_FromMemory>>(
          'PyMemoryView_FromMemory');
  late final _dart_PyMemoryView_FromMemory _PyMemoryView_FromMemory =
      _PyMemoryView_FromMemory_ptr.asFunction<_dart_PyMemoryView_FromMemory>();

  ffi.Pointer<PyObject> PyMemoryView_FromBuffer(
    ffi.Pointer<Py_buffer> info,
  ) {
    return _PyMemoryView_FromBuffer(
      info,
    );
  }

  late final _PyMemoryView_FromBuffer_ptr =
      _lookup<ffi.NativeFunction<_c_PyMemoryView_FromBuffer>>(
          'PyMemoryView_FromBuffer');
  late final _dart_PyMemoryView_FromBuffer _PyMemoryView_FromBuffer =
      _PyMemoryView_FromBuffer_ptr.asFunction<_dart_PyMemoryView_FromBuffer>();

  ffi.Pointer<PyObject> PyMemoryView_GetContiguous(
    ffi.Pointer<PyObject> base,
    int buffertype,
    int order,
  ) {
    return _PyMemoryView_GetContiguous(
      base,
      buffertype,
      order,
    );
  }

  late final _PyMemoryView_GetContiguous_ptr =
      _lookup<ffi.NativeFunction<_c_PyMemoryView_GetContiguous>>(
          'PyMemoryView_GetContiguous');
  late final _dart_PyMemoryView_GetContiguous _PyMemoryView_GetContiguous =
      _PyMemoryView_GetContiguous_ptr.asFunction<
          _dart_PyMemoryView_GetContiguous>();

  late final ffi.Pointer<_typeobject> _PyTuple_Type =
      _lookup<_typeobject>('PyTuple_Type');

  _typeobject get PyTuple_Type => _PyTuple_Type.ref;

  late final ffi.Pointer<_typeobject> _PyTupleIter_Type =
      _lookup<_typeobject>('PyTupleIter_Type');

  _typeobject get PyTupleIter_Type => _PyTupleIter_Type.ref;

  ffi.Pointer<PyObject> PyTuple_New(
    int size,
  ) {
    return _PyTuple_New(
      size,
    );
  }

  late final _PyTuple_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyTuple_New>>('PyTuple_New');
  late final _dart_PyTuple_New _PyTuple_New =
      _PyTuple_New_ptr.asFunction<_dart_PyTuple_New>();

  int PyTuple_Size(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyTuple_Size(
      arg0,
    );
  }

  late final _PyTuple_Size_ptr =
      _lookup<ffi.NativeFunction<_c_PyTuple_Size>>('PyTuple_Size');
  late final _dart_PyTuple_Size _PyTuple_Size =
      _PyTuple_Size_ptr.asFunction<_dart_PyTuple_Size>();

  ffi.Pointer<PyObject> PyTuple_GetItem(
    ffi.Pointer<PyObject> arg0,
    int arg1,
  ) {
    return _PyTuple_GetItem(
      arg0,
      arg1,
    );
  }

  late final _PyTuple_GetItem_ptr =
      _lookup<ffi.NativeFunction<_c_PyTuple_GetItem>>('PyTuple_GetItem');
  late final _dart_PyTuple_GetItem _PyTuple_GetItem =
      _PyTuple_GetItem_ptr.asFunction<_dart_PyTuple_GetItem>();

  int PyTuple_SetItem(
    ffi.Pointer<PyObject> arg0,
    int arg1,
    ffi.Pointer<PyObject> arg2,
  ) {
    return _PyTuple_SetItem(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyTuple_SetItem_ptr =
      _lookup<ffi.NativeFunction<_c_PyTuple_SetItem>>('PyTuple_SetItem');
  late final _dart_PyTuple_SetItem _PyTuple_SetItem =
      _PyTuple_SetItem_ptr.asFunction<_dart_PyTuple_SetItem>();

  ffi.Pointer<PyObject> PyTuple_GetSlice(
    ffi.Pointer<PyObject> arg0,
    int arg1,
    int arg2,
  ) {
    return _PyTuple_GetSlice(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyTuple_GetSlice_ptr =
      _lookup<ffi.NativeFunction<_c_PyTuple_GetSlice>>('PyTuple_GetSlice');
  late final _dart_PyTuple_GetSlice _PyTuple_GetSlice =
      _PyTuple_GetSlice_ptr.asFunction<_dart_PyTuple_GetSlice>();

  ffi.Pointer<PyObject> PyTuple_Pack(
    int arg0,
  ) {
    return _PyTuple_Pack(
      arg0,
    );
  }

  late final _PyTuple_Pack_ptr =
      _lookup<ffi.NativeFunction<_c_PyTuple_Pack>>('PyTuple_Pack');
  late final _dart_PyTuple_Pack _PyTuple_Pack =
      _PyTuple_Pack_ptr.asFunction<_dart_PyTuple_Pack>();

  int PyTuple_ClearFreeList() {
    return _PyTuple_ClearFreeList();
  }

  late final _PyTuple_ClearFreeList_ptr =
      _lookup<ffi.NativeFunction<_c_PyTuple_ClearFreeList>>(
          'PyTuple_ClearFreeList');
  late final _dart_PyTuple_ClearFreeList _PyTuple_ClearFreeList =
      _PyTuple_ClearFreeList_ptr.asFunction<_dart_PyTuple_ClearFreeList>();

  late final ffi.Pointer<_typeobject> _PyList_Type =
      _lookup<_typeobject>('PyList_Type');

  _typeobject get PyList_Type => _PyList_Type.ref;

  late final ffi.Pointer<_typeobject> _PyListIter_Type =
      _lookup<_typeobject>('PyListIter_Type');

  _typeobject get PyListIter_Type => _PyListIter_Type.ref;

  late final ffi.Pointer<_typeobject> _PyListRevIter_Type =
      _lookup<_typeobject>('PyListRevIter_Type');

  _typeobject get PyListRevIter_Type => _PyListRevIter_Type.ref;

  late final ffi.Pointer<_typeobject> _PySortWrapper_Type =
      _lookup<_typeobject>('PySortWrapper_Type');

  _typeobject get PySortWrapper_Type => _PySortWrapper_Type.ref;

  ffi.Pointer<PyObject> PyList_New(
    int size,
  ) {
    return _PyList_New(
      size,
    );
  }

  late final _PyList_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyList_New>>('PyList_New');
  late final _dart_PyList_New _PyList_New =
      _PyList_New_ptr.asFunction<_dart_PyList_New>();

  int PyList_Size(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyList_Size(
      arg0,
    );
  }

  late final _PyList_Size_ptr =
      _lookup<ffi.NativeFunction<_c_PyList_Size>>('PyList_Size');
  late final _dart_PyList_Size _PyList_Size =
      _PyList_Size_ptr.asFunction<_dart_PyList_Size>();

  ffi.Pointer<PyObject> PyList_GetItem(
    ffi.Pointer<PyObject> arg0,
    int arg1,
  ) {
    return _PyList_GetItem(
      arg0,
      arg1,
    );
  }

  late final _PyList_GetItem_ptr =
      _lookup<ffi.NativeFunction<_c_PyList_GetItem>>('PyList_GetItem');
  late final _dart_PyList_GetItem _PyList_GetItem =
      _PyList_GetItem_ptr.asFunction<_dart_PyList_GetItem>();

  int PyList_SetItem(
    ffi.Pointer<PyObject> arg0,
    int arg1,
    ffi.Pointer<PyObject> arg2,
  ) {
    return _PyList_SetItem(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyList_SetItem_ptr =
      _lookup<ffi.NativeFunction<_c_PyList_SetItem>>('PyList_SetItem');
  late final _dart_PyList_SetItem _PyList_SetItem =
      _PyList_SetItem_ptr.asFunction<_dart_PyList_SetItem>();

  int PyList_Insert(
    ffi.Pointer<PyObject> arg0,
    int arg1,
    ffi.Pointer<PyObject> arg2,
  ) {
    return _PyList_Insert(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyList_Insert_ptr =
      _lookup<ffi.NativeFunction<_c_PyList_Insert>>('PyList_Insert');
  late final _dart_PyList_Insert _PyList_Insert =
      _PyList_Insert_ptr.asFunction<_dart_PyList_Insert>();

  int PyList_Append(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyList_Append(
      arg0,
      arg1,
    );
  }

  late final _PyList_Append_ptr =
      _lookup<ffi.NativeFunction<_c_PyList_Append>>('PyList_Append');
  late final _dart_PyList_Append _PyList_Append =
      _PyList_Append_ptr.asFunction<_dart_PyList_Append>();

  ffi.Pointer<PyObject> PyList_GetSlice(
    ffi.Pointer<PyObject> arg0,
    int arg1,
    int arg2,
  ) {
    return _PyList_GetSlice(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyList_GetSlice_ptr =
      _lookup<ffi.NativeFunction<_c_PyList_GetSlice>>('PyList_GetSlice');
  late final _dart_PyList_GetSlice _PyList_GetSlice =
      _PyList_GetSlice_ptr.asFunction<_dart_PyList_GetSlice>();

  int PyList_SetSlice(
    ffi.Pointer<PyObject> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<PyObject> arg3,
  ) {
    return _PyList_SetSlice(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _PyList_SetSlice_ptr =
      _lookup<ffi.NativeFunction<_c_PyList_SetSlice>>('PyList_SetSlice');
  late final _dart_PyList_SetSlice _PyList_SetSlice =
      _PyList_SetSlice_ptr.asFunction<_dart_PyList_SetSlice>();

  int PyList_Sort(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyList_Sort(
      arg0,
    );
  }

  late final _PyList_Sort_ptr =
      _lookup<ffi.NativeFunction<_c_PyList_Sort>>('PyList_Sort');
  late final _dart_PyList_Sort _PyList_Sort =
      _PyList_Sort_ptr.asFunction<_dart_PyList_Sort>();

  int PyList_Reverse(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyList_Reverse(
      arg0,
    );
  }

  late final _PyList_Reverse_ptr =
      _lookup<ffi.NativeFunction<_c_PyList_Reverse>>('PyList_Reverse');
  late final _dart_PyList_Reverse _PyList_Reverse =
      _PyList_Reverse_ptr.asFunction<_dart_PyList_Reverse>();

  ffi.Pointer<PyObject> PyList_AsTuple(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyList_AsTuple(
      arg0,
    );
  }

  late final _PyList_AsTuple_ptr =
      _lookup<ffi.NativeFunction<_c_PyList_AsTuple>>('PyList_AsTuple');
  late final _dart_PyList_AsTuple _PyList_AsTuple =
      _PyList_AsTuple_ptr.asFunction<_dart_PyList_AsTuple>();

  ffi.Pointer<PyObject> PyList_Extend(
    ffi.Pointer<PyListObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyList_Extend(
      arg0,
      arg1,
    );
  }

  late final _PyList_Extend_ptr =
      _lookup<ffi.NativeFunction<_c_PyList_Extend>>('_PyList_Extend');
  late final _dart_PyList_Extend _PyList_Extend =
      _PyList_Extend_ptr.asFunction<_dart_PyList_Extend>();

  int PyList_ClearFreeList() {
    return _PyList_ClearFreeList();
  }

  late final _PyList_ClearFreeList_ptr =
      _lookup<ffi.NativeFunction<_c_PyList_ClearFreeList>>(
          'PyList_ClearFreeList');
  late final _dart_PyList_ClearFreeList _PyList_ClearFreeList =
      _PyList_ClearFreeList_ptr.asFunction<_dart_PyList_ClearFreeList>();

  void PyList_DebugMallocStats(
    ffi.Pointer<FILE> out,
  ) {
    return _PyList_DebugMallocStats(
      out,
    );
  }

  late final _PyList_DebugMallocStats_ptr =
      _lookup<ffi.NativeFunction<_c_PyList_DebugMallocStats>>(
          '_PyList_DebugMallocStats');
  late final _dart_PyList_DebugMallocStats _PyList_DebugMallocStats =
      _PyList_DebugMallocStats_ptr.asFunction<_dart_PyList_DebugMallocStats>();

  late final ffi.Pointer<_typeobject> _PyDict_Type =
      _lookup<_typeobject>('PyDict_Type');

  _typeobject get PyDict_Type => _PyDict_Type.ref;

  ffi.Pointer<PyObject> PyDict_New() {
    return _PyDict_New();
  }

  late final _PyDict_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyDict_New>>('PyDict_New');
  late final _dart_PyDict_New _PyDict_New =
      _PyDict_New_ptr.asFunction<_dart_PyDict_New>();

  ffi.Pointer<PyObject> PyDict_GetItem(
    ffi.Pointer<PyObject> mp,
    ffi.Pointer<PyObject> key,
  ) {
    return _PyDict_GetItem(
      mp,
      key,
    );
  }

  late final _PyDict_GetItem_ptr =
      _lookup<ffi.NativeFunction<_c_PyDict_GetItem>>('PyDict_GetItem');
  late final _dart_PyDict_GetItem _PyDict_GetItem =
      _PyDict_GetItem_ptr.asFunction<_dart_PyDict_GetItem>();

  ffi.Pointer<PyObject> PyDict_GetItemWithError(
    ffi.Pointer<PyObject> mp,
    ffi.Pointer<PyObject> key,
  ) {
    return _PyDict_GetItemWithError(
      mp,
      key,
    );
  }

  late final _PyDict_GetItemWithError_ptr =
      _lookup<ffi.NativeFunction<_c_PyDict_GetItemWithError>>(
          'PyDict_GetItemWithError');
  late final _dart_PyDict_GetItemWithError _PyDict_GetItemWithError =
      _PyDict_GetItemWithError_ptr.asFunction<_dart_PyDict_GetItemWithError>();

  int PyDict_SetItem(
    ffi.Pointer<PyObject> mp,
    ffi.Pointer<PyObject> key,
    ffi.Pointer<PyObject> item,
  ) {
    return _PyDict_SetItem(
      mp,
      key,
      item,
    );
  }

  late final _PyDict_SetItem_ptr =
      _lookup<ffi.NativeFunction<_c_PyDict_SetItem>>('PyDict_SetItem');
  late final _dart_PyDict_SetItem _PyDict_SetItem =
      _PyDict_SetItem_ptr.asFunction<_dart_PyDict_SetItem>();

  int PyDict_DelItem(
    ffi.Pointer<PyObject> mp,
    ffi.Pointer<PyObject> key,
  ) {
    return _PyDict_DelItem(
      mp,
      key,
    );
  }

  late final _PyDict_DelItem_ptr =
      _lookup<ffi.NativeFunction<_c_PyDict_DelItem>>('PyDict_DelItem');
  late final _dart_PyDict_DelItem _PyDict_DelItem =
      _PyDict_DelItem_ptr.asFunction<_dart_PyDict_DelItem>();

  void PyDict_Clear(
    ffi.Pointer<PyObject> mp,
  ) {
    return _PyDict_Clear(
      mp,
    );
  }

  late final _PyDict_Clear_ptr =
      _lookup<ffi.NativeFunction<_c_PyDict_Clear>>('PyDict_Clear');
  late final _dart_PyDict_Clear _PyDict_Clear =
      _PyDict_Clear_ptr.asFunction<_dart_PyDict_Clear>();

  int PyDict_Next(
    ffi.Pointer<PyObject> mp,
    ffi.Pointer<ffi.Int64> pos,
    ffi.Pointer<ffi.Pointer<PyObject>> key,
    ffi.Pointer<ffi.Pointer<PyObject>> value,
  ) {
    return _PyDict_Next(
      mp,
      pos,
      key,
      value,
    );
  }

  late final _PyDict_Next_ptr =
      _lookup<ffi.NativeFunction<_c_PyDict_Next>>('PyDict_Next');
  late final _dart_PyDict_Next _PyDict_Next =
      _PyDict_Next_ptr.asFunction<_dart_PyDict_Next>();

  ffi.Pointer<PyObject> PyDict_Keys(
    ffi.Pointer<PyObject> mp,
  ) {
    return _PyDict_Keys(
      mp,
    );
  }

  late final _PyDict_Keys_ptr =
      _lookup<ffi.NativeFunction<_c_PyDict_Keys>>('PyDict_Keys');
  late final _dart_PyDict_Keys _PyDict_Keys =
      _PyDict_Keys_ptr.asFunction<_dart_PyDict_Keys>();

  ffi.Pointer<PyObject> PyDict_Values(
    ffi.Pointer<PyObject> mp,
  ) {
    return _PyDict_Values(
      mp,
    );
  }

  late final _PyDict_Values_ptr =
      _lookup<ffi.NativeFunction<_c_PyDict_Values>>('PyDict_Values');
  late final _dart_PyDict_Values _PyDict_Values =
      _PyDict_Values_ptr.asFunction<_dart_PyDict_Values>();

  ffi.Pointer<PyObject> PyDict_Items(
    ffi.Pointer<PyObject> mp,
  ) {
    return _PyDict_Items(
      mp,
    );
  }

  late final _PyDict_Items_ptr =
      _lookup<ffi.NativeFunction<_c_PyDict_Items>>('PyDict_Items');
  late final _dart_PyDict_Items _PyDict_Items =
      _PyDict_Items_ptr.asFunction<_dart_PyDict_Items>();

  int PyDict_Size(
    ffi.Pointer<PyObject> mp,
  ) {
    return _PyDict_Size(
      mp,
    );
  }

  late final _PyDict_Size_ptr =
      _lookup<ffi.NativeFunction<_c_PyDict_Size>>('PyDict_Size');
  late final _dart_PyDict_Size _PyDict_Size =
      _PyDict_Size_ptr.asFunction<_dart_PyDict_Size>();

  ffi.Pointer<PyObject> PyDict_Copy(
    ffi.Pointer<PyObject> mp,
  ) {
    return _PyDict_Copy(
      mp,
    );
  }

  late final _PyDict_Copy_ptr =
      _lookup<ffi.NativeFunction<_c_PyDict_Copy>>('PyDict_Copy');
  late final _dart_PyDict_Copy _PyDict_Copy =
      _PyDict_Copy_ptr.asFunction<_dart_PyDict_Copy>();

  int PyDict_Contains(
    ffi.Pointer<PyObject> mp,
    ffi.Pointer<PyObject> key,
  ) {
    return _PyDict_Contains(
      mp,
      key,
    );
  }

  late final _PyDict_Contains_ptr =
      _lookup<ffi.NativeFunction<_c_PyDict_Contains>>('PyDict_Contains');
  late final _dart_PyDict_Contains _PyDict_Contains =
      _PyDict_Contains_ptr.asFunction<_dart_PyDict_Contains>();

  int PyDict_Update(
    ffi.Pointer<PyObject> mp,
    ffi.Pointer<PyObject> other,
  ) {
    return _PyDict_Update(
      mp,
      other,
    );
  }

  late final _PyDict_Update_ptr =
      _lookup<ffi.NativeFunction<_c_PyDict_Update>>('PyDict_Update');
  late final _dart_PyDict_Update _PyDict_Update =
      _PyDict_Update_ptr.asFunction<_dart_PyDict_Update>();

  int PyDict_Merge(
    ffi.Pointer<PyObject> mp,
    ffi.Pointer<PyObject> other,
    int override,
  ) {
    return _PyDict_Merge(
      mp,
      other,
      override,
    );
  }

  late final _PyDict_Merge_ptr =
      _lookup<ffi.NativeFunction<_c_PyDict_Merge>>('PyDict_Merge');
  late final _dart_PyDict_Merge _PyDict_Merge =
      _PyDict_Merge_ptr.asFunction<_dart_PyDict_Merge>();

  int PyDict_MergeFromSeq2(
    ffi.Pointer<PyObject> d,
    ffi.Pointer<PyObject> seq2,
    int override,
  ) {
    return _PyDict_MergeFromSeq2(
      d,
      seq2,
      override,
    );
  }

  late final _PyDict_MergeFromSeq2_ptr =
      _lookup<ffi.NativeFunction<_c_PyDict_MergeFromSeq2>>(
          'PyDict_MergeFromSeq2');
  late final _dart_PyDict_MergeFromSeq2 _PyDict_MergeFromSeq2 =
      _PyDict_MergeFromSeq2_ptr.asFunction<_dart_PyDict_MergeFromSeq2>();

  ffi.Pointer<PyObject> PyDict_GetItemString(
    ffi.Pointer<PyObject> dp,
    ffi.Pointer<ffi.Int8> key,
  ) {
    return _PyDict_GetItemString(
      dp,
      key,
    );
  }

  late final _PyDict_GetItemString_ptr =
      _lookup<ffi.NativeFunction<_c_PyDict_GetItemString>>(
          'PyDict_GetItemString');
  late final _dart_PyDict_GetItemString _PyDict_GetItemString =
      _PyDict_GetItemString_ptr.asFunction<_dart_PyDict_GetItemString>();

  int PyDict_SetItemString(
    ffi.Pointer<PyObject> dp,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<PyObject> item,
  ) {
    return _PyDict_SetItemString(
      dp,
      key,
      item,
    );
  }

  late final _PyDict_SetItemString_ptr =
      _lookup<ffi.NativeFunction<_c_PyDict_SetItemString>>(
          'PyDict_SetItemString');
  late final _dart_PyDict_SetItemString _PyDict_SetItemString =
      _PyDict_SetItemString_ptr.asFunction<_dart_PyDict_SetItemString>();

  int PyDict_DelItemString(
    ffi.Pointer<PyObject> dp,
    ffi.Pointer<ffi.Int8> key,
  ) {
    return _PyDict_DelItemString(
      dp,
      key,
    );
  }

  late final _PyDict_DelItemString_ptr =
      _lookup<ffi.NativeFunction<_c_PyDict_DelItemString>>(
          'PyDict_DelItemString');
  late final _dart_PyDict_DelItemString _PyDict_DelItemString =
      _PyDict_DelItemString_ptr.asFunction<_dart_PyDict_DelItemString>();

  late final ffi.Pointer<_typeobject> _PyDictKeys_Type =
      _lookup<_typeobject>('PyDictKeys_Type');

  _typeobject get PyDictKeys_Type => _PyDictKeys_Type.ref;

  late final ffi.Pointer<_typeobject> _PyDictValues_Type =
      _lookup<_typeobject>('PyDictValues_Type');

  _typeobject get PyDictValues_Type => _PyDictValues_Type.ref;

  late final ffi.Pointer<_typeobject> _PyDictItems_Type =
      _lookup<_typeobject>('PyDictItems_Type');

  _typeobject get PyDictItems_Type => _PyDictItems_Type.ref;

  late final ffi.Pointer<_typeobject> _PyDictIterKey_Type =
      _lookup<_typeobject>('PyDictIterKey_Type');

  _typeobject get PyDictIterKey_Type => _PyDictIterKey_Type.ref;

  late final ffi.Pointer<_typeobject> _PyDictIterValue_Type =
      _lookup<_typeobject>('PyDictIterValue_Type');

  _typeobject get PyDictIterValue_Type => _PyDictIterValue_Type.ref;

  late final ffi.Pointer<_typeobject> _PyDictIterItem_Type =
      _lookup<_typeobject>('PyDictIterItem_Type');

  _typeobject get PyDictIterItem_Type => _PyDictIterItem_Type.ref;

  late final ffi.Pointer<_typeobject> _PyDictRevIterKey_Type =
      _lookup<_typeobject>('PyDictRevIterKey_Type');

  _typeobject get PyDictRevIterKey_Type => _PyDictRevIterKey_Type.ref;

  late final ffi.Pointer<_typeobject> _PyDictRevIterItem_Type =
      _lookup<_typeobject>('PyDictRevIterItem_Type');

  _typeobject get PyDictRevIterItem_Type => _PyDictRevIterItem_Type.ref;

  late final ffi.Pointer<_typeobject> _PyDictRevIterValue_Type =
      _lookup<_typeobject>('PyDictRevIterValue_Type');

  _typeobject get PyDictRevIterValue_Type => _PyDictRevIterValue_Type.ref;

  late final ffi.Pointer<_typeobject> _PyODict_Type =
      _lookup<_typeobject>('PyODict_Type');

  _typeobject get PyODict_Type => _PyODict_Type.ref;

  late final ffi.Pointer<_typeobject> _PyODictIter_Type =
      _lookup<_typeobject>('PyODictIter_Type');

  _typeobject get PyODictIter_Type => _PyODictIter_Type.ref;

  late final ffi.Pointer<_typeobject> _PyODictKeys_Type =
      _lookup<_typeobject>('PyODictKeys_Type');

  _typeobject get PyODictKeys_Type => _PyODictKeys_Type.ref;

  late final ffi.Pointer<_typeobject> _PyODictItems_Type =
      _lookup<_typeobject>('PyODictItems_Type');

  _typeobject get PyODictItems_Type => _PyODictItems_Type.ref;

  late final ffi.Pointer<_typeobject> _PyODictValues_Type =
      _lookup<_typeobject>('PyODictValues_Type');

  _typeobject get PyODictValues_Type => _PyODictValues_Type.ref;

  ffi.Pointer<PyObject> PyODict_New() {
    return _PyODict_New();
  }

  late final _PyODict_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyODict_New>>('PyODict_New');
  late final _dart_PyODict_New _PyODict_New =
      _PyODict_New_ptr.asFunction<_dart_PyODict_New>();

  int PyODict_SetItem(
    ffi.Pointer<PyObject> od,
    ffi.Pointer<PyObject> key,
    ffi.Pointer<PyObject> item,
  ) {
    return _PyODict_SetItem(
      od,
      key,
      item,
    );
  }

  late final _PyODict_SetItem_ptr =
      _lookup<ffi.NativeFunction<_c_PyODict_SetItem>>('PyODict_SetItem');
  late final _dart_PyODict_SetItem _PyODict_SetItem =
      _PyODict_SetItem_ptr.asFunction<_dart_PyODict_SetItem>();

  int PyODict_DelItem(
    ffi.Pointer<PyObject> od,
    ffi.Pointer<PyObject> key,
  ) {
    return _PyODict_DelItem(
      od,
      key,
    );
  }

  late final _PyODict_DelItem_ptr =
      _lookup<ffi.NativeFunction<_c_PyODict_DelItem>>('PyODict_DelItem');
  late final _dart_PyODict_DelItem _PyODict_DelItem =
      _PyODict_DelItem_ptr.asFunction<_dart_PyODict_DelItem>();

  late final ffi.Pointer<_typeobject> _PyEnum_Type =
      _lookup<_typeobject>('PyEnum_Type');

  _typeobject get PyEnum_Type => _PyEnum_Type.ref;

  late final ffi.Pointer<_typeobject> _PyReversed_Type =
      _lookup<_typeobject>('PyReversed_Type');

  _typeobject get PyReversed_Type => _PyReversed_Type.ref;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PySet_Dummy =
      _lookup<ffi.Pointer<PyObject>>('_PySet_Dummy');

  ffi.Pointer<PyObject> get PySet_Dummy => _PySet_Dummy.value;

  set PySet_Dummy(ffi.Pointer<PyObject> value) => _PySet_Dummy.value = value;

  int PySet_NextEntry(
    ffi.Pointer<PyObject> set_1,
    ffi.Pointer<ffi.Int64> pos,
    ffi.Pointer<ffi.Pointer<PyObject>> key,
    ffi.Pointer<ffi.Int64> hash,
  ) {
    return _PySet_NextEntry(
      set_1,
      pos,
      key,
      hash,
    );
  }

  late final _PySet_NextEntry_ptr =
      _lookup<ffi.NativeFunction<_c_PySet_NextEntry>>('_PySet_NextEntry');
  late final _dart_PySet_NextEntry _PySet_NextEntry =
      _PySet_NextEntry_ptr.asFunction<_dart_PySet_NextEntry>();

  int PySet_Update(
    ffi.Pointer<PyObject> set_1,
    ffi.Pointer<PyObject> iterable,
  ) {
    return _PySet_Update(
      set_1,
      iterable,
    );
  }

  late final _PySet_Update_ptr =
      _lookup<ffi.NativeFunction<_c_PySet_Update>>('_PySet_Update');
  late final _dart_PySet_Update _PySet_Update =
      _PySet_Update_ptr.asFunction<_dart_PySet_Update>();

  int PySet_ClearFreeList() {
    return _PySet_ClearFreeList();
  }

  late final _PySet_ClearFreeList_ptr =
      _lookup<ffi.NativeFunction<_c_PySet_ClearFreeList>>(
          'PySet_ClearFreeList');
  late final _dart_PySet_ClearFreeList _PySet_ClearFreeList =
      _PySet_ClearFreeList_ptr.asFunction<_dart_PySet_ClearFreeList>();

  late final ffi.Pointer<_typeobject> _PySet_Type =
      _lookup<_typeobject>('PySet_Type');

  _typeobject get PySet_Type => _PySet_Type.ref;

  late final ffi.Pointer<_typeobject> _PyFrozenSet_Type =
      _lookup<_typeobject>('PyFrozenSet_Type');

  _typeobject get PyFrozenSet_Type => _PyFrozenSet_Type.ref;

  late final ffi.Pointer<_typeobject> _PySetIter_Type =
      _lookup<_typeobject>('PySetIter_Type');

  _typeobject get PySetIter_Type => _PySetIter_Type.ref;

  ffi.Pointer<PyObject> PySet_New(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PySet_New(
      arg0,
    );
  }

  late final _PySet_New_ptr =
      _lookup<ffi.NativeFunction<_c_PySet_New>>('PySet_New');
  late final _dart_PySet_New _PySet_New =
      _PySet_New_ptr.asFunction<_dart_PySet_New>();

  ffi.Pointer<PyObject> PyFrozenSet_New(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyFrozenSet_New(
      arg0,
    );
  }

  late final _PyFrozenSet_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyFrozenSet_New>>('PyFrozenSet_New');
  late final _dart_PyFrozenSet_New _PyFrozenSet_New =
      _PyFrozenSet_New_ptr.asFunction<_dart_PyFrozenSet_New>();

  int PySet_Add(
    ffi.Pointer<PyObject> set_1,
    ffi.Pointer<PyObject> key,
  ) {
    return _PySet_Add(
      set_1,
      key,
    );
  }

  late final _PySet_Add_ptr =
      _lookup<ffi.NativeFunction<_c_PySet_Add>>('PySet_Add');
  late final _dart_PySet_Add _PySet_Add =
      _PySet_Add_ptr.asFunction<_dart_PySet_Add>();

  int PySet_Clear(
    ffi.Pointer<PyObject> set_1,
  ) {
    return _PySet_Clear(
      set_1,
    );
  }

  late final _PySet_Clear_ptr =
      _lookup<ffi.NativeFunction<_c_PySet_Clear>>('PySet_Clear');
  late final _dart_PySet_Clear _PySet_Clear =
      _PySet_Clear_ptr.asFunction<_dart_PySet_Clear>();

  int PySet_Contains(
    ffi.Pointer<PyObject> anyset,
    ffi.Pointer<PyObject> key,
  ) {
    return _PySet_Contains(
      anyset,
      key,
    );
  }

  late final _PySet_Contains_ptr =
      _lookup<ffi.NativeFunction<_c_PySet_Contains>>('PySet_Contains');
  late final _dart_PySet_Contains _PySet_Contains =
      _PySet_Contains_ptr.asFunction<_dart_PySet_Contains>();

  int PySet_Discard(
    ffi.Pointer<PyObject> set_1,
    ffi.Pointer<PyObject> key,
  ) {
    return _PySet_Discard(
      set_1,
      key,
    );
  }

  late final _PySet_Discard_ptr =
      _lookup<ffi.NativeFunction<_c_PySet_Discard>>('PySet_Discard');
  late final _dart_PySet_Discard _PySet_Discard =
      _PySet_Discard_ptr.asFunction<_dart_PySet_Discard>();

  ffi.Pointer<PyObject> PySet_Pop(
    ffi.Pointer<PyObject> set_1,
  ) {
    return _PySet_Pop(
      set_1,
    );
  }

  late final _PySet_Pop_ptr =
      _lookup<ffi.NativeFunction<_c_PySet_Pop>>('PySet_Pop');
  late final _dart_PySet_Pop _PySet_Pop =
      _PySet_Pop_ptr.asFunction<_dart_PySet_Pop>();

  int PySet_Size(
    ffi.Pointer<PyObject> anyset,
  ) {
    return _PySet_Size(
      anyset,
    );
  }

  late final _PySet_Size_ptr =
      _lookup<ffi.NativeFunction<_c_PySet_Size>>('PySet_Size');
  late final _dart_PySet_Size _PySet_Size =
      _PySet_Size_ptr.asFunction<_dart_PySet_Size>();

  late final ffi.Pointer<_typeobject> _PyCFunction_Type =
      _lookup<_typeobject>('PyCFunction_Type');

  _typeobject get PyCFunction_Type => _PyCFunction_Type.ref;

  ffi.Pointer<ffi.NativeFunction<PyCFunction>> PyCFunction_GetFunction(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyCFunction_GetFunction(
      arg0,
    );
  }

  late final _PyCFunction_GetFunction_ptr =
      _lookup<ffi.NativeFunction<_c_PyCFunction_GetFunction>>(
          'PyCFunction_GetFunction');
  late final _dart_PyCFunction_GetFunction _PyCFunction_GetFunction =
      _PyCFunction_GetFunction_ptr.asFunction<_dart_PyCFunction_GetFunction>();

  ffi.Pointer<PyObject> PyCFunction_GetSelf(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyCFunction_GetSelf(
      arg0,
    );
  }

  late final _PyCFunction_GetSelf_ptr =
      _lookup<ffi.NativeFunction<_c_PyCFunction_GetSelf>>(
          'PyCFunction_GetSelf');
  late final _dart_PyCFunction_GetSelf _PyCFunction_GetSelf =
      _PyCFunction_GetSelf_ptr.asFunction<_dart_PyCFunction_GetSelf>();

  int PyCFunction_GetFlags(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyCFunction_GetFlags(
      arg0,
    );
  }

  late final _PyCFunction_GetFlags_ptr =
      _lookup<ffi.NativeFunction<_c_PyCFunction_GetFlags>>(
          'PyCFunction_GetFlags');
  late final _dart_PyCFunction_GetFlags _PyCFunction_GetFlags =
      _PyCFunction_GetFlags_ptr.asFunction<_dart_PyCFunction_GetFlags>();

  ffi.Pointer<PyObject> PyCFunction_Call(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
    ffi.Pointer<PyObject> arg2,
  ) {
    return _PyCFunction_Call(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyCFunction_Call_ptr =
      _lookup<ffi.NativeFunction<_c_PyCFunction_Call>>('PyCFunction_Call');
  late final _dart_PyCFunction_Call _PyCFunction_Call =
      _PyCFunction_Call_ptr.asFunction<_dart_PyCFunction_Call>();

  ffi.Pointer<PyObject> PyCFunction_FastCallDict(
    ffi.Pointer<PyObject> func,
    ffi.Pointer<ffi.Pointer<PyObject>> args,
    int nargs,
    ffi.Pointer<PyObject> kwargs,
  ) {
    return _PyCFunction_FastCallDict(
      func,
      args,
      nargs,
      kwargs,
    );
  }

  late final _PyCFunction_FastCallDict_ptr =
      _lookup<ffi.NativeFunction<_c_PyCFunction_FastCallDict>>(
          '_PyCFunction_FastCallDict');
  late final _dart_PyCFunction_FastCallDict _PyCFunction_FastCallDict =
      _PyCFunction_FastCallDict_ptr.asFunction<
          _dart_PyCFunction_FastCallDict>();

  ffi.Pointer<PyObject> PyCFunction_NewEx(
    ffi.Pointer<PyMethodDef> arg0,
    ffi.Pointer<PyObject> arg1,
    ffi.Pointer<PyObject> arg2,
  ) {
    return _PyCFunction_NewEx(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyCFunction_NewEx_ptr =
      _lookup<ffi.NativeFunction<_c_PyCFunction_NewEx>>('PyCFunction_NewEx');
  late final _dart_PyCFunction_NewEx _PyCFunction_NewEx =
      _PyCFunction_NewEx_ptr.asFunction<_dart_PyCFunction_NewEx>();

  ffi.Pointer<PyObject> PyMethodDef_RawFastCallDict(
    ffi.Pointer<PyMethodDef> method,
    ffi.Pointer<PyObject> self,
    ffi.Pointer<ffi.Pointer<PyObject>> args,
    int nargs,
    ffi.Pointer<PyObject> kwargs,
  ) {
    return _PyMethodDef_RawFastCallDict(
      method,
      self,
      args,
      nargs,
      kwargs,
    );
  }

  late final _PyMethodDef_RawFastCallDict_ptr =
      _lookup<ffi.NativeFunction<_c_PyMethodDef_RawFastCallDict>>(
          '_PyMethodDef_RawFastCallDict');
  late final _dart_PyMethodDef_RawFastCallDict _PyMethodDef_RawFastCallDict =
      _PyMethodDef_RawFastCallDict_ptr.asFunction<
          _dart_PyMethodDef_RawFastCallDict>();

  ffi.Pointer<PyObject> PyMethodDef_RawFastCallKeywords(
    ffi.Pointer<PyMethodDef> method,
    ffi.Pointer<PyObject> self,
    ffi.Pointer<ffi.Pointer<PyObject>> args,
    int nargs,
    ffi.Pointer<PyObject> kwnames,
  ) {
    return _PyMethodDef_RawFastCallKeywords(
      method,
      self,
      args,
      nargs,
      kwnames,
    );
  }

  late final _PyMethodDef_RawFastCallKeywords_ptr =
      _lookup<ffi.NativeFunction<_c_PyMethodDef_RawFastCallKeywords>>(
          '_PyMethodDef_RawFastCallKeywords');
  late final _dart_PyMethodDef_RawFastCallKeywords
      _PyMethodDef_RawFastCallKeywords = _PyMethodDef_RawFastCallKeywords_ptr
          .asFunction<_dart_PyMethodDef_RawFastCallKeywords>();

  int PyCFunction_ClearFreeList() {
    return _PyCFunction_ClearFreeList();
  }

  late final _PyCFunction_ClearFreeList_ptr =
      _lookup<ffi.NativeFunction<_c_PyCFunction_ClearFreeList>>(
          'PyCFunction_ClearFreeList');
  late final _dart_PyCFunction_ClearFreeList _PyCFunction_ClearFreeList =
      _PyCFunction_ClearFreeList_ptr.asFunction<
          _dart_PyCFunction_ClearFreeList>();

  void PyCFunction_DebugMallocStats(
    ffi.Pointer<FILE> out,
  ) {
    return _PyCFunction_DebugMallocStats(
      out,
    );
  }

  late final _PyCFunction_DebugMallocStats_ptr =
      _lookup<ffi.NativeFunction<_c_PyCFunction_DebugMallocStats>>(
          '_PyCFunction_DebugMallocStats');
  late final _dart_PyCFunction_DebugMallocStats _PyCFunction_DebugMallocStats =
      _PyCFunction_DebugMallocStats_ptr.asFunction<
          _dart_PyCFunction_DebugMallocStats>();

  void PyMethod_DebugMallocStats(
    ffi.Pointer<FILE> out,
  ) {
    return _PyMethod_DebugMallocStats(
      out,
    );
  }

  late final _PyMethod_DebugMallocStats_ptr =
      _lookup<ffi.NativeFunction<_c_PyMethod_DebugMallocStats>>(
          '_PyMethod_DebugMallocStats');
  late final _dart_PyMethod_DebugMallocStats _PyMethod_DebugMallocStats =
      _PyMethod_DebugMallocStats_ptr.asFunction<
          _dart_PyMethod_DebugMallocStats>();

  late final ffi.Pointer<_typeobject> _PyModule_Type =
      _lookup<_typeobject>('PyModule_Type');

  _typeobject get PyModule_Type => _PyModule_Type.ref;

  ffi.Pointer<PyObject> PyModule_NewObject(
    ffi.Pointer<PyObject> name,
  ) {
    return _PyModule_NewObject(
      name,
    );
  }

  late final _PyModule_NewObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyModule_NewObject>>('PyModule_NewObject');
  late final _dart_PyModule_NewObject _PyModule_NewObject =
      _PyModule_NewObject_ptr.asFunction<_dart_PyModule_NewObject>();

  ffi.Pointer<PyObject> PyModule_New(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _PyModule_New(
      name,
    );
  }

  late final _PyModule_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyModule_New>>('PyModule_New');
  late final _dart_PyModule_New _PyModule_New =
      _PyModule_New_ptr.asFunction<_dart_PyModule_New>();

  ffi.Pointer<PyObject> PyModule_GetDict(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyModule_GetDict(
      arg0,
    );
  }

  late final _PyModule_GetDict_ptr =
      _lookup<ffi.NativeFunction<_c_PyModule_GetDict>>('PyModule_GetDict');
  late final _dart_PyModule_GetDict _PyModule_GetDict =
      _PyModule_GetDict_ptr.asFunction<_dart_PyModule_GetDict>();

  ffi.Pointer<PyObject> PyModule_GetNameObject(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyModule_GetNameObject(
      arg0,
    );
  }

  late final _PyModule_GetNameObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyModule_GetNameObject>>(
          'PyModule_GetNameObject');
  late final _dart_PyModule_GetNameObject _PyModule_GetNameObject =
      _PyModule_GetNameObject_ptr.asFunction<_dart_PyModule_GetNameObject>();

  ffi.Pointer<ffi.Int8> PyModule_GetName(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyModule_GetName(
      arg0,
    );
  }

  late final _PyModule_GetName_ptr =
      _lookup<ffi.NativeFunction<_c_PyModule_GetName>>('PyModule_GetName');
  late final _dart_PyModule_GetName _PyModule_GetName =
      _PyModule_GetName_ptr.asFunction<_dart_PyModule_GetName>();

  ffi.Pointer<ffi.Int8> PyModule_GetFilename(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyModule_GetFilename(
      arg0,
    );
  }

  late final _PyModule_GetFilename_ptr =
      _lookup<ffi.NativeFunction<_c_PyModule_GetFilename>>(
          'PyModule_GetFilename');
  late final _dart_PyModule_GetFilename _PyModule_GetFilename =
      _PyModule_GetFilename_ptr.asFunction<_dart_PyModule_GetFilename>();

  ffi.Pointer<PyObject> PyModule_GetFilenameObject(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyModule_GetFilenameObject(
      arg0,
    );
  }

  late final _PyModule_GetFilenameObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyModule_GetFilenameObject>>(
          'PyModule_GetFilenameObject');
  late final _dart_PyModule_GetFilenameObject _PyModule_GetFilenameObject =
      _PyModule_GetFilenameObject_ptr.asFunction<
          _dart_PyModule_GetFilenameObject>();

  void PyModule_Clear(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyModule_Clear(
      arg0,
    );
  }

  late final _PyModule_Clear_ptr =
      _lookup<ffi.NativeFunction<_c_PyModule_Clear>>('_PyModule_Clear');
  late final _dart_PyModule_Clear _PyModule_Clear =
      _PyModule_Clear_ptr.asFunction<_dart_PyModule_Clear>();

  void PyModule_ClearDict(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyModule_ClearDict(
      arg0,
    );
  }

  late final _PyModule_ClearDict_ptr =
      _lookup<ffi.NativeFunction<_c_PyModule_ClearDict>>('_PyModule_ClearDict');
  late final _dart_PyModule_ClearDict _PyModule_ClearDict =
      _PyModule_ClearDict_ptr.asFunction<_dart_PyModule_ClearDict>();

  int PyModuleSpec_IsInitializing(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyModuleSpec_IsInitializing(
      arg0,
    );
  }

  late final _PyModuleSpec_IsInitializing_ptr =
      _lookup<ffi.NativeFunction<_c_PyModuleSpec_IsInitializing>>(
          '_PyModuleSpec_IsInitializing');
  late final _dart_PyModuleSpec_IsInitializing _PyModuleSpec_IsInitializing =
      _PyModuleSpec_IsInitializing_ptr.asFunction<
          _dart_PyModuleSpec_IsInitializing>();

  ffi.Pointer<PyModuleDef> PyModule_GetDef(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyModule_GetDef(
      arg0,
    );
  }

  late final _PyModule_GetDef_ptr =
      _lookup<ffi.NativeFunction<_c_PyModule_GetDef>>('PyModule_GetDef');
  late final _dart_PyModule_GetDef _PyModule_GetDef =
      _PyModule_GetDef_ptr.asFunction<_dart_PyModule_GetDef>();

  ffi.Pointer<ffi.Void> PyModule_GetState(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyModule_GetState(
      arg0,
    );
  }

  late final _PyModule_GetState_ptr =
      _lookup<ffi.NativeFunction<_c_PyModule_GetState>>('PyModule_GetState');
  late final _dart_PyModule_GetState _PyModule_GetState =
      _PyModule_GetState_ptr.asFunction<_dart_PyModule_GetState>();

  ffi.Pointer<PyObject> PyModuleDef_Init(
    ffi.Pointer<PyModuleDef> arg0,
  ) {
    return _PyModuleDef_Init(
      arg0,
    );
  }

  late final _PyModuleDef_Init_ptr =
      _lookup<ffi.NativeFunction<_c_PyModuleDef_Init>>('PyModuleDef_Init');
  late final _dart_PyModuleDef_Init _PyModuleDef_Init =
      _PyModuleDef_Init_ptr.asFunction<_dart_PyModuleDef_Init>();

  late final ffi.Pointer<_typeobject> _PyModuleDef_Type =
      _lookup<_typeobject>('PyModuleDef_Type');

  _typeobject get PyModuleDef_Type => _PyModuleDef_Type.ref;

  late final ffi.Pointer<_typeobject> _PyFunction_Type =
      _lookup<_typeobject>('PyFunction_Type');

  _typeobject get PyFunction_Type => _PyFunction_Type.ref;

  ffi.Pointer<PyObject> PyFunction_New(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyFunction_New(
      arg0,
      arg1,
    );
  }

  late final _PyFunction_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyFunction_New>>('PyFunction_New');
  late final _dart_PyFunction_New _PyFunction_New =
      _PyFunction_New_ptr.asFunction<_dart_PyFunction_New>();

  ffi.Pointer<PyObject> PyFunction_NewWithQualName(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
    ffi.Pointer<PyObject> arg2,
  ) {
    return _PyFunction_NewWithQualName(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyFunction_NewWithQualName_ptr =
      _lookup<ffi.NativeFunction<_c_PyFunction_NewWithQualName>>(
          'PyFunction_NewWithQualName');
  late final _dart_PyFunction_NewWithQualName _PyFunction_NewWithQualName =
      _PyFunction_NewWithQualName_ptr.asFunction<
          _dart_PyFunction_NewWithQualName>();

  ffi.Pointer<PyObject> PyFunction_GetCode(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyFunction_GetCode(
      arg0,
    );
  }

  late final _PyFunction_GetCode_ptr =
      _lookup<ffi.NativeFunction<_c_PyFunction_GetCode>>('PyFunction_GetCode');
  late final _dart_PyFunction_GetCode _PyFunction_GetCode =
      _PyFunction_GetCode_ptr.asFunction<_dart_PyFunction_GetCode>();

  ffi.Pointer<PyObject> PyFunction_GetGlobals(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyFunction_GetGlobals(
      arg0,
    );
  }

  late final _PyFunction_GetGlobals_ptr =
      _lookup<ffi.NativeFunction<_c_PyFunction_GetGlobals>>(
          'PyFunction_GetGlobals');
  late final _dart_PyFunction_GetGlobals _PyFunction_GetGlobals =
      _PyFunction_GetGlobals_ptr.asFunction<_dart_PyFunction_GetGlobals>();

  ffi.Pointer<PyObject> PyFunction_GetModule(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyFunction_GetModule(
      arg0,
    );
  }

  late final _PyFunction_GetModule_ptr =
      _lookup<ffi.NativeFunction<_c_PyFunction_GetModule>>(
          'PyFunction_GetModule');
  late final _dart_PyFunction_GetModule _PyFunction_GetModule =
      _PyFunction_GetModule_ptr.asFunction<_dart_PyFunction_GetModule>();

  ffi.Pointer<PyObject> PyFunction_GetDefaults(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyFunction_GetDefaults(
      arg0,
    );
  }

  late final _PyFunction_GetDefaults_ptr =
      _lookup<ffi.NativeFunction<_c_PyFunction_GetDefaults>>(
          'PyFunction_GetDefaults');
  late final _dart_PyFunction_GetDefaults _PyFunction_GetDefaults =
      _PyFunction_GetDefaults_ptr.asFunction<_dart_PyFunction_GetDefaults>();

  int PyFunction_SetDefaults(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyFunction_SetDefaults(
      arg0,
      arg1,
    );
  }

  late final _PyFunction_SetDefaults_ptr =
      _lookup<ffi.NativeFunction<_c_PyFunction_SetDefaults>>(
          'PyFunction_SetDefaults');
  late final _dart_PyFunction_SetDefaults _PyFunction_SetDefaults =
      _PyFunction_SetDefaults_ptr.asFunction<_dart_PyFunction_SetDefaults>();

  ffi.Pointer<PyObject> PyFunction_GetKwDefaults(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyFunction_GetKwDefaults(
      arg0,
    );
  }

  late final _PyFunction_GetKwDefaults_ptr =
      _lookup<ffi.NativeFunction<_c_PyFunction_GetKwDefaults>>(
          'PyFunction_GetKwDefaults');
  late final _dart_PyFunction_GetKwDefaults _PyFunction_GetKwDefaults =
      _PyFunction_GetKwDefaults_ptr.asFunction<
          _dart_PyFunction_GetKwDefaults>();

  int PyFunction_SetKwDefaults(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyFunction_SetKwDefaults(
      arg0,
      arg1,
    );
  }

  late final _PyFunction_SetKwDefaults_ptr =
      _lookup<ffi.NativeFunction<_c_PyFunction_SetKwDefaults>>(
          'PyFunction_SetKwDefaults');
  late final _dart_PyFunction_SetKwDefaults _PyFunction_SetKwDefaults =
      _PyFunction_SetKwDefaults_ptr.asFunction<
          _dart_PyFunction_SetKwDefaults>();

  ffi.Pointer<PyObject> PyFunction_GetClosure(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyFunction_GetClosure(
      arg0,
    );
  }

  late final _PyFunction_GetClosure_ptr =
      _lookup<ffi.NativeFunction<_c_PyFunction_GetClosure>>(
          'PyFunction_GetClosure');
  late final _dart_PyFunction_GetClosure _PyFunction_GetClosure =
      _PyFunction_GetClosure_ptr.asFunction<_dart_PyFunction_GetClosure>();

  int PyFunction_SetClosure(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyFunction_SetClosure(
      arg0,
      arg1,
    );
  }

  late final _PyFunction_SetClosure_ptr =
      _lookup<ffi.NativeFunction<_c_PyFunction_SetClosure>>(
          'PyFunction_SetClosure');
  late final _dart_PyFunction_SetClosure _PyFunction_SetClosure =
      _PyFunction_SetClosure_ptr.asFunction<_dart_PyFunction_SetClosure>();

  ffi.Pointer<PyObject> PyFunction_GetAnnotations(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyFunction_GetAnnotations(
      arg0,
    );
  }

  late final _PyFunction_GetAnnotations_ptr =
      _lookup<ffi.NativeFunction<_c_PyFunction_GetAnnotations>>(
          'PyFunction_GetAnnotations');
  late final _dart_PyFunction_GetAnnotations _PyFunction_GetAnnotations =
      _PyFunction_GetAnnotations_ptr.asFunction<
          _dart_PyFunction_GetAnnotations>();

  int PyFunction_SetAnnotations(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyFunction_SetAnnotations(
      arg0,
      arg1,
    );
  }

  late final _PyFunction_SetAnnotations_ptr =
      _lookup<ffi.NativeFunction<_c_PyFunction_SetAnnotations>>(
          'PyFunction_SetAnnotations');
  late final _dart_PyFunction_SetAnnotations _PyFunction_SetAnnotations =
      _PyFunction_SetAnnotations_ptr.asFunction<
          _dart_PyFunction_SetAnnotations>();

  ffi.Pointer<PyObject> PyFunction_FastCallDict(
    ffi.Pointer<PyObject> func,
    ffi.Pointer<ffi.Pointer<PyObject>> args,
    int nargs,
    ffi.Pointer<PyObject> kwargs,
  ) {
    return _PyFunction_FastCallDict(
      func,
      args,
      nargs,
      kwargs,
    );
  }

  late final _PyFunction_FastCallDict_ptr =
      _lookup<ffi.NativeFunction<_c_PyFunction_FastCallDict>>(
          '_PyFunction_FastCallDict');
  late final _dart_PyFunction_FastCallDict _PyFunction_FastCallDict =
      _PyFunction_FastCallDict_ptr.asFunction<_dart_PyFunction_FastCallDict>();

  ffi.Pointer<PyObject> PyFunction_Vectorcall(
    ffi.Pointer<PyObject> func,
    ffi.Pointer<ffi.Pointer<PyObject>> stack,
    int nargsf,
    ffi.Pointer<PyObject> kwnames,
  ) {
    return _PyFunction_Vectorcall(
      func,
      stack,
      nargsf,
      kwnames,
    );
  }

  late final _PyFunction_Vectorcall_ptr =
      _lookup<ffi.NativeFunction<_c_PyFunction_Vectorcall>>(
          '_PyFunction_Vectorcall');
  late final _dart_PyFunction_Vectorcall _PyFunction_Vectorcall =
      _PyFunction_Vectorcall_ptr.asFunction<_dart_PyFunction_Vectorcall>();

  late final ffi.Pointer<_typeobject> _PyClassMethod_Type =
      _lookup<_typeobject>('PyClassMethod_Type');

  _typeobject get PyClassMethod_Type => _PyClassMethod_Type.ref;

  late final ffi.Pointer<_typeobject> _PyStaticMethod_Type =
      _lookup<_typeobject>('PyStaticMethod_Type');

  _typeobject get PyStaticMethod_Type => _PyStaticMethod_Type.ref;

  ffi.Pointer<PyObject> PyClassMethod_New(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyClassMethod_New(
      arg0,
    );
  }

  late final _PyClassMethod_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyClassMethod_New>>('PyClassMethod_New');
  late final _dart_PyClassMethod_New _PyClassMethod_New =
      _PyClassMethod_New_ptr.asFunction<_dart_PyClassMethod_New>();

  ffi.Pointer<PyObject> PyStaticMethod_New(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyStaticMethod_New(
      arg0,
    );
  }

  late final _PyStaticMethod_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyStaticMethod_New>>('PyStaticMethod_New');
  late final _dart_PyStaticMethod_New _PyStaticMethod_New =
      _PyStaticMethod_New_ptr.asFunction<_dart_PyStaticMethod_New>();

  late final ffi.Pointer<_typeobject> _PyMethod_Type =
      _lookup<_typeobject>('PyMethod_Type');

  _typeobject get PyMethod_Type => _PyMethod_Type.ref;

  ffi.Pointer<PyObject> PyMethod_New(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyMethod_New(
      arg0,
      arg1,
    );
  }

  late final _PyMethod_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyMethod_New>>('PyMethod_New');
  late final _dart_PyMethod_New _PyMethod_New =
      _PyMethod_New_ptr.asFunction<_dart_PyMethod_New>();

  ffi.Pointer<PyObject> PyMethod_Function(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyMethod_Function(
      arg0,
    );
  }

  late final _PyMethod_Function_ptr =
      _lookup<ffi.NativeFunction<_c_PyMethod_Function>>('PyMethod_Function');
  late final _dart_PyMethod_Function _PyMethod_Function =
      _PyMethod_Function_ptr.asFunction<_dart_PyMethod_Function>();

  ffi.Pointer<PyObject> PyMethod_Self(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyMethod_Self(
      arg0,
    );
  }

  late final _PyMethod_Self_ptr =
      _lookup<ffi.NativeFunction<_c_PyMethod_Self>>('PyMethod_Self');
  late final _dart_PyMethod_Self _PyMethod_Self =
      _PyMethod_Self_ptr.asFunction<_dart_PyMethod_Self>();

  int PyMethod_ClearFreeList() {
    return _PyMethod_ClearFreeList();
  }

  late final _PyMethod_ClearFreeList_ptr =
      _lookup<ffi.NativeFunction<_c_PyMethod_ClearFreeList>>(
          'PyMethod_ClearFreeList');
  late final _dart_PyMethod_ClearFreeList _PyMethod_ClearFreeList =
      _PyMethod_ClearFreeList_ptr.asFunction<_dart_PyMethod_ClearFreeList>();

  late final ffi.Pointer<_typeobject> _PyInstanceMethod_Type =
      _lookup<_typeobject>('PyInstanceMethod_Type');

  _typeobject get PyInstanceMethod_Type => _PyInstanceMethod_Type.ref;

  ffi.Pointer<PyObject> PyInstanceMethod_New(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyInstanceMethod_New(
      arg0,
    );
  }

  late final _PyInstanceMethod_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyInstanceMethod_New>>(
          'PyInstanceMethod_New');
  late final _dart_PyInstanceMethod_New _PyInstanceMethod_New =
      _PyInstanceMethod_New_ptr.asFunction<_dart_PyInstanceMethod_New>();

  ffi.Pointer<PyObject> PyInstanceMethod_Function(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyInstanceMethod_Function(
      arg0,
    );
  }

  late final _PyInstanceMethod_Function_ptr =
      _lookup<ffi.NativeFunction<_c_PyInstanceMethod_Function>>(
          'PyInstanceMethod_Function');
  late final _dart_PyInstanceMethod_Function _PyInstanceMethod_Function =
      _PyInstanceMethod_Function_ptr.asFunction<
          _dart_PyInstanceMethod_Function>();

  ffi.Pointer<PyObject> PyFile_FromFd(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    int arg3,
    ffi.Pointer<ffi.Int8> arg4,
    ffi.Pointer<ffi.Int8> arg5,
    ffi.Pointer<ffi.Int8> arg6,
    int arg7,
  ) {
    return _PyFile_FromFd(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _PyFile_FromFd_ptr =
      _lookup<ffi.NativeFunction<_c_PyFile_FromFd>>('PyFile_FromFd');
  late final _dart_PyFile_FromFd _PyFile_FromFd =
      _PyFile_FromFd_ptr.asFunction<_dart_PyFile_FromFd>();

  ffi.Pointer<PyObject> PyFile_GetLine(
    ffi.Pointer<PyObject> arg0,
    int arg1,
  ) {
    return _PyFile_GetLine(
      arg0,
      arg1,
    );
  }

  late final _PyFile_GetLine_ptr =
      _lookup<ffi.NativeFunction<_c_PyFile_GetLine>>('PyFile_GetLine');
  late final _dart_PyFile_GetLine _PyFile_GetLine =
      _PyFile_GetLine_ptr.asFunction<_dart_PyFile_GetLine>();

  int PyFile_WriteObject(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
    int arg2,
  ) {
    return _PyFile_WriteObject(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyFile_WriteObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyFile_WriteObject>>('PyFile_WriteObject');
  late final _dart_PyFile_WriteObject _PyFile_WriteObject =
      _PyFile_WriteObject_ptr.asFunction<_dart_PyFile_WriteObject>();

  int PyFile_WriteString(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyFile_WriteString(
      arg0,
      arg1,
    );
  }

  late final _PyFile_WriteString_ptr =
      _lookup<ffi.NativeFunction<_c_PyFile_WriteString>>('PyFile_WriteString');
  late final _dart_PyFile_WriteString _PyFile_WriteString =
      _PyFile_WriteString_ptr.asFunction<_dart_PyFile_WriteString>();

  int PyObject_AsFileDescriptor(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyObject_AsFileDescriptor(
      arg0,
    );
  }

  late final _PyObject_AsFileDescriptor_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_AsFileDescriptor>>(
          'PyObject_AsFileDescriptor');
  late final _dart_PyObject_AsFileDescriptor _PyObject_AsFileDescriptor =
      _PyObject_AsFileDescriptor_ptr.asFunction<
          _dart_PyObject_AsFileDescriptor>();

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _Py_FileSystemDefaultEncoding =
      _lookup<ffi.Pointer<ffi.Int8>>('Py_FileSystemDefaultEncoding');

  ffi.Pointer<ffi.Int8> get Py_FileSystemDefaultEncoding =>
      _Py_FileSystemDefaultEncoding.value;

  set Py_FileSystemDefaultEncoding(ffi.Pointer<ffi.Int8> value) =>
      _Py_FileSystemDefaultEncoding.value = value;

  late final ffi.Pointer<ffi.Int32> _Py_HasFileSystemDefaultEncoding =
      _lookup<ffi.Int32>('Py_HasFileSystemDefaultEncoding');

  int get Py_HasFileSystemDefaultEncoding =>
      _Py_HasFileSystemDefaultEncoding.value;

  set Py_HasFileSystemDefaultEncoding(int value) =>
      _Py_HasFileSystemDefaultEncoding.value = value;

  late final ffi.Pointer<_typeobject> _PyCapsule_Type =
      _lookup<_typeobject>('PyCapsule_Type');

  _typeobject get PyCapsule_Type => _PyCapsule_Type.ref;

  ffi.Pointer<PyObject> PyCapsule_New(
    ffi.Pointer<ffi.Void> pointer,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.NativeFunction<PyCapsule_Destructor>> destructor,
  ) {
    return _PyCapsule_New(
      pointer,
      name,
      destructor,
    );
  }

  late final _PyCapsule_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyCapsule_New>>('PyCapsule_New');
  late final _dart_PyCapsule_New _PyCapsule_New =
      _PyCapsule_New_ptr.asFunction<_dart_PyCapsule_New>();

  ffi.Pointer<ffi.Void> PyCapsule_GetPointer(
    ffi.Pointer<PyObject> capsule,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _PyCapsule_GetPointer(
      capsule,
      name,
    );
  }

  late final _PyCapsule_GetPointer_ptr =
      _lookup<ffi.NativeFunction<_c_PyCapsule_GetPointer>>(
          'PyCapsule_GetPointer');
  late final _dart_PyCapsule_GetPointer _PyCapsule_GetPointer =
      _PyCapsule_GetPointer_ptr.asFunction<_dart_PyCapsule_GetPointer>();

  ffi.Pointer<ffi.NativeFunction<PyCapsule_Destructor>> PyCapsule_GetDestructor(
    ffi.Pointer<PyObject> capsule,
  ) {
    return _PyCapsule_GetDestructor(
      capsule,
    );
  }

  late final _PyCapsule_GetDestructor_ptr =
      _lookup<ffi.NativeFunction<_c_PyCapsule_GetDestructor>>(
          'PyCapsule_GetDestructor');
  late final _dart_PyCapsule_GetDestructor _PyCapsule_GetDestructor =
      _PyCapsule_GetDestructor_ptr.asFunction<_dart_PyCapsule_GetDestructor>();

  ffi.Pointer<ffi.Int8> PyCapsule_GetName(
    ffi.Pointer<PyObject> capsule,
  ) {
    return _PyCapsule_GetName(
      capsule,
    );
  }

  late final _PyCapsule_GetName_ptr =
      _lookup<ffi.NativeFunction<_c_PyCapsule_GetName>>('PyCapsule_GetName');
  late final _dart_PyCapsule_GetName _PyCapsule_GetName =
      _PyCapsule_GetName_ptr.asFunction<_dart_PyCapsule_GetName>();

  ffi.Pointer<ffi.Void> PyCapsule_GetContext(
    ffi.Pointer<PyObject> capsule,
  ) {
    return _PyCapsule_GetContext(
      capsule,
    );
  }

  late final _PyCapsule_GetContext_ptr =
      _lookup<ffi.NativeFunction<_c_PyCapsule_GetContext>>(
          'PyCapsule_GetContext');
  late final _dart_PyCapsule_GetContext _PyCapsule_GetContext =
      _PyCapsule_GetContext_ptr.asFunction<_dart_PyCapsule_GetContext>();

  int PyCapsule_IsValid(
    ffi.Pointer<PyObject> capsule,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _PyCapsule_IsValid(
      capsule,
      name,
    );
  }

  late final _PyCapsule_IsValid_ptr =
      _lookup<ffi.NativeFunction<_c_PyCapsule_IsValid>>('PyCapsule_IsValid');
  late final _dart_PyCapsule_IsValid _PyCapsule_IsValid =
      _PyCapsule_IsValid_ptr.asFunction<_dart_PyCapsule_IsValid>();

  int PyCapsule_SetPointer(
    ffi.Pointer<PyObject> capsule,
    ffi.Pointer<ffi.Void> pointer,
  ) {
    return _PyCapsule_SetPointer(
      capsule,
      pointer,
    );
  }

  late final _PyCapsule_SetPointer_ptr =
      _lookup<ffi.NativeFunction<_c_PyCapsule_SetPointer>>(
          'PyCapsule_SetPointer');
  late final _dart_PyCapsule_SetPointer _PyCapsule_SetPointer =
      _PyCapsule_SetPointer_ptr.asFunction<_dart_PyCapsule_SetPointer>();

  int PyCapsule_SetDestructor(
    ffi.Pointer<PyObject> capsule,
    ffi.Pointer<ffi.NativeFunction<PyCapsule_Destructor>> destructor,
  ) {
    return _PyCapsule_SetDestructor(
      capsule,
      destructor,
    );
  }

  late final _PyCapsule_SetDestructor_ptr =
      _lookup<ffi.NativeFunction<_c_PyCapsule_SetDestructor>>(
          'PyCapsule_SetDestructor');
  late final _dart_PyCapsule_SetDestructor _PyCapsule_SetDestructor =
      _PyCapsule_SetDestructor_ptr.asFunction<_dart_PyCapsule_SetDestructor>();

  int PyCapsule_SetName(
    ffi.Pointer<PyObject> capsule,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _PyCapsule_SetName(
      capsule,
      name,
    );
  }

  late final _PyCapsule_SetName_ptr =
      _lookup<ffi.NativeFunction<_c_PyCapsule_SetName>>('PyCapsule_SetName');
  late final _dart_PyCapsule_SetName _PyCapsule_SetName =
      _PyCapsule_SetName_ptr.asFunction<_dart_PyCapsule_SetName>();

  int PyCapsule_SetContext(
    ffi.Pointer<PyObject> capsule,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _PyCapsule_SetContext(
      capsule,
      context,
    );
  }

  late final _PyCapsule_SetContext_ptr =
      _lookup<ffi.NativeFunction<_c_PyCapsule_SetContext>>(
          'PyCapsule_SetContext');
  late final _dart_PyCapsule_SetContext _PyCapsule_SetContext =
      _PyCapsule_SetContext_ptr.asFunction<_dart_PyCapsule_SetContext>();

  ffi.Pointer<ffi.Void> PyCapsule_Import(
    ffi.Pointer<ffi.Int8> name,
    int no_block,
  ) {
    return _PyCapsule_Import(
      name,
      no_block,
    );
  }

  late final _PyCapsule_Import_ptr =
      _lookup<ffi.NativeFunction<_c_PyCapsule_Import>>('PyCapsule_Import');
  late final _dart_PyCapsule_Import _PyCapsule_Import =
      _PyCapsule_Import_ptr.asFunction<_dart_PyCapsule_Import>();

  int PyTraceBack_Here(
    ffi.Pointer<_frame> arg0,
  ) {
    return _PyTraceBack_Here(
      arg0,
    );
  }

  late final _PyTraceBack_Here_ptr =
      _lookup<ffi.NativeFunction<_c_PyTraceBack_Here>>('PyTraceBack_Here');
  late final _dart_PyTraceBack_Here _PyTraceBack_Here =
      _PyTraceBack_Here_ptr.asFunction<_dart_PyTraceBack_Here>();

  int PyTraceBack_Print(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyTraceBack_Print(
      arg0,
      arg1,
    );
  }

  late final _PyTraceBack_Print_ptr =
      _lookup<ffi.NativeFunction<_c_PyTraceBack_Print>>('PyTraceBack_Print');
  late final _dart_PyTraceBack_Print _PyTraceBack_Print =
      _PyTraceBack_Print_ptr.asFunction<_dart_PyTraceBack_Print>();

  late final ffi.Pointer<_typeobject> _PyTraceBack_Type =
      _lookup<_typeobject>('PyTraceBack_Type');

  _typeobject get PyTraceBack_Type => _PyTraceBack_Type.ref;

  late final ffi.Pointer<PyObject> _Py_EllipsisObject =
      _lookup<PyObject>('_Py_EllipsisObject');

  PyObject get Py_EllipsisObject => _Py_EllipsisObject.ref;

  late final ffi.Pointer<_typeobject> _PySlice_Type =
      _lookup<_typeobject>('PySlice_Type');

  _typeobject get PySlice_Type => _PySlice_Type.ref;

  late final ffi.Pointer<_typeobject> _PyEllipsis_Type =
      _lookup<_typeobject>('PyEllipsis_Type');

  _typeobject get PyEllipsis_Type => _PyEllipsis_Type.ref;

  ffi.Pointer<PyObject> PySlice_New(
    ffi.Pointer<PyObject> start,
    ffi.Pointer<PyObject> stop,
    ffi.Pointer<PyObject> step,
  ) {
    return _PySlice_New(
      start,
      stop,
      step,
    );
  }

  late final _PySlice_New_ptr =
      _lookup<ffi.NativeFunction<_c_PySlice_New>>('PySlice_New');
  late final _dart_PySlice_New _PySlice_New =
      _PySlice_New_ptr.asFunction<_dart_PySlice_New>();

  ffi.Pointer<PyObject> PySlice_FromIndices(
    int start,
    int stop,
  ) {
    return _PySlice_FromIndices(
      start,
      stop,
    );
  }

  late final _PySlice_FromIndices_ptr =
      _lookup<ffi.NativeFunction<_c_PySlice_FromIndices>>(
          '_PySlice_FromIndices');
  late final _dart_PySlice_FromIndices _PySlice_FromIndices =
      _PySlice_FromIndices_ptr.asFunction<_dart_PySlice_FromIndices>();

  int PySlice_GetLongIndices(
    ffi.Pointer<PySliceObject> self,
    ffi.Pointer<PyObject> length,
    ffi.Pointer<ffi.Pointer<PyObject>> start_ptr,
    ffi.Pointer<ffi.Pointer<PyObject>> stop_ptr,
    ffi.Pointer<ffi.Pointer<PyObject>> step_ptr,
  ) {
    return _PySlice_GetLongIndices(
      self,
      length,
      start_ptr,
      stop_ptr,
      step_ptr,
    );
  }

  late final _PySlice_GetLongIndices_ptr =
      _lookup<ffi.NativeFunction<_c_PySlice_GetLongIndices>>(
          '_PySlice_GetLongIndices');
  late final _dart_PySlice_GetLongIndices _PySlice_GetLongIndices =
      _PySlice_GetLongIndices_ptr.asFunction<_dart_PySlice_GetLongIndices>();

  int PySlice_GetIndices(
    ffi.Pointer<PyObject> r,
    int length,
    ffi.Pointer<ffi.Int64> start,
    ffi.Pointer<ffi.Int64> stop,
    ffi.Pointer<ffi.Int64> step,
  ) {
    return _PySlice_GetIndices(
      r,
      length,
      start,
      stop,
      step,
    );
  }

  late final _PySlice_GetIndices_ptr =
      _lookup<ffi.NativeFunction<_c_PySlice_GetIndices>>('PySlice_GetIndices');
  late final _dart_PySlice_GetIndices _PySlice_GetIndices =
      _PySlice_GetIndices_ptr.asFunction<_dart_PySlice_GetIndices>();

  int PySlice_GetIndicesEx(
    ffi.Pointer<PyObject> r,
    int length,
    ffi.Pointer<ffi.Int64> start,
    ffi.Pointer<ffi.Int64> stop,
    ffi.Pointer<ffi.Int64> step,
    ffi.Pointer<ffi.Int64> slicelength,
  ) {
    return _PySlice_GetIndicesEx(
      r,
      length,
      start,
      stop,
      step,
      slicelength,
    );
  }

  late final _PySlice_GetIndicesEx_ptr =
      _lookup<ffi.NativeFunction<_c_PySlice_GetIndicesEx>>(
          'PySlice_GetIndicesEx');
  late final _dart_PySlice_GetIndicesEx _PySlice_GetIndicesEx =
      _PySlice_GetIndicesEx_ptr.asFunction<_dart_PySlice_GetIndicesEx>();

  int PySlice_Unpack(
    ffi.Pointer<PyObject> slice,
    ffi.Pointer<ffi.Int64> start,
    ffi.Pointer<ffi.Int64> stop,
    ffi.Pointer<ffi.Int64> step,
  ) {
    return _PySlice_Unpack(
      slice,
      start,
      stop,
      step,
    );
  }

  late final _PySlice_Unpack_ptr =
      _lookup<ffi.NativeFunction<_c_PySlice_Unpack>>('PySlice_Unpack');
  late final _dart_PySlice_Unpack _PySlice_Unpack =
      _PySlice_Unpack_ptr.asFunction<_dart_PySlice_Unpack>();

  int PySlice_AdjustIndices(
    int length,
    ffi.Pointer<ffi.Int64> start,
    ffi.Pointer<ffi.Int64> stop,
    int step,
  ) {
    return _PySlice_AdjustIndices(
      length,
      start,
      stop,
      step,
    );
  }

  late final _PySlice_AdjustIndices_ptr =
      _lookup<ffi.NativeFunction<_c_PySlice_AdjustIndices>>(
          'PySlice_AdjustIndices');
  late final _dart_PySlice_AdjustIndices _PySlice_AdjustIndices =
      _PySlice_AdjustIndices_ptr.asFunction<_dart_PySlice_AdjustIndices>();

  late final ffi.Pointer<_typeobject> _PyCell_Type =
      _lookup<_typeobject>('PyCell_Type');

  _typeobject get PyCell_Type => _PyCell_Type.ref;

  ffi.Pointer<PyObject> PyCell_New(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyCell_New(
      arg0,
    );
  }

  late final _PyCell_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyCell_New>>('PyCell_New');
  late final _dart_PyCell_New _PyCell_New =
      _PyCell_New_ptr.asFunction<_dart_PyCell_New>();

  ffi.Pointer<PyObject> PyCell_Get(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyCell_Get(
      arg0,
    );
  }

  late final _PyCell_Get_ptr =
      _lookup<ffi.NativeFunction<_c_PyCell_Get>>('PyCell_Get');
  late final _dart_PyCell_Get _PyCell_Get =
      _PyCell_Get_ptr.asFunction<_dart_PyCell_Get>();

  int PyCell_Set(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyCell_Set(
      arg0,
      arg1,
    );
  }

  late final _PyCell_Set_ptr =
      _lookup<ffi.NativeFunction<_c_PyCell_Set>>('PyCell_Set');
  late final _dart_PyCell_Set _PyCell_Set =
      _PyCell_Set_ptr.asFunction<_dart_PyCell_Set>();

  late final ffi.Pointer<_typeobject> _PySeqIter_Type =
      _lookup<_typeobject>('PySeqIter_Type');

  _typeobject get PySeqIter_Type => _PySeqIter_Type.ref;

  late final ffi.Pointer<_typeobject> _PyCallIter_Type =
      _lookup<_typeobject>('PyCallIter_Type');

  _typeobject get PyCallIter_Type => _PyCallIter_Type.ref;

  late final ffi.Pointer<_typeobject> _PyCmpWrapper_Type =
      _lookup<_typeobject>('PyCmpWrapper_Type');

  _typeobject get PyCmpWrapper_Type => _PyCmpWrapper_Type.ref;

  ffi.Pointer<PyObject> PySeqIter_New(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PySeqIter_New(
      arg0,
    );
  }

  late final _PySeqIter_New_ptr =
      _lookup<ffi.NativeFunction<_c_PySeqIter_New>>('PySeqIter_New');
  late final _dart_PySeqIter_New _PySeqIter_New =
      _PySeqIter_New_ptr.asFunction<_dart_PySeqIter_New>();

  ffi.Pointer<PyObject> PyCallIter_New(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyCallIter_New(
      arg0,
      arg1,
    );
  }

  late final _PyCallIter_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyCallIter_New>>('PyCallIter_New');
  late final _dart_PyCallIter_New _PyCallIter_New =
      _PyCallIter_New_ptr.asFunction<_dart_PyCallIter_New>();

  void PyThread_init_thread() {
    return _PyThread_init_thread();
  }

  late final _PyThread_init_thread_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_init_thread>>(
          'PyThread_init_thread');
  late final _dart_PyThread_init_thread _PyThread_init_thread =
      _PyThread_init_thread_ptr.asFunction<_dart_PyThread_init_thread>();

  int PyThread_start_new_thread(
    ffi.Pointer<ffi.NativeFunction<_typedefC_4>> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _PyThread_start_new_thread(
      arg0,
      arg1,
    );
  }

  late final _PyThread_start_new_thread_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_start_new_thread>>(
          'PyThread_start_new_thread');
  late final _dart_PyThread_start_new_thread _PyThread_start_new_thread =
      _PyThread_start_new_thread_ptr.asFunction<
          _dart_PyThread_start_new_thread>();

  void PyThread_exit_thread() {
    return _PyThread_exit_thread();
  }

  late final _PyThread_exit_thread_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_exit_thread>>(
          'PyThread_exit_thread');
  late final _dart_PyThread_exit_thread _PyThread_exit_thread =
      _PyThread_exit_thread_ptr.asFunction<_dart_PyThread_exit_thread>();

  int PyThread_get_thread_ident() {
    return _PyThread_get_thread_ident();
  }

  late final _PyThread_get_thread_ident_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_get_thread_ident>>(
          'PyThread_get_thread_ident');
  late final _dart_PyThread_get_thread_ident _PyThread_get_thread_ident =
      _PyThread_get_thread_ident_ptr.asFunction<
          _dart_PyThread_get_thread_ident>();

  int PyThread_get_thread_native_id() {
    return _PyThread_get_thread_native_id();
  }

  late final _PyThread_get_thread_native_id_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_get_thread_native_id>>(
          'PyThread_get_thread_native_id');
  late final _dart_PyThread_get_thread_native_id
      _PyThread_get_thread_native_id = _PyThread_get_thread_native_id_ptr
          .asFunction<_dart_PyThread_get_thread_native_id>();

  ffi.Pointer<ffi.Void> PyThread_allocate_lock() {
    return _PyThread_allocate_lock();
  }

  late final _PyThread_allocate_lock_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_allocate_lock>>(
          'PyThread_allocate_lock');
  late final _dart_PyThread_allocate_lock _PyThread_allocate_lock =
      _PyThread_allocate_lock_ptr.asFunction<_dart_PyThread_allocate_lock>();

  void PyThread_free_lock(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _PyThread_free_lock(
      arg0,
    );
  }

  late final _PyThread_free_lock_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_free_lock>>('PyThread_free_lock');
  late final _dart_PyThread_free_lock _PyThread_free_lock =
      _PyThread_free_lock_ptr.asFunction<_dart_PyThread_free_lock>();

  int PyThread_acquire_lock(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _PyThread_acquire_lock(
      arg0,
      arg1,
    );
  }

  late final _PyThread_acquire_lock_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_acquire_lock>>(
          'PyThread_acquire_lock');
  late final _dart_PyThread_acquire_lock _PyThread_acquire_lock =
      _PyThread_acquire_lock_ptr.asFunction<_dart_PyThread_acquire_lock>();

  int PyThread_acquire_lock_timed(
    ffi.Pointer<ffi.Void> arg0,
    int microseconds,
    int intr_flag,
  ) {
    return _PyThread_acquire_lock_timed(
      arg0,
      microseconds,
      intr_flag,
    );
  }

  late final _PyThread_acquire_lock_timed_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_acquire_lock_timed>>(
          'PyThread_acquire_lock_timed');
  late final _dart_PyThread_acquire_lock_timed _PyThread_acquire_lock_timed =
      _PyThread_acquire_lock_timed_ptr.asFunction<
          _dart_PyThread_acquire_lock_timed>();

  void PyThread_release_lock(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _PyThread_release_lock(
      arg0,
    );
  }

  late final _PyThread_release_lock_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_release_lock>>(
          'PyThread_release_lock');
  late final _dart_PyThread_release_lock _PyThread_release_lock =
      _PyThread_release_lock_ptr.asFunction<_dart_PyThread_release_lock>();

  int PyThread_get_stacksize() {
    return _PyThread_get_stacksize();
  }

  late final _PyThread_get_stacksize_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_get_stacksize>>(
          'PyThread_get_stacksize');
  late final _dart_PyThread_get_stacksize _PyThread_get_stacksize =
      _PyThread_get_stacksize_ptr.asFunction<_dart_PyThread_get_stacksize>();

  int PyThread_set_stacksize(
    int arg0,
  ) {
    return _PyThread_set_stacksize(
      arg0,
    );
  }

  late final _PyThread_set_stacksize_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_set_stacksize>>(
          'PyThread_set_stacksize');
  late final _dart_PyThread_set_stacksize _PyThread_set_stacksize =
      _PyThread_set_stacksize_ptr.asFunction<_dart_PyThread_set_stacksize>();

  ffi.Pointer<PyObject> PyThread_GetInfo() {
    return _PyThread_GetInfo();
  }

  late final _PyThread_GetInfo_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_GetInfo>>('PyThread_GetInfo');
  late final _dart_PyThread_GetInfo _PyThread_GetInfo =
      _PyThread_GetInfo_ptr.asFunction<_dart_PyThread_GetInfo>();

  int PyThread_create_key() {
    return _PyThread_create_key();
  }

  late final _PyThread_create_key_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_create_key>>(
          'PyThread_create_key');
  late final _dart_PyThread_create_key _PyThread_create_key =
      _PyThread_create_key_ptr.asFunction<_dart_PyThread_create_key>();

  void PyThread_delete_key(
    int key,
  ) {
    return _PyThread_delete_key(
      key,
    );
  }

  late final _PyThread_delete_key_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_delete_key>>(
          'PyThread_delete_key');
  late final _dart_PyThread_delete_key _PyThread_delete_key =
      _PyThread_delete_key_ptr.asFunction<_dart_PyThread_delete_key>();

  int PyThread_set_key_value(
    int key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _PyThread_set_key_value(
      key,
      value,
    );
  }

  late final _PyThread_set_key_value_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_set_key_value>>(
          'PyThread_set_key_value');
  late final _dart_PyThread_set_key_value _PyThread_set_key_value =
      _PyThread_set_key_value_ptr.asFunction<_dart_PyThread_set_key_value>();

  ffi.Pointer<ffi.Void> PyThread_get_key_value(
    int key,
  ) {
    return _PyThread_get_key_value(
      key,
    );
  }

  late final _PyThread_get_key_value_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_get_key_value>>(
          'PyThread_get_key_value');
  late final _dart_PyThread_get_key_value _PyThread_get_key_value =
      _PyThread_get_key_value_ptr.asFunction<_dart_PyThread_get_key_value>();

  void PyThread_delete_key_value(
    int key,
  ) {
    return _PyThread_delete_key_value(
      key,
    );
  }

  late final _PyThread_delete_key_value_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_delete_key_value>>(
          'PyThread_delete_key_value');
  late final _dart_PyThread_delete_key_value _PyThread_delete_key_value =
      _PyThread_delete_key_value_ptr.asFunction<
          _dart_PyThread_delete_key_value>();

  void PyThread_ReInitTLS() {
    return _PyThread_ReInitTLS();
  }

  late final _PyThread_ReInitTLS_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_ReInitTLS>>('PyThread_ReInitTLS');
  late final _dart_PyThread_ReInitTLS _PyThread_ReInitTLS =
      _PyThread_ReInitTLS_ptr.asFunction<_dart_PyThread_ReInitTLS>();

  ffi.Pointer<_Py_tss_t> PyThread_tss_alloc() {
    return _PyThread_tss_alloc();
  }

  late final _PyThread_tss_alloc_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_tss_alloc>>('PyThread_tss_alloc');
  late final _dart_PyThread_tss_alloc _PyThread_tss_alloc =
      _PyThread_tss_alloc_ptr.asFunction<_dart_PyThread_tss_alloc>();

  void PyThread_tss_free(
    ffi.Pointer<_Py_tss_t> key,
  ) {
    return _PyThread_tss_free(
      key,
    );
  }

  late final _PyThread_tss_free_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_tss_free>>('PyThread_tss_free');
  late final _dart_PyThread_tss_free _PyThread_tss_free =
      _PyThread_tss_free_ptr.asFunction<_dart_PyThread_tss_free>();

  int PyThread_tss_is_created(
    ffi.Pointer<_Py_tss_t> key,
  ) {
    return _PyThread_tss_is_created(
      key,
    );
  }

  late final _PyThread_tss_is_created_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_tss_is_created>>(
          'PyThread_tss_is_created');
  late final _dart_PyThread_tss_is_created _PyThread_tss_is_created =
      _PyThread_tss_is_created_ptr.asFunction<_dart_PyThread_tss_is_created>();

  int PyThread_tss_create(
    ffi.Pointer<_Py_tss_t> key,
  ) {
    return _PyThread_tss_create(
      key,
    );
  }

  late final _PyThread_tss_create_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_tss_create>>(
          'PyThread_tss_create');
  late final _dart_PyThread_tss_create _PyThread_tss_create =
      _PyThread_tss_create_ptr.asFunction<_dart_PyThread_tss_create>();

  void PyThread_tss_delete(
    ffi.Pointer<_Py_tss_t> key,
  ) {
    return _PyThread_tss_delete(
      key,
    );
  }

  late final _PyThread_tss_delete_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_tss_delete>>(
          'PyThread_tss_delete');
  late final _dart_PyThread_tss_delete _PyThread_tss_delete =
      _PyThread_tss_delete_ptr.asFunction<_dart_PyThread_tss_delete>();

  int PyThread_tss_set(
    ffi.Pointer<_Py_tss_t> key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _PyThread_tss_set(
      key,
      value,
    );
  }

  late final _PyThread_tss_set_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_tss_set>>('PyThread_tss_set');
  late final _dart_PyThread_tss_set _PyThread_tss_set =
      _PyThread_tss_set_ptr.asFunction<_dart_PyThread_tss_set>();

  ffi.Pointer<ffi.Void> PyThread_tss_get(
    ffi.Pointer<_Py_tss_t> key,
  ) {
    return _PyThread_tss_get(
      key,
    );
  }

  late final _PyThread_tss_get_ptr =
      _lookup<ffi.NativeFunction<_c_PyThread_tss_get>>('PyThread_tss_get');
  late final _dart_PyThread_tss_get _PyThread_tss_get =
      _PyThread_tss_get_ptr.asFunction<_dart_PyThread_tss_get>();

  ffi.Pointer<_is> PyInterpreterState_New() {
    return _PyInterpreterState_New();
  }

  late final _PyInterpreterState_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyInterpreterState_New>>(
          'PyInterpreterState_New');
  late final _dart_PyInterpreterState_New _PyInterpreterState_New =
      _PyInterpreterState_New_ptr.asFunction<_dart_PyInterpreterState_New>();

  void PyInterpreterState_Clear(
    ffi.Pointer<_is> arg0,
  ) {
    return _PyInterpreterState_Clear(
      arg0,
    );
  }

  late final _PyInterpreterState_Clear_ptr =
      _lookup<ffi.NativeFunction<_c_PyInterpreterState_Clear>>(
          'PyInterpreterState_Clear');
  late final _dart_PyInterpreterState_Clear _PyInterpreterState_Clear =
      _PyInterpreterState_Clear_ptr.asFunction<
          _dart_PyInterpreterState_Clear>();

  void PyInterpreterState_Delete(
    ffi.Pointer<_is> arg0,
  ) {
    return _PyInterpreterState_Delete(
      arg0,
    );
  }

  late final _PyInterpreterState_Delete_ptr =
      _lookup<ffi.NativeFunction<_c_PyInterpreterState_Delete>>(
          'PyInterpreterState_Delete');
  late final _dart_PyInterpreterState_Delete _PyInterpreterState_Delete =
      _PyInterpreterState_Delete_ptr.asFunction<
          _dart_PyInterpreterState_Delete>();

  ffi.Pointer<PyObject> PyInterpreterState_GetDict(
    ffi.Pointer<_is> arg0,
  ) {
    return _PyInterpreterState_GetDict(
      arg0,
    );
  }

  late final _PyInterpreterState_GetDict_ptr =
      _lookup<ffi.NativeFunction<_c_PyInterpreterState_GetDict>>(
          'PyInterpreterState_GetDict');
  late final _dart_PyInterpreterState_GetDict _PyInterpreterState_GetDict =
      _PyInterpreterState_GetDict_ptr.asFunction<
          _dart_PyInterpreterState_GetDict>();

  int PyInterpreterState_GetID(
    ffi.Pointer<_is> arg0,
  ) {
    return _PyInterpreterState_GetID(
      arg0,
    );
  }

  late final _PyInterpreterState_GetID_ptr =
      _lookup<ffi.NativeFunction<_c_PyInterpreterState_GetID>>(
          'PyInterpreterState_GetID');
  late final _dart_PyInterpreterState_GetID _PyInterpreterState_GetID =
      _PyInterpreterState_GetID_ptr.asFunction<
          _dart_PyInterpreterState_GetID>();

  int PyState_AddModule(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyModuleDef> arg1,
  ) {
    return _PyState_AddModule(
      arg0,
      arg1,
    );
  }

  late final _PyState_AddModule_ptr =
      _lookup<ffi.NativeFunction<_c_PyState_AddModule>>('PyState_AddModule');
  late final _dart_PyState_AddModule _PyState_AddModule =
      _PyState_AddModule_ptr.asFunction<_dart_PyState_AddModule>();

  int PyState_RemoveModule(
    ffi.Pointer<PyModuleDef> arg0,
  ) {
    return _PyState_RemoveModule(
      arg0,
    );
  }

  late final _PyState_RemoveModule_ptr =
      _lookup<ffi.NativeFunction<_c_PyState_RemoveModule>>(
          'PyState_RemoveModule');
  late final _dart_PyState_RemoveModule _PyState_RemoveModule =
      _PyState_RemoveModule_ptr.asFunction<_dart_PyState_RemoveModule>();

  ffi.Pointer<PyObject> PyState_FindModule(
    ffi.Pointer<PyModuleDef> arg0,
  ) {
    return _PyState_FindModule(
      arg0,
    );
  }

  late final _PyState_FindModule_ptr =
      _lookup<ffi.NativeFunction<_c_PyState_FindModule>>('PyState_FindModule');
  late final _dart_PyState_FindModule _PyState_FindModule =
      _PyState_FindModule_ptr.asFunction<_dart_PyState_FindModule>();

  ffi.Pointer<_ts> PyThreadState_New(
    ffi.Pointer<_is> arg0,
  ) {
    return _PyThreadState_New(
      arg0,
    );
  }

  late final _PyThreadState_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyThreadState_New>>('PyThreadState_New');
  late final _dart_PyThreadState_New _PyThreadState_New =
      _PyThreadState_New_ptr.asFunction<_dart_PyThreadState_New>();

  void PyThreadState_Clear(
    ffi.Pointer<_ts> arg0,
  ) {
    return _PyThreadState_Clear(
      arg0,
    );
  }

  late final _PyThreadState_Clear_ptr =
      _lookup<ffi.NativeFunction<_c_PyThreadState_Clear>>(
          'PyThreadState_Clear');
  late final _dart_PyThreadState_Clear _PyThreadState_Clear =
      _PyThreadState_Clear_ptr.asFunction<_dart_PyThreadState_Clear>();

  void PyThreadState_Delete(
    ffi.Pointer<_ts> arg0,
  ) {
    return _PyThreadState_Delete(
      arg0,
    );
  }

  late final _PyThreadState_Delete_ptr =
      _lookup<ffi.NativeFunction<_c_PyThreadState_Delete>>(
          'PyThreadState_Delete');
  late final _dart_PyThreadState_Delete _PyThreadState_Delete =
      _PyThreadState_Delete_ptr.asFunction<_dart_PyThreadState_Delete>();

  void PyThreadState_DeleteCurrent() {
    return _PyThreadState_DeleteCurrent();
  }

  late final _PyThreadState_DeleteCurrent_ptr =
      _lookup<ffi.NativeFunction<_c_PyThreadState_DeleteCurrent>>(
          'PyThreadState_DeleteCurrent');
  late final _dart_PyThreadState_DeleteCurrent _PyThreadState_DeleteCurrent =
      _PyThreadState_DeleteCurrent_ptr.asFunction<
          _dart_PyThreadState_DeleteCurrent>();

  ffi.Pointer<_ts> PyThreadState_Get() {
    return _PyThreadState_Get();
  }

  late final _PyThreadState_Get_ptr =
      _lookup<ffi.NativeFunction<_c_PyThreadState_Get>>('PyThreadState_Get');
  late final _dart_PyThreadState_Get _PyThreadState_Get =
      _PyThreadState_Get_ptr.asFunction<_dart_PyThreadState_Get>();

  ffi.Pointer<_ts> PyThreadState_Swap(
    ffi.Pointer<_ts> arg0,
  ) {
    return _PyThreadState_Swap(
      arg0,
    );
  }

  late final _PyThreadState_Swap_ptr =
      _lookup<ffi.NativeFunction<_c_PyThreadState_Swap>>('PyThreadState_Swap');
  late final _dart_PyThreadState_Swap _PyThreadState_Swap =
      _PyThreadState_Swap_ptr.asFunction<_dart_PyThreadState_Swap>();

  ffi.Pointer<PyObject> PyThreadState_GetDict() {
    return _PyThreadState_GetDict();
  }

  late final _PyThreadState_GetDict_ptr =
      _lookup<ffi.NativeFunction<_c_PyThreadState_GetDict>>(
          'PyThreadState_GetDict');
  late final _dart_PyThreadState_GetDict _PyThreadState_GetDict =
      _PyThreadState_GetDict_ptr.asFunction<_dart_PyThreadState_GetDict>();

  int PyThreadState_SetAsyncExc(
    int arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyThreadState_SetAsyncExc(
      arg0,
      arg1,
    );
  }

  late final _PyThreadState_SetAsyncExc_ptr =
      _lookup<ffi.NativeFunction<_c_PyThreadState_SetAsyncExc>>(
          'PyThreadState_SetAsyncExc');
  late final _dart_PyThreadState_SetAsyncExc _PyThreadState_SetAsyncExc =
      _PyThreadState_SetAsyncExc_ptr.asFunction<
          _dart_PyThreadState_SetAsyncExc>();

  int PyGILState_Ensure() {
    return _PyGILState_Ensure();
  }

  late final _PyGILState_Ensure_ptr =
      _lookup<ffi.NativeFunction<_c_PyGILState_Ensure>>('PyGILState_Ensure');
  late final _dart_PyGILState_Ensure _PyGILState_Ensure =
      _PyGILState_Ensure_ptr.asFunction<_dart_PyGILState_Ensure>();

  void PyGILState_Release(
    int arg0,
  ) {
    return _PyGILState_Release(
      arg0,
    );
  }

  late final _PyGILState_Release_ptr =
      _lookup<ffi.NativeFunction<_c_PyGILState_Release>>('PyGILState_Release');
  late final _dart_PyGILState_Release _PyGILState_Release =
      _PyGILState_Release_ptr.asFunction<_dart_PyGILState_Release>();

  ffi.Pointer<_ts> PyGILState_GetThisThreadState() {
    return _PyGILState_GetThisThreadState();
  }

  late final _PyGILState_GetThisThreadState_ptr =
      _lookup<ffi.NativeFunction<_c_PyGILState_GetThisThreadState>>(
          'PyGILState_GetThisThreadState');
  late final _dart_PyGILState_GetThisThreadState
      _PyGILState_GetThisThreadState = _PyGILState_GetThisThreadState_ptr
          .asFunction<_dart_PyGILState_GetThisThreadState>();

  late final ffi.Pointer<_typeobject> _PyGen_Type =
      _lookup<_typeobject>('PyGen_Type');

  _typeobject get PyGen_Type => _PyGen_Type.ref;

  ffi.Pointer<PyObject> PyGen_New(
    ffi.Pointer<_frame> arg0,
  ) {
    return _PyGen_New(
      arg0,
    );
  }

  late final _PyGen_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyGen_New>>('PyGen_New');
  late final _dart_PyGen_New _PyGen_New =
      _PyGen_New_ptr.asFunction<_dart_PyGen_New>();

  ffi.Pointer<PyObject> PyGen_NewWithQualName(
    ffi.Pointer<_frame> arg0,
    ffi.Pointer<PyObject> name,
    ffi.Pointer<PyObject> qualname,
  ) {
    return _PyGen_NewWithQualName(
      arg0,
      name,
      qualname,
    );
  }

  late final _PyGen_NewWithQualName_ptr =
      _lookup<ffi.NativeFunction<_c_PyGen_NewWithQualName>>(
          'PyGen_NewWithQualName');
  late final _dart_PyGen_NewWithQualName _PyGen_NewWithQualName =
      _PyGen_NewWithQualName_ptr.asFunction<_dart_PyGen_NewWithQualName>();

  int PyGen_NeedsFinalizing(
    ffi.Pointer<PyGenObject> arg0,
  ) {
    return _PyGen_NeedsFinalizing(
      arg0,
    );
  }

  late final _PyGen_NeedsFinalizing_ptr =
      _lookup<ffi.NativeFunction<_c_PyGen_NeedsFinalizing>>(
          'PyGen_NeedsFinalizing');
  late final _dart_PyGen_NeedsFinalizing _PyGen_NeedsFinalizing =
      _PyGen_NeedsFinalizing_ptr.asFunction<_dart_PyGen_NeedsFinalizing>();

  int PyGen_SetStopIterationValue(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyGen_SetStopIterationValue(
      arg0,
    );
  }

  late final _PyGen_SetStopIterationValue_ptr =
      _lookup<ffi.NativeFunction<_c_PyGen_SetStopIterationValue>>(
          '_PyGen_SetStopIterationValue');
  late final _dart_PyGen_SetStopIterationValue _PyGen_SetStopIterationValue =
      _PyGen_SetStopIterationValue_ptr.asFunction<
          _dart_PyGen_SetStopIterationValue>();

  int PyGen_FetchStopIterationValue(
    ffi.Pointer<ffi.Pointer<PyObject>> arg0,
  ) {
    return _PyGen_FetchStopIterationValue(
      arg0,
    );
  }

  late final _PyGen_FetchStopIterationValue_ptr =
      _lookup<ffi.NativeFunction<_c_PyGen_FetchStopIterationValue>>(
          '_PyGen_FetchStopIterationValue');
  late final _dart_PyGen_FetchStopIterationValue
      _PyGen_FetchStopIterationValue = _PyGen_FetchStopIterationValue_ptr
          .asFunction<_dart_PyGen_FetchStopIterationValue>();

  ffi.Pointer<PyObject> PyGen_Send(
    ffi.Pointer<PyGenObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyGen_Send(
      arg0,
      arg1,
    );
  }

  late final _PyGen_Send_ptr =
      _lookup<ffi.NativeFunction<_c_PyGen_Send>>('_PyGen_Send');
  late final _dart_PyGen_Send _PyGen_Send =
      _PyGen_Send_ptr.asFunction<_dart_PyGen_Send>();

  ffi.Pointer<PyObject> PyGen_yf(
    ffi.Pointer<PyGenObject> arg0,
  ) {
    return _PyGen_yf(
      arg0,
    );
  }

  late final _PyGen_yf_ptr =
      _lookup<ffi.NativeFunction<_c_PyGen_yf>>('_PyGen_yf');
  late final _dart_PyGen_yf _PyGen_yf =
      _PyGen_yf_ptr.asFunction<_dart_PyGen_yf>();

  void PyGen_Finalize(
    ffi.Pointer<PyObject> self,
  ) {
    return _PyGen_Finalize(
      self,
    );
  }

  late final _PyGen_Finalize_ptr =
      _lookup<ffi.NativeFunction<_c_PyGen_Finalize>>('_PyGen_Finalize');
  late final _dart_PyGen_Finalize _PyGen_Finalize =
      _PyGen_Finalize_ptr.asFunction<_dart_PyGen_Finalize>();

  late final ffi.Pointer<_typeobject> _PyCoro_Type =
      _lookup<_typeobject>('PyCoro_Type');

  _typeobject get PyCoro_Type => _PyCoro_Type.ref;

  late final ffi.Pointer<_typeobject> _PyCoroWrapper_Type =
      _lookup<_typeobject>('_PyCoroWrapper_Type');

  _typeobject get PyCoroWrapper_Type => _PyCoroWrapper_Type.ref;

  late final ffi.Pointer<_typeobject> _PyAIterWrapper_Type =
      _lookup<_typeobject>('_PyAIterWrapper_Type');

  _typeobject get PyAIterWrapper_Type => _PyAIterWrapper_Type.ref;

  ffi.Pointer<PyObject> PyCoro_GetAwaitableIter(
    ffi.Pointer<PyObject> o,
  ) {
    return _PyCoro_GetAwaitableIter(
      o,
    );
  }

  late final _PyCoro_GetAwaitableIter_ptr =
      _lookup<ffi.NativeFunction<_c_PyCoro_GetAwaitableIter>>(
          '_PyCoro_GetAwaitableIter');
  late final _dart_PyCoro_GetAwaitableIter _PyCoro_GetAwaitableIter =
      _PyCoro_GetAwaitableIter_ptr.asFunction<_dart_PyCoro_GetAwaitableIter>();

  ffi.Pointer<PyObject> PyCoro_New(
    ffi.Pointer<_frame> arg0,
    ffi.Pointer<PyObject> name,
    ffi.Pointer<PyObject> qualname,
  ) {
    return _PyCoro_New(
      arg0,
      name,
      qualname,
    );
  }

  late final _PyCoro_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyCoro_New>>('PyCoro_New');
  late final _dart_PyCoro_New _PyCoro_New =
      _PyCoro_New_ptr.asFunction<_dart_PyCoro_New>();

  late final ffi.Pointer<_typeobject> _PyAsyncGen_Type =
      _lookup<_typeobject>('PyAsyncGen_Type');

  _typeobject get PyAsyncGen_Type => _PyAsyncGen_Type.ref;

  late final ffi.Pointer<_typeobject> _PyAsyncGenASend_Type =
      _lookup<_typeobject>('_PyAsyncGenASend_Type');

  _typeobject get PyAsyncGenASend_Type => _PyAsyncGenASend_Type.ref;

  late final ffi.Pointer<_typeobject> _PyAsyncGenWrappedValue_Type =
      _lookup<_typeobject>('_PyAsyncGenWrappedValue_Type');

  _typeobject get PyAsyncGenWrappedValue_Type =>
      _PyAsyncGenWrappedValue_Type.ref;

  late final ffi.Pointer<_typeobject> _PyAsyncGenAThrow_Type =
      _lookup<_typeobject>('_PyAsyncGenAThrow_Type');

  _typeobject get PyAsyncGenAThrow_Type => _PyAsyncGenAThrow_Type.ref;

  ffi.Pointer<PyObject> PyAsyncGen_New(
    ffi.Pointer<_frame> arg0,
    ffi.Pointer<PyObject> name,
    ffi.Pointer<PyObject> qualname,
  ) {
    return _PyAsyncGen_New(
      arg0,
      name,
      qualname,
    );
  }

  late final _PyAsyncGen_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyAsyncGen_New>>('PyAsyncGen_New');
  late final _dart_PyAsyncGen_New _PyAsyncGen_New =
      _PyAsyncGen_New_ptr.asFunction<_dart_PyAsyncGen_New>();

  ffi.Pointer<PyObject> PyAsyncGenValueWrapperNew(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyAsyncGenValueWrapperNew(
      arg0,
    );
  }

  late final _PyAsyncGenValueWrapperNew_ptr =
      _lookup<ffi.NativeFunction<_c_PyAsyncGenValueWrapperNew>>(
          '_PyAsyncGenValueWrapperNew');
  late final _dart_PyAsyncGenValueWrapperNew _PyAsyncGenValueWrapperNew =
      _PyAsyncGenValueWrapperNew_ptr.asFunction<
          _dart_PyAsyncGenValueWrapperNew>();

  int PyAsyncGen_ClearFreeLists() {
    return _PyAsyncGen_ClearFreeLists();
  }

  late final _PyAsyncGen_ClearFreeLists_ptr =
      _lookup<ffi.NativeFunction<_c_PyAsyncGen_ClearFreeLists>>(
          'PyAsyncGen_ClearFreeLists');
  late final _dart_PyAsyncGen_ClearFreeLists _PyAsyncGen_ClearFreeLists =
      _PyAsyncGen_ClearFreeLists_ptr.asFunction<
          _dart_PyAsyncGen_ClearFreeLists>();

  late final ffi.Pointer<_typeobject> _PyClassMethodDescr_Type =
      _lookup<_typeobject>('PyClassMethodDescr_Type');

  _typeobject get PyClassMethodDescr_Type => _PyClassMethodDescr_Type.ref;

  late final ffi.Pointer<_typeobject> _PyGetSetDescr_Type =
      _lookup<_typeobject>('PyGetSetDescr_Type');

  _typeobject get PyGetSetDescr_Type => _PyGetSetDescr_Type.ref;

  late final ffi.Pointer<_typeobject> _PyMemberDescr_Type =
      _lookup<_typeobject>('PyMemberDescr_Type');

  _typeobject get PyMemberDescr_Type => _PyMemberDescr_Type.ref;

  late final ffi.Pointer<_typeobject> _PyMethodDescr_Type =
      _lookup<_typeobject>('PyMethodDescr_Type');

  _typeobject get PyMethodDescr_Type => _PyMethodDescr_Type.ref;

  late final ffi.Pointer<_typeobject> _PyWrapperDescr_Type =
      _lookup<_typeobject>('PyWrapperDescr_Type');

  _typeobject get PyWrapperDescr_Type => _PyWrapperDescr_Type.ref;

  late final ffi.Pointer<_typeobject> _PyDictProxy_Type =
      _lookup<_typeobject>('PyDictProxy_Type');

  _typeobject get PyDictProxy_Type => _PyDictProxy_Type.ref;

  late final ffi.Pointer<_typeobject> _PyMethodWrapper_Type =
      _lookup<_typeobject>('_PyMethodWrapper_Type');

  _typeobject get PyMethodWrapper_Type => _PyMethodWrapper_Type.ref;

  ffi.Pointer<PyObject> PyDescr_NewMethod(
    ffi.Pointer<_typeobject> arg0,
    ffi.Pointer<PyMethodDef> arg1,
  ) {
    return _PyDescr_NewMethod(
      arg0,
      arg1,
    );
  }

  late final _PyDescr_NewMethod_ptr =
      _lookup<ffi.NativeFunction<_c_PyDescr_NewMethod>>('PyDescr_NewMethod');
  late final _dart_PyDescr_NewMethod _PyDescr_NewMethod =
      _PyDescr_NewMethod_ptr.asFunction<_dart_PyDescr_NewMethod>();

  ffi.Pointer<PyObject> PyDescr_NewClassMethod(
    ffi.Pointer<_typeobject> arg0,
    ffi.Pointer<PyMethodDef> arg1,
  ) {
    return _PyDescr_NewClassMethod(
      arg0,
      arg1,
    );
  }

  late final _PyDescr_NewClassMethod_ptr =
      _lookup<ffi.NativeFunction<_c_PyDescr_NewClassMethod>>(
          'PyDescr_NewClassMethod');
  late final _dart_PyDescr_NewClassMethod _PyDescr_NewClassMethod =
      _PyDescr_NewClassMethod_ptr.asFunction<_dart_PyDescr_NewClassMethod>();

  ffi.Pointer<PyObject> PyDescr_NewMember(
    ffi.Pointer<_typeobject> arg0,
    ffi.Pointer<PyMemberDef> arg1,
  ) {
    return _PyDescr_NewMember(
      arg0,
      arg1,
    );
  }

  late final _PyDescr_NewMember_ptr =
      _lookup<ffi.NativeFunction<_c_PyDescr_NewMember>>('PyDescr_NewMember');
  late final _dart_PyDescr_NewMember _PyDescr_NewMember =
      _PyDescr_NewMember_ptr.asFunction<_dart_PyDescr_NewMember>();

  ffi.Pointer<PyObject> PyDescr_NewGetSet(
    ffi.Pointer<_typeobject> arg0,
    ffi.Pointer<PyGetSetDef> arg1,
  ) {
    return _PyDescr_NewGetSet(
      arg0,
      arg1,
    );
  }

  late final _PyDescr_NewGetSet_ptr =
      _lookup<ffi.NativeFunction<_c_PyDescr_NewGetSet>>('PyDescr_NewGetSet');
  late final _dart_PyDescr_NewGetSet _PyDescr_NewGetSet =
      _PyDescr_NewGetSet_ptr.asFunction<_dart_PyDescr_NewGetSet>();

  ffi.Pointer<PyObject> PyDescr_NewWrapper(
    ffi.Pointer<_typeobject> arg0,
    ffi.Pointer<wrapperbase> arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _PyDescr_NewWrapper(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyDescr_NewWrapper_ptr =
      _lookup<ffi.NativeFunction<_c_PyDescr_NewWrapper>>('PyDescr_NewWrapper');
  late final _dart_PyDescr_NewWrapper _PyDescr_NewWrapper =
      _PyDescr_NewWrapper_ptr.asFunction<_dart_PyDescr_NewWrapper>();

  ffi.Pointer<PyObject> PyDictProxy_New(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyDictProxy_New(
      arg0,
    );
  }

  late final _PyDictProxy_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyDictProxy_New>>('PyDictProxy_New');
  late final _dart_PyDictProxy_New _PyDictProxy_New =
      _PyDictProxy_New_ptr.asFunction<_dart_PyDictProxy_New>();

  ffi.Pointer<PyObject> PyWrapper_New(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyWrapper_New(
      arg0,
      arg1,
    );
  }

  late final _PyWrapper_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyWrapper_New>>('PyWrapper_New');
  late final _dart_PyWrapper_New _PyWrapper_New =
      _PyWrapper_New_ptr.asFunction<_dart_PyWrapper_New>();

  late final ffi.Pointer<_typeobject> _PyProperty_Type =
      _lookup<_typeobject>('PyProperty_Type');

  _typeobject get PyProperty_Type => _PyProperty_Type.ref;

  ffi.Pointer<PyObject> PyWarnings_Init() {
    return _PyWarnings_Init();
  }

  late final _PyWarnings_Init_ptr =
      _lookup<ffi.NativeFunction<_c_PyWarnings_Init>>('_PyWarnings_Init');
  late final _dart_PyWarnings_Init _PyWarnings_Init =
      _PyWarnings_Init_ptr.asFunction<_dart_PyWarnings_Init>();

  int PyErr_WarnEx(
    ffi.Pointer<PyObject> category,
    ffi.Pointer<ffi.Int8> message,
    int stack_level,
  ) {
    return _PyErr_WarnEx(
      category,
      message,
      stack_level,
    );
  }

  late final _PyErr_WarnEx_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_WarnEx>>('PyErr_WarnEx');
  late final _dart_PyErr_WarnEx _PyErr_WarnEx =
      _PyErr_WarnEx_ptr.asFunction<_dart_PyErr_WarnEx>();

  int PyErr_WarnFormat(
    ffi.Pointer<PyObject> category,
    int stack_level,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _PyErr_WarnFormat(
      category,
      stack_level,
      format,
    );
  }

  late final _PyErr_WarnFormat_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_WarnFormat>>('PyErr_WarnFormat');
  late final _dart_PyErr_WarnFormat _PyErr_WarnFormat =
      _PyErr_WarnFormat_ptr.asFunction<_dart_PyErr_WarnFormat>();

  int PyErr_ResourceWarning(
    ffi.Pointer<PyObject> source,
    int stack_level,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _PyErr_ResourceWarning(
      source,
      stack_level,
      format,
    );
  }

  late final _PyErr_ResourceWarning_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_ResourceWarning>>(
          'PyErr_ResourceWarning');
  late final _dart_PyErr_ResourceWarning _PyErr_ResourceWarning =
      _PyErr_ResourceWarning_ptr.asFunction<_dart_PyErr_ResourceWarning>();

  int PyErr_WarnExplicitObject(
    ffi.Pointer<PyObject> category,
    ffi.Pointer<PyObject> message,
    ffi.Pointer<PyObject> filename,
    int lineno,
    ffi.Pointer<PyObject> module,
    ffi.Pointer<PyObject> registry,
  ) {
    return _PyErr_WarnExplicitObject(
      category,
      message,
      filename,
      lineno,
      module,
      registry,
    );
  }

  late final _PyErr_WarnExplicitObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_WarnExplicitObject>>(
          'PyErr_WarnExplicitObject');
  late final _dart_PyErr_WarnExplicitObject _PyErr_WarnExplicitObject =
      _PyErr_WarnExplicitObject_ptr.asFunction<
          _dart_PyErr_WarnExplicitObject>();

  int PyErr_WarnExplicit(
    ffi.Pointer<PyObject> category,
    ffi.Pointer<ffi.Int8> message,
    ffi.Pointer<ffi.Int8> filename,
    int lineno,
    ffi.Pointer<ffi.Int8> module,
    ffi.Pointer<PyObject> registry,
  ) {
    return _PyErr_WarnExplicit(
      category,
      message,
      filename,
      lineno,
      module,
      registry,
    );
  }

  late final _PyErr_WarnExplicit_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_WarnExplicit>>('PyErr_WarnExplicit');
  late final _dart_PyErr_WarnExplicit _PyErr_WarnExplicit =
      _PyErr_WarnExplicit_ptr.asFunction<_dart_PyErr_WarnExplicit>();

  int PyErr_WarnExplicitFormat(
    ffi.Pointer<PyObject> category,
    ffi.Pointer<ffi.Int8> filename,
    int lineno,
    ffi.Pointer<ffi.Int8> module,
    ffi.Pointer<PyObject> registry,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _PyErr_WarnExplicitFormat(
      category,
      filename,
      lineno,
      module,
      registry,
      format,
    );
  }

  late final _PyErr_WarnExplicitFormat_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_WarnExplicitFormat>>(
          'PyErr_WarnExplicitFormat');
  late final _dart_PyErr_WarnExplicitFormat _PyErr_WarnExplicitFormat =
      _PyErr_WarnExplicitFormat_ptr.asFunction<
          _dart_PyErr_WarnExplicitFormat>();

  void PyErr_WarnUnawaitedCoroutine(
    ffi.Pointer<PyObject> coro,
  ) {
    return _PyErr_WarnUnawaitedCoroutine(
      coro,
    );
  }

  late final _PyErr_WarnUnawaitedCoroutine_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_WarnUnawaitedCoroutine>>(
          '_PyErr_WarnUnawaitedCoroutine');
  late final _dart_PyErr_WarnUnawaitedCoroutine _PyErr_WarnUnawaitedCoroutine =
      _PyErr_WarnUnawaitedCoroutine_ptr.asFunction<
          _dart_PyErr_WarnUnawaitedCoroutine>();

  late final ffi.Pointer<_typeobject> _PyWeakref_RefType =
      _lookup<_typeobject>('_PyWeakref_RefType');

  _typeobject get PyWeakref_RefType => _PyWeakref_RefType.ref;

  late final ffi.Pointer<_typeobject> _PyWeakref_ProxyType =
      _lookup<_typeobject>('_PyWeakref_ProxyType');

  _typeobject get PyWeakref_ProxyType => _PyWeakref_ProxyType.ref;

  late final ffi.Pointer<_typeobject> _PyWeakref_CallableProxyType =
      _lookup<_typeobject>('_PyWeakref_CallableProxyType');

  _typeobject get PyWeakref_CallableProxyType =>
      _PyWeakref_CallableProxyType.ref;

  ffi.Pointer<PyObject> PyWeakref_NewRef(
    ffi.Pointer<PyObject> ob,
    ffi.Pointer<PyObject> callback,
  ) {
    return _PyWeakref_NewRef(
      ob,
      callback,
    );
  }

  late final _PyWeakref_NewRef_ptr =
      _lookup<ffi.NativeFunction<_c_PyWeakref_NewRef>>('PyWeakref_NewRef');
  late final _dart_PyWeakref_NewRef _PyWeakref_NewRef =
      _PyWeakref_NewRef_ptr.asFunction<_dart_PyWeakref_NewRef>();

  ffi.Pointer<PyObject> PyWeakref_NewProxy(
    ffi.Pointer<PyObject> ob,
    ffi.Pointer<PyObject> callback,
  ) {
    return _PyWeakref_NewProxy(
      ob,
      callback,
    );
  }

  late final _PyWeakref_NewProxy_ptr =
      _lookup<ffi.NativeFunction<_c_PyWeakref_NewProxy>>('PyWeakref_NewProxy');
  late final _dart_PyWeakref_NewProxy _PyWeakref_NewProxy =
      _PyWeakref_NewProxy_ptr.asFunction<_dart_PyWeakref_NewProxy>();

  ffi.Pointer<PyObject> PyWeakref_GetObject(
    ffi.Pointer<PyObject> ref,
  ) {
    return _PyWeakref_GetObject(
      ref,
    );
  }

  late final _PyWeakref_GetObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyWeakref_GetObject>>(
          'PyWeakref_GetObject');
  late final _dart_PyWeakref_GetObject _PyWeakref_GetObject =
      _PyWeakref_GetObject_ptr.asFunction<_dart_PyWeakref_GetObject>();

  int PyWeakref_GetWeakrefCount(
    ffi.Pointer<_PyWeakReference> head,
  ) {
    return _PyWeakref_GetWeakrefCount(
      head,
    );
  }

  late final _PyWeakref_GetWeakrefCount_ptr =
      _lookup<ffi.NativeFunction<_c_PyWeakref_GetWeakrefCount>>(
          '_PyWeakref_GetWeakrefCount');
  late final _dart_PyWeakref_GetWeakrefCount _PyWeakref_GetWeakrefCount =
      _PyWeakref_GetWeakrefCount_ptr.asFunction<
          _dart_PyWeakref_GetWeakrefCount>();

  void PyWeakref_ClearRef(
    ffi.Pointer<_PyWeakReference> self,
  ) {
    return _PyWeakref_ClearRef(
      self,
    );
  }

  late final _PyWeakref_ClearRef_ptr =
      _lookup<ffi.NativeFunction<_c_PyWeakref_ClearRef>>('_PyWeakref_ClearRef');
  late final _dart_PyWeakref_ClearRef _PyWeakref_ClearRef =
      _PyWeakref_ClearRef_ptr.asFunction<_dart_PyWeakref_ClearRef>();

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _PyStructSequence_UnnamedField =
      _lookup<ffi.Pointer<ffi.Int8>>('PyStructSequence_UnnamedField');

  ffi.Pointer<ffi.Int8> get PyStructSequence_UnnamedField =>
      _PyStructSequence_UnnamedField.value;

  set PyStructSequence_UnnamedField(ffi.Pointer<ffi.Int8> value) =>
      _PyStructSequence_UnnamedField.value = value;

  void PyStructSequence_InitType(
    ffi.Pointer<_typeobject> type,
    ffi.Pointer<PyStructSequence_Desc> desc,
  ) {
    return _PyStructSequence_InitType(
      type,
      desc,
    );
  }

  late final _PyStructSequence_InitType_ptr =
      _lookup<ffi.NativeFunction<_c_PyStructSequence_InitType>>(
          'PyStructSequence_InitType');
  late final _dart_PyStructSequence_InitType _PyStructSequence_InitType =
      _PyStructSequence_InitType_ptr.asFunction<
          _dart_PyStructSequence_InitType>();

  int PyStructSequence_InitType2(
    ffi.Pointer<_typeobject> type,
    ffi.Pointer<PyStructSequence_Desc> desc,
  ) {
    return _PyStructSequence_InitType2(
      type,
      desc,
    );
  }

  late final _PyStructSequence_InitType2_ptr =
      _lookup<ffi.NativeFunction<_c_PyStructSequence_InitType2>>(
          'PyStructSequence_InitType2');
  late final _dart_PyStructSequence_InitType2 _PyStructSequence_InitType2 =
      _PyStructSequence_InitType2_ptr.asFunction<
          _dart_PyStructSequence_InitType2>();

  ffi.Pointer<_typeobject> PyStructSequence_NewType(
    ffi.Pointer<PyStructSequence_Desc> desc,
  ) {
    return _PyStructSequence_NewType(
      desc,
    );
  }

  late final _PyStructSequence_NewType_ptr =
      _lookup<ffi.NativeFunction<_c_PyStructSequence_NewType>>(
          'PyStructSequence_NewType');
  late final _dart_PyStructSequence_NewType _PyStructSequence_NewType =
      _PyStructSequence_NewType_ptr.asFunction<
          _dart_PyStructSequence_NewType>();

  ffi.Pointer<PyObject> PyStructSequence_New(
    ffi.Pointer<_typeobject> type,
  ) {
    return _PyStructSequence_New(
      type,
    );
  }

  late final _PyStructSequence_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyStructSequence_New>>(
          'PyStructSequence_New');
  late final _dart_PyStructSequence_New _PyStructSequence_New =
      _PyStructSequence_New_ptr.asFunction<_dart_PyStructSequence_New>();

  void PyStructSequence_SetItem(
    ffi.Pointer<PyObject> arg0,
    int arg1,
    ffi.Pointer<PyObject> arg2,
  ) {
    return _PyStructSequence_SetItem(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyStructSequence_SetItem_ptr =
      _lookup<ffi.NativeFunction<_c_PyStructSequence_SetItem>>(
          'PyStructSequence_SetItem');
  late final _dart_PyStructSequence_SetItem _PyStructSequence_SetItem =
      _PyStructSequence_SetItem_ptr.asFunction<
          _dart_PyStructSequence_SetItem>();

  ffi.Pointer<PyObject> PyStructSequence_GetItem(
    ffi.Pointer<PyObject> arg0,
    int arg1,
  ) {
    return _PyStructSequence_GetItem(
      arg0,
      arg1,
    );
  }

  late final _PyStructSequence_GetItem_ptr =
      _lookup<ffi.NativeFunction<_c_PyStructSequence_GetItem>>(
          'PyStructSequence_GetItem');
  late final _dart_PyStructSequence_GetItem _PyStructSequence_GetItem =
      _PyStructSequence_GetItem_ptr.asFunction<
          _dart_PyStructSequence_GetItem>();

  late final ffi.Pointer<_typeobject> _PyNamespace_Type =
      _lookup<_typeobject>('_PyNamespace_Type');

  _typeobject get PyNamespace_Type => _PyNamespace_Type.ref;

  ffi.Pointer<PyObject> PyNamespace_New(
    ffi.Pointer<PyObject> kwds,
  ) {
    return _PyNamespace_New(
      kwds,
    );
  }

  late final _PyNamespace_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyNamespace_New>>('_PyNamespace_New');
  late final _dart_PyNamespace_New _PyNamespace_New =
      _PyNamespace_New_ptr.asFunction<_dart_PyNamespace_New>();

  late final ffi.Pointer<_typeobject> _PyPickleBuffer_Type =
      _lookup<_typeobject>('PyPickleBuffer_Type');

  _typeobject get PyPickleBuffer_Type => _PyPickleBuffer_Type.ref;

  ffi.Pointer<PyObject> PyPickleBuffer_FromObject(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyPickleBuffer_FromObject(
      arg0,
    );
  }

  late final _PyPickleBuffer_FromObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyPickleBuffer_FromObject>>(
          'PyPickleBuffer_FromObject');
  late final _dart_PyPickleBuffer_FromObject _PyPickleBuffer_FromObject =
      _PyPickleBuffer_FromObject_ptr.asFunction<
          _dart_PyPickleBuffer_FromObject>();

  ffi.Pointer<Py_buffer> PyPickleBuffer_GetBuffer(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyPickleBuffer_GetBuffer(
      arg0,
    );
  }

  late final _PyPickleBuffer_GetBuffer_ptr =
      _lookup<ffi.NativeFunction<_c_PyPickleBuffer_GetBuffer>>(
          'PyPickleBuffer_GetBuffer');
  late final _dart_PyPickleBuffer_GetBuffer _PyPickleBuffer_GetBuffer =
      _PyPickleBuffer_GetBuffer_ptr.asFunction<
          _dart_PyPickleBuffer_GetBuffer>();

  int PyPickleBuffer_Release(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyPickleBuffer_Release(
      arg0,
    );
  }

  late final _PyPickleBuffer_Release_ptr =
      _lookup<ffi.NativeFunction<_c_PyPickleBuffer_Release>>(
          'PyPickleBuffer_Release');
  late final _dart_PyPickleBuffer_Release _PyPickleBuffer_Release =
      _PyPickleBuffer_Release_ptr.asFunction<_dart_PyPickleBuffer_Release>();

  int PyCodec_Register(
    ffi.Pointer<PyObject> search_function,
  ) {
    return _PyCodec_Register(
      search_function,
    );
  }

  late final _PyCodec_Register_ptr =
      _lookup<ffi.NativeFunction<_c_PyCodec_Register>>('PyCodec_Register');
  late final _dart_PyCodec_Register _PyCodec_Register =
      _PyCodec_Register_ptr.asFunction<_dart_PyCodec_Register>();

  ffi.Pointer<PyObject> PyCodec_Lookup(
    ffi.Pointer<ffi.Int8> encoding,
  ) {
    return _PyCodec_Lookup(
      encoding,
    );
  }

  late final _PyCodec_Lookup_ptr =
      _lookup<ffi.NativeFunction<_c_PyCodec_Lookup>>('_PyCodec_Lookup');
  late final _dart_PyCodec_Lookup _PyCodec_Lookup =
      _PyCodec_Lookup_ptr.asFunction<_dart_PyCodec_Lookup>();

  int PyCodec_Forget(
    ffi.Pointer<ffi.Int8> encoding,
  ) {
    return _PyCodec_Forget(
      encoding,
    );
  }

  late final _PyCodec_Forget_ptr =
      _lookup<ffi.NativeFunction<_c_PyCodec_Forget>>('_PyCodec_Forget');
  late final _dart_PyCodec_Forget _PyCodec_Forget =
      _PyCodec_Forget_ptr.asFunction<_dart_PyCodec_Forget>();

  int PyCodec_KnownEncoding(
    ffi.Pointer<ffi.Int8> encoding,
  ) {
    return _PyCodec_KnownEncoding(
      encoding,
    );
  }

  late final _PyCodec_KnownEncoding_ptr =
      _lookup<ffi.NativeFunction<_c_PyCodec_KnownEncoding>>(
          'PyCodec_KnownEncoding');
  late final _dart_PyCodec_KnownEncoding _PyCodec_KnownEncoding =
      _PyCodec_KnownEncoding_ptr.asFunction<_dart_PyCodec_KnownEncoding>();

  ffi.Pointer<PyObject> PyCodec_Encode(
    ffi.Pointer<PyObject> object,
    ffi.Pointer<ffi.Int8> encoding,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyCodec_Encode(
      object,
      encoding,
      errors,
    );
  }

  late final _PyCodec_Encode_ptr =
      _lookup<ffi.NativeFunction<_c_PyCodec_Encode>>('PyCodec_Encode');
  late final _dart_PyCodec_Encode _PyCodec_Encode =
      _PyCodec_Encode_ptr.asFunction<_dart_PyCodec_Encode>();

  ffi.Pointer<PyObject> PyCodec_Decode(
    ffi.Pointer<PyObject> object,
    ffi.Pointer<ffi.Int8> encoding,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyCodec_Decode(
      object,
      encoding,
      errors,
    );
  }

  late final _PyCodec_Decode_ptr =
      _lookup<ffi.NativeFunction<_c_PyCodec_Decode>>('PyCodec_Decode');
  late final _dart_PyCodec_Decode _PyCodec_Decode =
      _PyCodec_Decode_ptr.asFunction<_dart_PyCodec_Decode>();

  ffi.Pointer<PyObject> PyCodec_LookupTextEncoding(
    ffi.Pointer<ffi.Int8> encoding,
    ffi.Pointer<ffi.Int8> alternate_command,
  ) {
    return _PyCodec_LookupTextEncoding(
      encoding,
      alternate_command,
    );
  }

  late final _PyCodec_LookupTextEncoding_ptr =
      _lookup<ffi.NativeFunction<_c_PyCodec_LookupTextEncoding>>(
          '_PyCodec_LookupTextEncoding');
  late final _dart_PyCodec_LookupTextEncoding _PyCodec_LookupTextEncoding =
      _PyCodec_LookupTextEncoding_ptr.asFunction<
          _dart_PyCodec_LookupTextEncoding>();

  ffi.Pointer<PyObject> PyCodec_EncodeText(
    ffi.Pointer<PyObject> object,
    ffi.Pointer<ffi.Int8> encoding,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyCodec_EncodeText(
      object,
      encoding,
      errors,
    );
  }

  late final _PyCodec_EncodeText_ptr =
      _lookup<ffi.NativeFunction<_c_PyCodec_EncodeText>>('_PyCodec_EncodeText');
  late final _dart_PyCodec_EncodeText _PyCodec_EncodeText =
      _PyCodec_EncodeText_ptr.asFunction<_dart_PyCodec_EncodeText>();

  ffi.Pointer<PyObject> PyCodec_DecodeText(
    ffi.Pointer<PyObject> object,
    ffi.Pointer<ffi.Int8> encoding,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyCodec_DecodeText(
      object,
      encoding,
      errors,
    );
  }

  late final _PyCodec_DecodeText_ptr =
      _lookup<ffi.NativeFunction<_c_PyCodec_DecodeText>>('_PyCodec_DecodeText');
  late final _dart_PyCodec_DecodeText _PyCodec_DecodeText =
      _PyCodec_DecodeText_ptr.asFunction<_dart_PyCodec_DecodeText>();

  ffi.Pointer<PyObject> PyCodecInfo_GetIncrementalDecoder(
    ffi.Pointer<PyObject> codec_info,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyCodecInfo_GetIncrementalDecoder(
      codec_info,
      errors,
    );
  }

  late final _PyCodecInfo_GetIncrementalDecoder_ptr =
      _lookup<ffi.NativeFunction<_c_PyCodecInfo_GetIncrementalDecoder>>(
          '_PyCodecInfo_GetIncrementalDecoder');
  late final _dart_PyCodecInfo_GetIncrementalDecoder
      _PyCodecInfo_GetIncrementalDecoder =
      _PyCodecInfo_GetIncrementalDecoder_ptr.asFunction<
          _dart_PyCodecInfo_GetIncrementalDecoder>();

  ffi.Pointer<PyObject> PyCodecInfo_GetIncrementalEncoder(
    ffi.Pointer<PyObject> codec_info,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyCodecInfo_GetIncrementalEncoder(
      codec_info,
      errors,
    );
  }

  late final _PyCodecInfo_GetIncrementalEncoder_ptr =
      _lookup<ffi.NativeFunction<_c_PyCodecInfo_GetIncrementalEncoder>>(
          '_PyCodecInfo_GetIncrementalEncoder');
  late final _dart_PyCodecInfo_GetIncrementalEncoder
      _PyCodecInfo_GetIncrementalEncoder =
      _PyCodecInfo_GetIncrementalEncoder_ptr.asFunction<
          _dart_PyCodecInfo_GetIncrementalEncoder>();

  ffi.Pointer<PyObject> PyCodec_Encoder(
    ffi.Pointer<ffi.Int8> encoding,
  ) {
    return _PyCodec_Encoder(
      encoding,
    );
  }

  late final _PyCodec_Encoder_ptr =
      _lookup<ffi.NativeFunction<_c_PyCodec_Encoder>>('PyCodec_Encoder');
  late final _dart_PyCodec_Encoder _PyCodec_Encoder =
      _PyCodec_Encoder_ptr.asFunction<_dart_PyCodec_Encoder>();

  ffi.Pointer<PyObject> PyCodec_Decoder(
    ffi.Pointer<ffi.Int8> encoding,
  ) {
    return _PyCodec_Decoder(
      encoding,
    );
  }

  late final _PyCodec_Decoder_ptr =
      _lookup<ffi.NativeFunction<_c_PyCodec_Decoder>>('PyCodec_Decoder');
  late final _dart_PyCodec_Decoder _PyCodec_Decoder =
      _PyCodec_Decoder_ptr.asFunction<_dart_PyCodec_Decoder>();

  ffi.Pointer<PyObject> PyCodec_IncrementalEncoder(
    ffi.Pointer<ffi.Int8> encoding,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyCodec_IncrementalEncoder(
      encoding,
      errors,
    );
  }

  late final _PyCodec_IncrementalEncoder_ptr =
      _lookup<ffi.NativeFunction<_c_PyCodec_IncrementalEncoder>>(
          'PyCodec_IncrementalEncoder');
  late final _dart_PyCodec_IncrementalEncoder _PyCodec_IncrementalEncoder =
      _PyCodec_IncrementalEncoder_ptr.asFunction<
          _dart_PyCodec_IncrementalEncoder>();

  ffi.Pointer<PyObject> PyCodec_IncrementalDecoder(
    ffi.Pointer<ffi.Int8> encoding,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyCodec_IncrementalDecoder(
      encoding,
      errors,
    );
  }

  late final _PyCodec_IncrementalDecoder_ptr =
      _lookup<ffi.NativeFunction<_c_PyCodec_IncrementalDecoder>>(
          'PyCodec_IncrementalDecoder');
  late final _dart_PyCodec_IncrementalDecoder _PyCodec_IncrementalDecoder =
      _PyCodec_IncrementalDecoder_ptr.asFunction<
          _dart_PyCodec_IncrementalDecoder>();

  ffi.Pointer<PyObject> PyCodec_StreamReader(
    ffi.Pointer<ffi.Int8> encoding,
    ffi.Pointer<PyObject> stream,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyCodec_StreamReader(
      encoding,
      stream,
      errors,
    );
  }

  late final _PyCodec_StreamReader_ptr =
      _lookup<ffi.NativeFunction<_c_PyCodec_StreamReader>>(
          'PyCodec_StreamReader');
  late final _dart_PyCodec_StreamReader _PyCodec_StreamReader =
      _PyCodec_StreamReader_ptr.asFunction<_dart_PyCodec_StreamReader>();

  ffi.Pointer<PyObject> PyCodec_StreamWriter(
    ffi.Pointer<ffi.Int8> encoding,
    ffi.Pointer<PyObject> stream,
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _PyCodec_StreamWriter(
      encoding,
      stream,
      errors,
    );
  }

  late final _PyCodec_StreamWriter_ptr =
      _lookup<ffi.NativeFunction<_c_PyCodec_StreamWriter>>(
          'PyCodec_StreamWriter');
  late final _dart_PyCodec_StreamWriter _PyCodec_StreamWriter =
      _PyCodec_StreamWriter_ptr.asFunction<_dart_PyCodec_StreamWriter>();

  int PyCodec_RegisterError(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<PyObject> error,
  ) {
    return _PyCodec_RegisterError(
      name,
      error,
    );
  }

  late final _PyCodec_RegisterError_ptr =
      _lookup<ffi.NativeFunction<_c_PyCodec_RegisterError>>(
          'PyCodec_RegisterError');
  late final _dart_PyCodec_RegisterError _PyCodec_RegisterError =
      _PyCodec_RegisterError_ptr.asFunction<_dart_PyCodec_RegisterError>();

  ffi.Pointer<PyObject> PyCodec_LookupError(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _PyCodec_LookupError(
      name,
    );
  }

  late final _PyCodec_LookupError_ptr =
      _lookup<ffi.NativeFunction<_c_PyCodec_LookupError>>(
          'PyCodec_LookupError');
  late final _dart_PyCodec_LookupError _PyCodec_LookupError =
      _PyCodec_LookupError_ptr.asFunction<_dart_PyCodec_LookupError>();

  ffi.Pointer<PyObject> PyCodec_StrictErrors(
    ffi.Pointer<PyObject> exc,
  ) {
    return _PyCodec_StrictErrors(
      exc,
    );
  }

  late final _PyCodec_StrictErrors_ptr =
      _lookup<ffi.NativeFunction<_c_PyCodec_StrictErrors>>(
          'PyCodec_StrictErrors');
  late final _dart_PyCodec_StrictErrors _PyCodec_StrictErrors =
      _PyCodec_StrictErrors_ptr.asFunction<_dart_PyCodec_StrictErrors>();

  ffi.Pointer<PyObject> PyCodec_IgnoreErrors(
    ffi.Pointer<PyObject> exc,
  ) {
    return _PyCodec_IgnoreErrors(
      exc,
    );
  }

  late final _PyCodec_IgnoreErrors_ptr =
      _lookup<ffi.NativeFunction<_c_PyCodec_IgnoreErrors>>(
          'PyCodec_IgnoreErrors');
  late final _dart_PyCodec_IgnoreErrors _PyCodec_IgnoreErrors =
      _PyCodec_IgnoreErrors_ptr.asFunction<_dart_PyCodec_IgnoreErrors>();

  ffi.Pointer<PyObject> PyCodec_ReplaceErrors(
    ffi.Pointer<PyObject> exc,
  ) {
    return _PyCodec_ReplaceErrors(
      exc,
    );
  }

  late final _PyCodec_ReplaceErrors_ptr =
      _lookup<ffi.NativeFunction<_c_PyCodec_ReplaceErrors>>(
          'PyCodec_ReplaceErrors');
  late final _dart_PyCodec_ReplaceErrors _PyCodec_ReplaceErrors =
      _PyCodec_ReplaceErrors_ptr.asFunction<_dart_PyCodec_ReplaceErrors>();

  ffi.Pointer<PyObject> PyCodec_XMLCharRefReplaceErrors(
    ffi.Pointer<PyObject> exc,
  ) {
    return _PyCodec_XMLCharRefReplaceErrors(
      exc,
    );
  }

  late final _PyCodec_XMLCharRefReplaceErrors_ptr =
      _lookup<ffi.NativeFunction<_c_PyCodec_XMLCharRefReplaceErrors>>(
          'PyCodec_XMLCharRefReplaceErrors');
  late final _dart_PyCodec_XMLCharRefReplaceErrors
      _PyCodec_XMLCharRefReplaceErrors = _PyCodec_XMLCharRefReplaceErrors_ptr
          .asFunction<_dart_PyCodec_XMLCharRefReplaceErrors>();

  ffi.Pointer<PyObject> PyCodec_BackslashReplaceErrors(
    ffi.Pointer<PyObject> exc,
  ) {
    return _PyCodec_BackslashReplaceErrors(
      exc,
    );
  }

  late final _PyCodec_BackslashReplaceErrors_ptr =
      _lookup<ffi.NativeFunction<_c_PyCodec_BackslashReplaceErrors>>(
          'PyCodec_BackslashReplaceErrors');
  late final _dart_PyCodec_BackslashReplaceErrors
      _PyCodec_BackslashReplaceErrors = _PyCodec_BackslashReplaceErrors_ptr
          .asFunction<_dart_PyCodec_BackslashReplaceErrors>();

  ffi.Pointer<PyObject> PyCodec_NameReplaceErrors(
    ffi.Pointer<PyObject> exc,
  ) {
    return _PyCodec_NameReplaceErrors(
      exc,
    );
  }

  late final _PyCodec_NameReplaceErrors_ptr =
      _lookup<ffi.NativeFunction<_c_PyCodec_NameReplaceErrors>>(
          'PyCodec_NameReplaceErrors');
  late final _dart_PyCodec_NameReplaceErrors _PyCodec_NameReplaceErrors =
      _PyCodec_NameReplaceErrors_ptr.asFunction<
          _dart_PyCodec_NameReplaceErrors>();

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _Py_hexdigits =
      _lookup<ffi.Pointer<ffi.Int8>>('Py_hexdigits');

  ffi.Pointer<ffi.Int8> get Py_hexdigits => _Py_hexdigits.value;

  set Py_hexdigits(ffi.Pointer<ffi.Int8> value) => _Py_hexdigits.value = value;

  void PyErr_SetNone(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyErr_SetNone(
      arg0,
    );
  }

  late final _PyErr_SetNone_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_SetNone>>('PyErr_SetNone');
  late final _dart_PyErr_SetNone _PyErr_SetNone =
      _PyErr_SetNone_ptr.asFunction<_dart_PyErr_SetNone>();

  void PyErr_SetObject(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyErr_SetObject(
      arg0,
      arg1,
    );
  }

  late final _PyErr_SetObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_SetObject>>('PyErr_SetObject');
  late final _dart_PyErr_SetObject _PyErr_SetObject =
      _PyErr_SetObject_ptr.asFunction<_dart_PyErr_SetObject>();

  void PyErr_SetString(
    ffi.Pointer<PyObject> exception,
    ffi.Pointer<ffi.Int8> string,
  ) {
    return _PyErr_SetString(
      exception,
      string,
    );
  }

  late final _PyErr_SetString_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_SetString>>('PyErr_SetString');
  late final _dart_PyErr_SetString _PyErr_SetString =
      _PyErr_SetString_ptr.asFunction<_dart_PyErr_SetString>();

  ffi.Pointer<PyObject> PyErr_Occurred() {
    return _PyErr_Occurred();
  }

  late final _PyErr_Occurred_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_Occurred>>('PyErr_Occurred');
  late final _dart_PyErr_Occurred _PyErr_Occurred =
      _PyErr_Occurred_ptr.asFunction<_dart_PyErr_Occurred>();

  void PyErr_Clear() {
    return _PyErr_Clear();
  }

  late final _PyErr_Clear_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_Clear>>('PyErr_Clear');
  late final _dart_PyErr_Clear _PyErr_Clear =
      _PyErr_Clear_ptr.asFunction<_dart_PyErr_Clear>();

  void PyErr_Fetch(
    ffi.Pointer<ffi.Pointer<PyObject>> arg0,
    ffi.Pointer<ffi.Pointer<PyObject>> arg1,
    ffi.Pointer<ffi.Pointer<PyObject>> arg2,
  ) {
    return _PyErr_Fetch(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyErr_Fetch_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_Fetch>>('PyErr_Fetch');
  late final _dart_PyErr_Fetch _PyErr_Fetch =
      _PyErr_Fetch_ptr.asFunction<_dart_PyErr_Fetch>();

  void PyErr_Restore(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
    ffi.Pointer<PyObject> arg2,
  ) {
    return _PyErr_Restore(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyErr_Restore_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_Restore>>('PyErr_Restore');
  late final _dart_PyErr_Restore _PyErr_Restore =
      _PyErr_Restore_ptr.asFunction<_dart_PyErr_Restore>();

  void PyErr_GetExcInfo(
    ffi.Pointer<ffi.Pointer<PyObject>> arg0,
    ffi.Pointer<ffi.Pointer<PyObject>> arg1,
    ffi.Pointer<ffi.Pointer<PyObject>> arg2,
  ) {
    return _PyErr_GetExcInfo(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyErr_GetExcInfo_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_GetExcInfo>>('PyErr_GetExcInfo');
  late final _dart_PyErr_GetExcInfo _PyErr_GetExcInfo =
      _PyErr_GetExcInfo_ptr.asFunction<_dart_PyErr_GetExcInfo>();

  void PyErr_SetExcInfo(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
    ffi.Pointer<PyObject> arg2,
  ) {
    return _PyErr_SetExcInfo(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyErr_SetExcInfo_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_SetExcInfo>>('PyErr_SetExcInfo');
  late final _dart_PyErr_SetExcInfo _PyErr_SetExcInfo =
      _PyErr_SetExcInfo_ptr.asFunction<_dart_PyErr_SetExcInfo>();

  void Py_FatalError(
    ffi.Pointer<ffi.Int8> message,
  ) {
    return _Py_FatalError(
      message,
    );
  }

  late final _Py_FatalError_ptr =
      _lookup<ffi.NativeFunction<_c_Py_FatalError>>('Py_FatalError');
  late final _dart_Py_FatalError _Py_FatalError =
      _Py_FatalError_ptr.asFunction<_dart_Py_FatalError>();

  int PyErr_GivenExceptionMatches(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyErr_GivenExceptionMatches(
      arg0,
      arg1,
    );
  }

  late final _PyErr_GivenExceptionMatches_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_GivenExceptionMatches>>(
          'PyErr_GivenExceptionMatches');
  late final _dart_PyErr_GivenExceptionMatches _PyErr_GivenExceptionMatches =
      _PyErr_GivenExceptionMatches_ptr.asFunction<
          _dart_PyErr_GivenExceptionMatches>();

  int PyErr_ExceptionMatches(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyErr_ExceptionMatches(
      arg0,
    );
  }

  late final _PyErr_ExceptionMatches_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_ExceptionMatches>>(
          'PyErr_ExceptionMatches');
  late final _dart_PyErr_ExceptionMatches _PyErr_ExceptionMatches =
      _PyErr_ExceptionMatches_ptr.asFunction<_dart_PyErr_ExceptionMatches>();

  void PyErr_NormalizeException(
    ffi.Pointer<ffi.Pointer<PyObject>> arg0,
    ffi.Pointer<ffi.Pointer<PyObject>> arg1,
    ffi.Pointer<ffi.Pointer<PyObject>> arg2,
  ) {
    return _PyErr_NormalizeException(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyErr_NormalizeException_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_NormalizeException>>(
          'PyErr_NormalizeException');
  late final _dart_PyErr_NormalizeException _PyErr_NormalizeException =
      _PyErr_NormalizeException_ptr.asFunction<
          _dart_PyErr_NormalizeException>();

  int PyException_SetTraceback(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyException_SetTraceback(
      arg0,
      arg1,
    );
  }

  late final _PyException_SetTraceback_ptr =
      _lookup<ffi.NativeFunction<_c_PyException_SetTraceback>>(
          'PyException_SetTraceback');
  late final _dart_PyException_SetTraceback _PyException_SetTraceback =
      _PyException_SetTraceback_ptr.asFunction<
          _dart_PyException_SetTraceback>();

  ffi.Pointer<PyObject> PyException_GetTraceback(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyException_GetTraceback(
      arg0,
    );
  }

  late final _PyException_GetTraceback_ptr =
      _lookup<ffi.NativeFunction<_c_PyException_GetTraceback>>(
          'PyException_GetTraceback');
  late final _dart_PyException_GetTraceback _PyException_GetTraceback =
      _PyException_GetTraceback_ptr.asFunction<
          _dart_PyException_GetTraceback>();

  ffi.Pointer<PyObject> PyException_GetCause(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyException_GetCause(
      arg0,
    );
  }

  late final _PyException_GetCause_ptr =
      _lookup<ffi.NativeFunction<_c_PyException_GetCause>>(
          'PyException_GetCause');
  late final _dart_PyException_GetCause _PyException_GetCause =
      _PyException_GetCause_ptr.asFunction<_dart_PyException_GetCause>();

  void PyException_SetCause(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyException_SetCause(
      arg0,
      arg1,
    );
  }

  late final _PyException_SetCause_ptr =
      _lookup<ffi.NativeFunction<_c_PyException_SetCause>>(
          'PyException_SetCause');
  late final _dart_PyException_SetCause _PyException_SetCause =
      _PyException_SetCause_ptr.asFunction<_dart_PyException_SetCause>();

  ffi.Pointer<PyObject> PyException_GetContext(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyException_GetContext(
      arg0,
    );
  }

  late final _PyException_GetContext_ptr =
      _lookup<ffi.NativeFunction<_c_PyException_GetContext>>(
          'PyException_GetContext');
  late final _dart_PyException_GetContext _PyException_GetContext =
      _PyException_GetContext_ptr.asFunction<_dart_PyException_GetContext>();

  void PyException_SetContext(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyException_SetContext(
      arg0,
      arg1,
    );
  }

  late final _PyException_SetContext_ptr =
      _lookup<ffi.NativeFunction<_c_PyException_SetContext>>(
          'PyException_SetContext');
  late final _dart_PyException_SetContext _PyException_SetContext =
      _PyException_SetContext_ptr.asFunction<_dart_PyException_SetContext>();

  ffi.Pointer<ffi.Int8> PyExceptionClass_Name(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyExceptionClass_Name(
      arg0,
    );
  }

  late final _PyExceptionClass_Name_ptr =
      _lookup<ffi.NativeFunction<_c_PyExceptionClass_Name>>(
          'PyExceptionClass_Name');
  late final _dart_PyExceptionClass_Name _PyExceptionClass_Name =
      _PyExceptionClass_Name_ptr.asFunction<_dart_PyExceptionClass_Name>();

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_BaseException =
      _lookup<ffi.Pointer<PyObject>>('PyExc_BaseException');

  ffi.Pointer<PyObject> get PyExc_BaseException => _PyExc_BaseException.value;

  set PyExc_BaseException(ffi.Pointer<PyObject> value) =>
      _PyExc_BaseException.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_Exception =
      _lookup<ffi.Pointer<PyObject>>('PyExc_Exception');

  ffi.Pointer<PyObject> get PyExc_Exception => _PyExc_Exception.value;

  set PyExc_Exception(ffi.Pointer<PyObject> value) =>
      _PyExc_Exception.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_StopAsyncIteration =
      _lookup<ffi.Pointer<PyObject>>('PyExc_StopAsyncIteration');

  ffi.Pointer<PyObject> get PyExc_StopAsyncIteration =>
      _PyExc_StopAsyncIteration.value;

  set PyExc_StopAsyncIteration(ffi.Pointer<PyObject> value) =>
      _PyExc_StopAsyncIteration.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_StopIteration =
      _lookup<ffi.Pointer<PyObject>>('PyExc_StopIteration');

  ffi.Pointer<PyObject> get PyExc_StopIteration => _PyExc_StopIteration.value;

  set PyExc_StopIteration(ffi.Pointer<PyObject> value) =>
      _PyExc_StopIteration.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_GeneratorExit =
      _lookup<ffi.Pointer<PyObject>>('PyExc_GeneratorExit');

  ffi.Pointer<PyObject> get PyExc_GeneratorExit => _PyExc_GeneratorExit.value;

  set PyExc_GeneratorExit(ffi.Pointer<PyObject> value) =>
      _PyExc_GeneratorExit.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ArithmeticError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_ArithmeticError');

  ffi.Pointer<PyObject> get PyExc_ArithmeticError =>
      _PyExc_ArithmeticError.value;

  set PyExc_ArithmeticError(ffi.Pointer<PyObject> value) =>
      _PyExc_ArithmeticError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_LookupError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_LookupError');

  ffi.Pointer<PyObject> get PyExc_LookupError => _PyExc_LookupError.value;

  set PyExc_LookupError(ffi.Pointer<PyObject> value) =>
      _PyExc_LookupError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_AssertionError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_AssertionError');

  ffi.Pointer<PyObject> get PyExc_AssertionError => _PyExc_AssertionError.value;

  set PyExc_AssertionError(ffi.Pointer<PyObject> value) =>
      _PyExc_AssertionError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_AttributeError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_AttributeError');

  ffi.Pointer<PyObject> get PyExc_AttributeError => _PyExc_AttributeError.value;

  set PyExc_AttributeError(ffi.Pointer<PyObject> value) =>
      _PyExc_AttributeError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_BufferError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_BufferError');

  ffi.Pointer<PyObject> get PyExc_BufferError => _PyExc_BufferError.value;

  set PyExc_BufferError(ffi.Pointer<PyObject> value) =>
      _PyExc_BufferError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_EOFError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_EOFError');

  ffi.Pointer<PyObject> get PyExc_EOFError => _PyExc_EOFError.value;

  set PyExc_EOFError(ffi.Pointer<PyObject> value) =>
      _PyExc_EOFError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_FloatingPointError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_FloatingPointError');

  ffi.Pointer<PyObject> get PyExc_FloatingPointError =>
      _PyExc_FloatingPointError.value;

  set PyExc_FloatingPointError(ffi.Pointer<PyObject> value) =>
      _PyExc_FloatingPointError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_OSError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_OSError');

  ffi.Pointer<PyObject> get PyExc_OSError => _PyExc_OSError.value;

  set PyExc_OSError(ffi.Pointer<PyObject> value) =>
      _PyExc_OSError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ImportError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_ImportError');

  ffi.Pointer<PyObject> get PyExc_ImportError => _PyExc_ImportError.value;

  set PyExc_ImportError(ffi.Pointer<PyObject> value) =>
      _PyExc_ImportError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ModuleNotFoundError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_ModuleNotFoundError');

  ffi.Pointer<PyObject> get PyExc_ModuleNotFoundError =>
      _PyExc_ModuleNotFoundError.value;

  set PyExc_ModuleNotFoundError(ffi.Pointer<PyObject> value) =>
      _PyExc_ModuleNotFoundError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_IndexError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_IndexError');

  ffi.Pointer<PyObject> get PyExc_IndexError => _PyExc_IndexError.value;

  set PyExc_IndexError(ffi.Pointer<PyObject> value) =>
      _PyExc_IndexError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_KeyError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_KeyError');

  ffi.Pointer<PyObject> get PyExc_KeyError => _PyExc_KeyError.value;

  set PyExc_KeyError(ffi.Pointer<PyObject> value) =>
      _PyExc_KeyError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_KeyboardInterrupt =
      _lookup<ffi.Pointer<PyObject>>('PyExc_KeyboardInterrupt');

  ffi.Pointer<PyObject> get PyExc_KeyboardInterrupt =>
      _PyExc_KeyboardInterrupt.value;

  set PyExc_KeyboardInterrupt(ffi.Pointer<PyObject> value) =>
      _PyExc_KeyboardInterrupt.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_MemoryError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_MemoryError');

  ffi.Pointer<PyObject> get PyExc_MemoryError => _PyExc_MemoryError.value;

  set PyExc_MemoryError(ffi.Pointer<PyObject> value) =>
      _PyExc_MemoryError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_NameError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_NameError');

  ffi.Pointer<PyObject> get PyExc_NameError => _PyExc_NameError.value;

  set PyExc_NameError(ffi.Pointer<PyObject> value) =>
      _PyExc_NameError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_OverflowError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_OverflowError');

  ffi.Pointer<PyObject> get PyExc_OverflowError => _PyExc_OverflowError.value;

  set PyExc_OverflowError(ffi.Pointer<PyObject> value) =>
      _PyExc_OverflowError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_RuntimeError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_RuntimeError');

  ffi.Pointer<PyObject> get PyExc_RuntimeError => _PyExc_RuntimeError.value;

  set PyExc_RuntimeError(ffi.Pointer<PyObject> value) =>
      _PyExc_RuntimeError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_RecursionError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_RecursionError');

  ffi.Pointer<PyObject> get PyExc_RecursionError => _PyExc_RecursionError.value;

  set PyExc_RecursionError(ffi.Pointer<PyObject> value) =>
      _PyExc_RecursionError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_NotImplementedError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_NotImplementedError');

  ffi.Pointer<PyObject> get PyExc_NotImplementedError =>
      _PyExc_NotImplementedError.value;

  set PyExc_NotImplementedError(ffi.Pointer<PyObject> value) =>
      _PyExc_NotImplementedError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_SyntaxError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_SyntaxError');

  ffi.Pointer<PyObject> get PyExc_SyntaxError => _PyExc_SyntaxError.value;

  set PyExc_SyntaxError(ffi.Pointer<PyObject> value) =>
      _PyExc_SyntaxError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_IndentationError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_IndentationError');

  ffi.Pointer<PyObject> get PyExc_IndentationError =>
      _PyExc_IndentationError.value;

  set PyExc_IndentationError(ffi.Pointer<PyObject> value) =>
      _PyExc_IndentationError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_TabError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_TabError');

  ffi.Pointer<PyObject> get PyExc_TabError => _PyExc_TabError.value;

  set PyExc_TabError(ffi.Pointer<PyObject> value) =>
      _PyExc_TabError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ReferenceError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_ReferenceError');

  ffi.Pointer<PyObject> get PyExc_ReferenceError => _PyExc_ReferenceError.value;

  set PyExc_ReferenceError(ffi.Pointer<PyObject> value) =>
      _PyExc_ReferenceError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_SystemError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_SystemError');

  ffi.Pointer<PyObject> get PyExc_SystemError => _PyExc_SystemError.value;

  set PyExc_SystemError(ffi.Pointer<PyObject> value) =>
      _PyExc_SystemError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_SystemExit =
      _lookup<ffi.Pointer<PyObject>>('PyExc_SystemExit');

  ffi.Pointer<PyObject> get PyExc_SystemExit => _PyExc_SystemExit.value;

  set PyExc_SystemExit(ffi.Pointer<PyObject> value) =>
      _PyExc_SystemExit.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_TypeError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_TypeError');

  ffi.Pointer<PyObject> get PyExc_TypeError => _PyExc_TypeError.value;

  set PyExc_TypeError(ffi.Pointer<PyObject> value) =>
      _PyExc_TypeError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_UnboundLocalError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_UnboundLocalError');

  ffi.Pointer<PyObject> get PyExc_UnboundLocalError =>
      _PyExc_UnboundLocalError.value;

  set PyExc_UnboundLocalError(ffi.Pointer<PyObject> value) =>
      _PyExc_UnboundLocalError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_UnicodeError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_UnicodeError');

  ffi.Pointer<PyObject> get PyExc_UnicodeError => _PyExc_UnicodeError.value;

  set PyExc_UnicodeError(ffi.Pointer<PyObject> value) =>
      _PyExc_UnicodeError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_UnicodeEncodeError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_UnicodeEncodeError');

  ffi.Pointer<PyObject> get PyExc_UnicodeEncodeError =>
      _PyExc_UnicodeEncodeError.value;

  set PyExc_UnicodeEncodeError(ffi.Pointer<PyObject> value) =>
      _PyExc_UnicodeEncodeError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_UnicodeDecodeError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_UnicodeDecodeError');

  ffi.Pointer<PyObject> get PyExc_UnicodeDecodeError =>
      _PyExc_UnicodeDecodeError.value;

  set PyExc_UnicodeDecodeError(ffi.Pointer<PyObject> value) =>
      _PyExc_UnicodeDecodeError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_UnicodeTranslateError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_UnicodeTranslateError');

  ffi.Pointer<PyObject> get PyExc_UnicodeTranslateError =>
      _PyExc_UnicodeTranslateError.value;

  set PyExc_UnicodeTranslateError(ffi.Pointer<PyObject> value) =>
      _PyExc_UnicodeTranslateError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ValueError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_ValueError');

  ffi.Pointer<PyObject> get PyExc_ValueError => _PyExc_ValueError.value;

  set PyExc_ValueError(ffi.Pointer<PyObject> value) =>
      _PyExc_ValueError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ZeroDivisionError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_ZeroDivisionError');

  ffi.Pointer<PyObject> get PyExc_ZeroDivisionError =>
      _PyExc_ZeroDivisionError.value;

  set PyExc_ZeroDivisionError(ffi.Pointer<PyObject> value) =>
      _PyExc_ZeroDivisionError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_BlockingIOError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_BlockingIOError');

  ffi.Pointer<PyObject> get PyExc_BlockingIOError =>
      _PyExc_BlockingIOError.value;

  set PyExc_BlockingIOError(ffi.Pointer<PyObject> value) =>
      _PyExc_BlockingIOError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_BrokenPipeError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_BrokenPipeError');

  ffi.Pointer<PyObject> get PyExc_BrokenPipeError =>
      _PyExc_BrokenPipeError.value;

  set PyExc_BrokenPipeError(ffi.Pointer<PyObject> value) =>
      _PyExc_BrokenPipeError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ChildProcessError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_ChildProcessError');

  ffi.Pointer<PyObject> get PyExc_ChildProcessError =>
      _PyExc_ChildProcessError.value;

  set PyExc_ChildProcessError(ffi.Pointer<PyObject> value) =>
      _PyExc_ChildProcessError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ConnectionError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_ConnectionError');

  ffi.Pointer<PyObject> get PyExc_ConnectionError =>
      _PyExc_ConnectionError.value;

  set PyExc_ConnectionError(ffi.Pointer<PyObject> value) =>
      _PyExc_ConnectionError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ConnectionAbortedError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_ConnectionAbortedError');

  ffi.Pointer<PyObject> get PyExc_ConnectionAbortedError =>
      _PyExc_ConnectionAbortedError.value;

  set PyExc_ConnectionAbortedError(ffi.Pointer<PyObject> value) =>
      _PyExc_ConnectionAbortedError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ConnectionRefusedError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_ConnectionRefusedError');

  ffi.Pointer<PyObject> get PyExc_ConnectionRefusedError =>
      _PyExc_ConnectionRefusedError.value;

  set PyExc_ConnectionRefusedError(ffi.Pointer<PyObject> value) =>
      _PyExc_ConnectionRefusedError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ConnectionResetError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_ConnectionResetError');

  ffi.Pointer<PyObject> get PyExc_ConnectionResetError =>
      _PyExc_ConnectionResetError.value;

  set PyExc_ConnectionResetError(ffi.Pointer<PyObject> value) =>
      _PyExc_ConnectionResetError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_FileExistsError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_FileExistsError');

  ffi.Pointer<PyObject> get PyExc_FileExistsError =>
      _PyExc_FileExistsError.value;

  set PyExc_FileExistsError(ffi.Pointer<PyObject> value) =>
      _PyExc_FileExistsError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_FileNotFoundError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_FileNotFoundError');

  ffi.Pointer<PyObject> get PyExc_FileNotFoundError =>
      _PyExc_FileNotFoundError.value;

  set PyExc_FileNotFoundError(ffi.Pointer<PyObject> value) =>
      _PyExc_FileNotFoundError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_InterruptedError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_InterruptedError');

  ffi.Pointer<PyObject> get PyExc_InterruptedError =>
      _PyExc_InterruptedError.value;

  set PyExc_InterruptedError(ffi.Pointer<PyObject> value) =>
      _PyExc_InterruptedError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_IsADirectoryError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_IsADirectoryError');

  ffi.Pointer<PyObject> get PyExc_IsADirectoryError =>
      _PyExc_IsADirectoryError.value;

  set PyExc_IsADirectoryError(ffi.Pointer<PyObject> value) =>
      _PyExc_IsADirectoryError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_NotADirectoryError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_NotADirectoryError');

  ffi.Pointer<PyObject> get PyExc_NotADirectoryError =>
      _PyExc_NotADirectoryError.value;

  set PyExc_NotADirectoryError(ffi.Pointer<PyObject> value) =>
      _PyExc_NotADirectoryError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_PermissionError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_PermissionError');

  ffi.Pointer<PyObject> get PyExc_PermissionError =>
      _PyExc_PermissionError.value;

  set PyExc_PermissionError(ffi.Pointer<PyObject> value) =>
      _PyExc_PermissionError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ProcessLookupError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_ProcessLookupError');

  ffi.Pointer<PyObject> get PyExc_ProcessLookupError =>
      _PyExc_ProcessLookupError.value;

  set PyExc_ProcessLookupError(ffi.Pointer<PyObject> value) =>
      _PyExc_ProcessLookupError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_TimeoutError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_TimeoutError');

  ffi.Pointer<PyObject> get PyExc_TimeoutError => _PyExc_TimeoutError.value;

  set PyExc_TimeoutError(ffi.Pointer<PyObject> value) =>
      _PyExc_TimeoutError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_EnvironmentError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_EnvironmentError');

  ffi.Pointer<PyObject> get PyExc_EnvironmentError =>
      _PyExc_EnvironmentError.value;

  set PyExc_EnvironmentError(ffi.Pointer<PyObject> value) =>
      _PyExc_EnvironmentError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_IOError =
      _lookup<ffi.Pointer<PyObject>>('PyExc_IOError');

  ffi.Pointer<PyObject> get PyExc_IOError => _PyExc_IOError.value;

  set PyExc_IOError(ffi.Pointer<PyObject> value) =>
      _PyExc_IOError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_Warning =
      _lookup<ffi.Pointer<PyObject>>('PyExc_Warning');

  ffi.Pointer<PyObject> get PyExc_Warning => _PyExc_Warning.value;

  set PyExc_Warning(ffi.Pointer<PyObject> value) =>
      _PyExc_Warning.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_UserWarning =
      _lookup<ffi.Pointer<PyObject>>('PyExc_UserWarning');

  ffi.Pointer<PyObject> get PyExc_UserWarning => _PyExc_UserWarning.value;

  set PyExc_UserWarning(ffi.Pointer<PyObject> value) =>
      _PyExc_UserWarning.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_DeprecationWarning =
      _lookup<ffi.Pointer<PyObject>>('PyExc_DeprecationWarning');

  ffi.Pointer<PyObject> get PyExc_DeprecationWarning =>
      _PyExc_DeprecationWarning.value;

  set PyExc_DeprecationWarning(ffi.Pointer<PyObject> value) =>
      _PyExc_DeprecationWarning.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>>
      _PyExc_PendingDeprecationWarning =
      _lookup<ffi.Pointer<PyObject>>('PyExc_PendingDeprecationWarning');

  ffi.Pointer<PyObject> get PyExc_PendingDeprecationWarning =>
      _PyExc_PendingDeprecationWarning.value;

  set PyExc_PendingDeprecationWarning(ffi.Pointer<PyObject> value) =>
      _PyExc_PendingDeprecationWarning.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_SyntaxWarning =
      _lookup<ffi.Pointer<PyObject>>('PyExc_SyntaxWarning');

  ffi.Pointer<PyObject> get PyExc_SyntaxWarning => _PyExc_SyntaxWarning.value;

  set PyExc_SyntaxWarning(ffi.Pointer<PyObject> value) =>
      _PyExc_SyntaxWarning.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_RuntimeWarning =
      _lookup<ffi.Pointer<PyObject>>('PyExc_RuntimeWarning');

  ffi.Pointer<PyObject> get PyExc_RuntimeWarning => _PyExc_RuntimeWarning.value;

  set PyExc_RuntimeWarning(ffi.Pointer<PyObject> value) =>
      _PyExc_RuntimeWarning.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_FutureWarning =
      _lookup<ffi.Pointer<PyObject>>('PyExc_FutureWarning');

  ffi.Pointer<PyObject> get PyExc_FutureWarning => _PyExc_FutureWarning.value;

  set PyExc_FutureWarning(ffi.Pointer<PyObject> value) =>
      _PyExc_FutureWarning.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ImportWarning =
      _lookup<ffi.Pointer<PyObject>>('PyExc_ImportWarning');

  ffi.Pointer<PyObject> get PyExc_ImportWarning => _PyExc_ImportWarning.value;

  set PyExc_ImportWarning(ffi.Pointer<PyObject> value) =>
      _PyExc_ImportWarning.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_UnicodeWarning =
      _lookup<ffi.Pointer<PyObject>>('PyExc_UnicodeWarning');

  ffi.Pointer<PyObject> get PyExc_UnicodeWarning => _PyExc_UnicodeWarning.value;

  set PyExc_UnicodeWarning(ffi.Pointer<PyObject> value) =>
      _PyExc_UnicodeWarning.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_BytesWarning =
      _lookup<ffi.Pointer<PyObject>>('PyExc_BytesWarning');

  ffi.Pointer<PyObject> get PyExc_BytesWarning => _PyExc_BytesWarning.value;

  set PyExc_BytesWarning(ffi.Pointer<PyObject> value) =>
      _PyExc_BytesWarning.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ResourceWarning =
      _lookup<ffi.Pointer<PyObject>>('PyExc_ResourceWarning');

  ffi.Pointer<PyObject> get PyExc_ResourceWarning =>
      _PyExc_ResourceWarning.value;

  set PyExc_ResourceWarning(ffi.Pointer<PyObject> value) =>
      _PyExc_ResourceWarning.value = value;

  int PyErr_BadArgument() {
    return _PyErr_BadArgument();
  }

  late final _PyErr_BadArgument_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_BadArgument>>('PyErr_BadArgument');
  late final _dart_PyErr_BadArgument _PyErr_BadArgument =
      _PyErr_BadArgument_ptr.asFunction<_dart_PyErr_BadArgument>();

  ffi.Pointer<PyObject> PyErr_NoMemory() {
    return _PyErr_NoMemory();
  }

  late final _PyErr_NoMemory_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_NoMemory>>('PyErr_NoMemory');
  late final _dart_PyErr_NoMemory _PyErr_NoMemory =
      _PyErr_NoMemory_ptr.asFunction<_dart_PyErr_NoMemory>();

  ffi.Pointer<PyObject> PyErr_SetFromErrno(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyErr_SetFromErrno(
      arg0,
    );
  }

  late final _PyErr_SetFromErrno_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_SetFromErrno>>('PyErr_SetFromErrno');
  late final _dart_PyErr_SetFromErrno _PyErr_SetFromErrno =
      _PyErr_SetFromErrno_ptr.asFunction<_dart_PyErr_SetFromErrno>();

  ffi.Pointer<PyObject> PyErr_SetFromErrnoWithFilenameObject(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyErr_SetFromErrnoWithFilenameObject(
      arg0,
      arg1,
    );
  }

  late final _PyErr_SetFromErrnoWithFilenameObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_SetFromErrnoWithFilenameObject>>(
          'PyErr_SetFromErrnoWithFilenameObject');
  late final _dart_PyErr_SetFromErrnoWithFilenameObject
      _PyErr_SetFromErrnoWithFilenameObject =
      _PyErr_SetFromErrnoWithFilenameObject_ptr.asFunction<
          _dart_PyErr_SetFromErrnoWithFilenameObject>();

  ffi.Pointer<PyObject> PyErr_SetFromErrnoWithFilenameObjects(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
    ffi.Pointer<PyObject> arg2,
  ) {
    return _PyErr_SetFromErrnoWithFilenameObjects(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyErr_SetFromErrnoWithFilenameObjects_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_SetFromErrnoWithFilenameObjects>>(
          'PyErr_SetFromErrnoWithFilenameObjects');
  late final _dart_PyErr_SetFromErrnoWithFilenameObjects
      _PyErr_SetFromErrnoWithFilenameObjects =
      _PyErr_SetFromErrnoWithFilenameObjects_ptr.asFunction<
          _dart_PyErr_SetFromErrnoWithFilenameObjects>();

  ffi.Pointer<PyObject> PyErr_SetFromErrnoWithFilename(
    ffi.Pointer<PyObject> exc,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _PyErr_SetFromErrnoWithFilename(
      exc,
      filename,
    );
  }

  late final _PyErr_SetFromErrnoWithFilename_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_SetFromErrnoWithFilename>>(
          'PyErr_SetFromErrnoWithFilename');
  late final _dart_PyErr_SetFromErrnoWithFilename
      _PyErr_SetFromErrnoWithFilename = _PyErr_SetFromErrnoWithFilename_ptr
          .asFunction<_dart_PyErr_SetFromErrnoWithFilename>();

  ffi.Pointer<PyObject> PyErr_Format(
    ffi.Pointer<PyObject> exception,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _PyErr_Format(
      exception,
      format,
    );
  }

  late final _PyErr_Format_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_Format>>('PyErr_Format');
  late final _dart_PyErr_Format _PyErr_Format =
      _PyErr_Format_ptr.asFunction<_dart_PyErr_Format>();

  ffi.Pointer<PyObject> PyErr_FormatV(
    ffi.Pointer<PyObject> exception,
    ffi.Pointer<ffi.Int8> format,
    ffi.Pointer<__va_list_tag> vargs,
  ) {
    return _PyErr_FormatV(
      exception,
      format,
      vargs,
    );
  }

  late final _PyErr_FormatV_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_FormatV>>('PyErr_FormatV');
  late final _dart_PyErr_FormatV _PyErr_FormatV =
      _PyErr_FormatV_ptr.asFunction<_dart_PyErr_FormatV>();

  ffi.Pointer<PyObject> PyErr_SetImportErrorSubclass(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
    ffi.Pointer<PyObject> arg2,
    ffi.Pointer<PyObject> arg3,
  ) {
    return _PyErr_SetImportErrorSubclass(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _PyErr_SetImportErrorSubclass_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_SetImportErrorSubclass>>(
          'PyErr_SetImportErrorSubclass');
  late final _dart_PyErr_SetImportErrorSubclass _PyErr_SetImportErrorSubclass =
      _PyErr_SetImportErrorSubclass_ptr.asFunction<
          _dart_PyErr_SetImportErrorSubclass>();

  ffi.Pointer<PyObject> PyErr_SetImportError(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
    ffi.Pointer<PyObject> arg2,
  ) {
    return _PyErr_SetImportError(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyErr_SetImportError_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_SetImportError>>(
          'PyErr_SetImportError');
  late final _dart_PyErr_SetImportError _PyErr_SetImportError =
      _PyErr_SetImportError_ptr.asFunction<_dart_PyErr_SetImportError>();

  void PyErr_BadInternalCall() {
    return _PyErr_BadInternalCall();
  }

  late final _PyErr_BadInternalCall_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_BadInternalCall>>(
          'PyErr_BadInternalCall');
  late final _dart_PyErr_BadInternalCall _PyErr_BadInternalCall =
      _PyErr_BadInternalCall_ptr.asFunction<_dart_PyErr_BadInternalCall>();

  void PyErr_BadInternalCall_1(
    ffi.Pointer<ffi.Int8> filename,
    int lineno,
  ) {
    return _PyErr_BadInternalCall_1(
      filename,
      lineno,
    );
  }

  late final _PyErr_BadInternalCall_1_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_BadInternalCall_1>>(
          '_PyErr_BadInternalCall');
  late final _dart_PyErr_BadInternalCall_1 _PyErr_BadInternalCall_1 =
      _PyErr_BadInternalCall_1_ptr.asFunction<_dart_PyErr_BadInternalCall_1>();

  ffi.Pointer<PyObject> PyErr_NewException(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<PyObject> base,
    ffi.Pointer<PyObject> dict,
  ) {
    return _PyErr_NewException(
      name,
      base,
      dict,
    );
  }

  late final _PyErr_NewException_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_NewException>>('PyErr_NewException');
  late final _dart_PyErr_NewException _PyErr_NewException =
      _PyErr_NewException_ptr.asFunction<_dart_PyErr_NewException>();

  ffi.Pointer<PyObject> PyErr_NewExceptionWithDoc(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> doc,
    ffi.Pointer<PyObject> base,
    ffi.Pointer<PyObject> dict,
  ) {
    return _PyErr_NewExceptionWithDoc(
      name,
      doc,
      base,
      dict,
    );
  }

  late final _PyErr_NewExceptionWithDoc_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_NewExceptionWithDoc>>(
          'PyErr_NewExceptionWithDoc');
  late final _dart_PyErr_NewExceptionWithDoc _PyErr_NewExceptionWithDoc =
      _PyErr_NewExceptionWithDoc_ptr.asFunction<
          _dart_PyErr_NewExceptionWithDoc>();

  void PyErr_WriteUnraisable(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyErr_WriteUnraisable(
      arg0,
    );
  }

  late final _PyErr_WriteUnraisable_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_WriteUnraisable>>(
          'PyErr_WriteUnraisable');
  late final _dart_PyErr_WriteUnraisable _PyErr_WriteUnraisable =
      _PyErr_WriteUnraisable_ptr.asFunction<_dart_PyErr_WriteUnraisable>();

  int PyErr_CheckSignals() {
    return _PyErr_CheckSignals();
  }

  late final _PyErr_CheckSignals_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_CheckSignals>>('PyErr_CheckSignals');
  late final _dart_PyErr_CheckSignals _PyErr_CheckSignals =
      _PyErr_CheckSignals_ptr.asFunction<_dart_PyErr_CheckSignals>();

  void PyErr_SetInterrupt() {
    return _PyErr_SetInterrupt();
  }

  late final _PyErr_SetInterrupt_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_SetInterrupt>>('PyErr_SetInterrupt');
  late final _dart_PyErr_SetInterrupt _PyErr_SetInterrupt =
      _PyErr_SetInterrupt_ptr.asFunction<_dart_PyErr_SetInterrupt>();

  void PyErr_SyntaxLocation(
    ffi.Pointer<ffi.Int8> filename,
    int lineno,
  ) {
    return _PyErr_SyntaxLocation(
      filename,
      lineno,
    );
  }

  late final _PyErr_SyntaxLocation_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_SyntaxLocation>>(
          'PyErr_SyntaxLocation');
  late final _dart_PyErr_SyntaxLocation _PyErr_SyntaxLocation =
      _PyErr_SyntaxLocation_ptr.asFunction<_dart_PyErr_SyntaxLocation>();

  void PyErr_SyntaxLocationEx(
    ffi.Pointer<ffi.Int8> filename,
    int lineno,
    int col_offset,
  ) {
    return _PyErr_SyntaxLocationEx(
      filename,
      lineno,
      col_offset,
    );
  }

  late final _PyErr_SyntaxLocationEx_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_SyntaxLocationEx>>(
          'PyErr_SyntaxLocationEx');
  late final _dart_PyErr_SyntaxLocationEx _PyErr_SyntaxLocationEx =
      _PyErr_SyntaxLocationEx_ptr.asFunction<_dart_PyErr_SyntaxLocationEx>();

  ffi.Pointer<PyObject> PyErr_ProgramText(
    ffi.Pointer<ffi.Int8> filename,
    int lineno,
  ) {
    return _PyErr_ProgramText(
      filename,
      lineno,
    );
  }

  late final _PyErr_ProgramText_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_ProgramText>>('PyErr_ProgramText');
  late final _dart_PyErr_ProgramText _PyErr_ProgramText =
      _PyErr_ProgramText_ptr.asFunction<_dart_PyErr_ProgramText>();

  ffi.Pointer<PyObject> PyUnicodeDecodeError_Create(
    ffi.Pointer<ffi.Int8> encoding,
    ffi.Pointer<ffi.Int8> object,
    int length,
    int start,
    int end,
    ffi.Pointer<ffi.Int8> reason,
  ) {
    return _PyUnicodeDecodeError_Create(
      encoding,
      object,
      length,
      start,
      end,
      reason,
    );
  }

  late final _PyUnicodeDecodeError_Create_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicodeDecodeError_Create>>(
          'PyUnicodeDecodeError_Create');
  late final _dart_PyUnicodeDecodeError_Create _PyUnicodeDecodeError_Create =
      _PyUnicodeDecodeError_Create_ptr.asFunction<
          _dart_PyUnicodeDecodeError_Create>();

  ffi.Pointer<PyObject> PyUnicodeEncodeError_GetEncoding(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyUnicodeEncodeError_GetEncoding(
      arg0,
    );
  }

  late final _PyUnicodeEncodeError_GetEncoding_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicodeEncodeError_GetEncoding>>(
          'PyUnicodeEncodeError_GetEncoding');
  late final _dart_PyUnicodeEncodeError_GetEncoding
      _PyUnicodeEncodeError_GetEncoding = _PyUnicodeEncodeError_GetEncoding_ptr
          .asFunction<_dart_PyUnicodeEncodeError_GetEncoding>();

  ffi.Pointer<PyObject> PyUnicodeDecodeError_GetEncoding(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyUnicodeDecodeError_GetEncoding(
      arg0,
    );
  }

  late final _PyUnicodeDecodeError_GetEncoding_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicodeDecodeError_GetEncoding>>(
          'PyUnicodeDecodeError_GetEncoding');
  late final _dart_PyUnicodeDecodeError_GetEncoding
      _PyUnicodeDecodeError_GetEncoding = _PyUnicodeDecodeError_GetEncoding_ptr
          .asFunction<_dart_PyUnicodeDecodeError_GetEncoding>();

  ffi.Pointer<PyObject> PyUnicodeEncodeError_GetObject(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyUnicodeEncodeError_GetObject(
      arg0,
    );
  }

  late final _PyUnicodeEncodeError_GetObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicodeEncodeError_GetObject>>(
          'PyUnicodeEncodeError_GetObject');
  late final _dart_PyUnicodeEncodeError_GetObject
      _PyUnicodeEncodeError_GetObject = _PyUnicodeEncodeError_GetObject_ptr
          .asFunction<_dart_PyUnicodeEncodeError_GetObject>();

  ffi.Pointer<PyObject> PyUnicodeDecodeError_GetObject(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyUnicodeDecodeError_GetObject(
      arg0,
    );
  }

  late final _PyUnicodeDecodeError_GetObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicodeDecodeError_GetObject>>(
          'PyUnicodeDecodeError_GetObject');
  late final _dart_PyUnicodeDecodeError_GetObject
      _PyUnicodeDecodeError_GetObject = _PyUnicodeDecodeError_GetObject_ptr
          .asFunction<_dart_PyUnicodeDecodeError_GetObject>();

  ffi.Pointer<PyObject> PyUnicodeTranslateError_GetObject(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyUnicodeTranslateError_GetObject(
      arg0,
    );
  }

  late final _PyUnicodeTranslateError_GetObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicodeTranslateError_GetObject>>(
          'PyUnicodeTranslateError_GetObject');
  late final _dart_PyUnicodeTranslateError_GetObject
      _PyUnicodeTranslateError_GetObject =
      _PyUnicodeTranslateError_GetObject_ptr.asFunction<
          _dart_PyUnicodeTranslateError_GetObject>();

  int PyUnicodeEncodeError_GetStart(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Int64> arg1,
  ) {
    return _PyUnicodeEncodeError_GetStart(
      arg0,
      arg1,
    );
  }

  late final _PyUnicodeEncodeError_GetStart_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicodeEncodeError_GetStart>>(
          'PyUnicodeEncodeError_GetStart');
  late final _dart_PyUnicodeEncodeError_GetStart
      _PyUnicodeEncodeError_GetStart = _PyUnicodeEncodeError_GetStart_ptr
          .asFunction<_dart_PyUnicodeEncodeError_GetStart>();

  int PyUnicodeDecodeError_GetStart(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Int64> arg1,
  ) {
    return _PyUnicodeDecodeError_GetStart(
      arg0,
      arg1,
    );
  }

  late final _PyUnicodeDecodeError_GetStart_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicodeDecodeError_GetStart>>(
          'PyUnicodeDecodeError_GetStart');
  late final _dart_PyUnicodeDecodeError_GetStart
      _PyUnicodeDecodeError_GetStart = _PyUnicodeDecodeError_GetStart_ptr
          .asFunction<_dart_PyUnicodeDecodeError_GetStart>();

  int PyUnicodeTranslateError_GetStart(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Int64> arg1,
  ) {
    return _PyUnicodeTranslateError_GetStart(
      arg0,
      arg1,
    );
  }

  late final _PyUnicodeTranslateError_GetStart_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicodeTranslateError_GetStart>>(
          'PyUnicodeTranslateError_GetStart');
  late final _dart_PyUnicodeTranslateError_GetStart
      _PyUnicodeTranslateError_GetStart = _PyUnicodeTranslateError_GetStart_ptr
          .asFunction<_dart_PyUnicodeTranslateError_GetStart>();

  int PyUnicodeEncodeError_SetStart(
    ffi.Pointer<PyObject> arg0,
    int arg1,
  ) {
    return _PyUnicodeEncodeError_SetStart(
      arg0,
      arg1,
    );
  }

  late final _PyUnicodeEncodeError_SetStart_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicodeEncodeError_SetStart>>(
          'PyUnicodeEncodeError_SetStart');
  late final _dart_PyUnicodeEncodeError_SetStart
      _PyUnicodeEncodeError_SetStart = _PyUnicodeEncodeError_SetStart_ptr
          .asFunction<_dart_PyUnicodeEncodeError_SetStart>();

  int PyUnicodeDecodeError_SetStart(
    ffi.Pointer<PyObject> arg0,
    int arg1,
  ) {
    return _PyUnicodeDecodeError_SetStart(
      arg0,
      arg1,
    );
  }

  late final _PyUnicodeDecodeError_SetStart_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicodeDecodeError_SetStart>>(
          'PyUnicodeDecodeError_SetStart');
  late final _dart_PyUnicodeDecodeError_SetStart
      _PyUnicodeDecodeError_SetStart = _PyUnicodeDecodeError_SetStart_ptr
          .asFunction<_dart_PyUnicodeDecodeError_SetStart>();

  int PyUnicodeTranslateError_SetStart(
    ffi.Pointer<PyObject> arg0,
    int arg1,
  ) {
    return _PyUnicodeTranslateError_SetStart(
      arg0,
      arg1,
    );
  }

  late final _PyUnicodeTranslateError_SetStart_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicodeTranslateError_SetStart>>(
          'PyUnicodeTranslateError_SetStart');
  late final _dart_PyUnicodeTranslateError_SetStart
      _PyUnicodeTranslateError_SetStart = _PyUnicodeTranslateError_SetStart_ptr
          .asFunction<_dart_PyUnicodeTranslateError_SetStart>();

  int PyUnicodeEncodeError_GetEnd(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Int64> arg1,
  ) {
    return _PyUnicodeEncodeError_GetEnd(
      arg0,
      arg1,
    );
  }

  late final _PyUnicodeEncodeError_GetEnd_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicodeEncodeError_GetEnd>>(
          'PyUnicodeEncodeError_GetEnd');
  late final _dart_PyUnicodeEncodeError_GetEnd _PyUnicodeEncodeError_GetEnd =
      _PyUnicodeEncodeError_GetEnd_ptr.asFunction<
          _dart_PyUnicodeEncodeError_GetEnd>();

  int PyUnicodeDecodeError_GetEnd(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Int64> arg1,
  ) {
    return _PyUnicodeDecodeError_GetEnd(
      arg0,
      arg1,
    );
  }

  late final _PyUnicodeDecodeError_GetEnd_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicodeDecodeError_GetEnd>>(
          'PyUnicodeDecodeError_GetEnd');
  late final _dart_PyUnicodeDecodeError_GetEnd _PyUnicodeDecodeError_GetEnd =
      _PyUnicodeDecodeError_GetEnd_ptr.asFunction<
          _dart_PyUnicodeDecodeError_GetEnd>();

  int PyUnicodeTranslateError_GetEnd(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Int64> arg1,
  ) {
    return _PyUnicodeTranslateError_GetEnd(
      arg0,
      arg1,
    );
  }

  late final _PyUnicodeTranslateError_GetEnd_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicodeTranslateError_GetEnd>>(
          'PyUnicodeTranslateError_GetEnd');
  late final _dart_PyUnicodeTranslateError_GetEnd
      _PyUnicodeTranslateError_GetEnd = _PyUnicodeTranslateError_GetEnd_ptr
          .asFunction<_dart_PyUnicodeTranslateError_GetEnd>();

  int PyUnicodeEncodeError_SetEnd(
    ffi.Pointer<PyObject> arg0,
    int arg1,
  ) {
    return _PyUnicodeEncodeError_SetEnd(
      arg0,
      arg1,
    );
  }

  late final _PyUnicodeEncodeError_SetEnd_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicodeEncodeError_SetEnd>>(
          'PyUnicodeEncodeError_SetEnd');
  late final _dart_PyUnicodeEncodeError_SetEnd _PyUnicodeEncodeError_SetEnd =
      _PyUnicodeEncodeError_SetEnd_ptr.asFunction<
          _dart_PyUnicodeEncodeError_SetEnd>();

  int PyUnicodeDecodeError_SetEnd(
    ffi.Pointer<PyObject> arg0,
    int arg1,
  ) {
    return _PyUnicodeDecodeError_SetEnd(
      arg0,
      arg1,
    );
  }

  late final _PyUnicodeDecodeError_SetEnd_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicodeDecodeError_SetEnd>>(
          'PyUnicodeDecodeError_SetEnd');
  late final _dart_PyUnicodeDecodeError_SetEnd _PyUnicodeDecodeError_SetEnd =
      _PyUnicodeDecodeError_SetEnd_ptr.asFunction<
          _dart_PyUnicodeDecodeError_SetEnd>();

  int PyUnicodeTranslateError_SetEnd(
    ffi.Pointer<PyObject> arg0,
    int arg1,
  ) {
    return _PyUnicodeTranslateError_SetEnd(
      arg0,
      arg1,
    );
  }

  late final _PyUnicodeTranslateError_SetEnd_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicodeTranslateError_SetEnd>>(
          'PyUnicodeTranslateError_SetEnd');
  late final _dart_PyUnicodeTranslateError_SetEnd
      _PyUnicodeTranslateError_SetEnd = _PyUnicodeTranslateError_SetEnd_ptr
          .asFunction<_dart_PyUnicodeTranslateError_SetEnd>();

  ffi.Pointer<PyObject> PyUnicodeEncodeError_GetReason(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyUnicodeEncodeError_GetReason(
      arg0,
    );
  }

  late final _PyUnicodeEncodeError_GetReason_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicodeEncodeError_GetReason>>(
          'PyUnicodeEncodeError_GetReason');
  late final _dart_PyUnicodeEncodeError_GetReason
      _PyUnicodeEncodeError_GetReason = _PyUnicodeEncodeError_GetReason_ptr
          .asFunction<_dart_PyUnicodeEncodeError_GetReason>();

  ffi.Pointer<PyObject> PyUnicodeDecodeError_GetReason(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyUnicodeDecodeError_GetReason(
      arg0,
    );
  }

  late final _PyUnicodeDecodeError_GetReason_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicodeDecodeError_GetReason>>(
          'PyUnicodeDecodeError_GetReason');
  late final _dart_PyUnicodeDecodeError_GetReason
      _PyUnicodeDecodeError_GetReason = _PyUnicodeDecodeError_GetReason_ptr
          .asFunction<_dart_PyUnicodeDecodeError_GetReason>();

  ffi.Pointer<PyObject> PyUnicodeTranslateError_GetReason(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyUnicodeTranslateError_GetReason(
      arg0,
    );
  }

  late final _PyUnicodeTranslateError_GetReason_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicodeTranslateError_GetReason>>(
          'PyUnicodeTranslateError_GetReason');
  late final _dart_PyUnicodeTranslateError_GetReason
      _PyUnicodeTranslateError_GetReason =
      _PyUnicodeTranslateError_GetReason_ptr.asFunction<
          _dart_PyUnicodeTranslateError_GetReason>();

  int PyUnicodeEncodeError_SetReason(
    ffi.Pointer<PyObject> exc,
    ffi.Pointer<ffi.Int8> reason,
  ) {
    return _PyUnicodeEncodeError_SetReason(
      exc,
      reason,
    );
  }

  late final _PyUnicodeEncodeError_SetReason_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicodeEncodeError_SetReason>>(
          'PyUnicodeEncodeError_SetReason');
  late final _dart_PyUnicodeEncodeError_SetReason
      _PyUnicodeEncodeError_SetReason = _PyUnicodeEncodeError_SetReason_ptr
          .asFunction<_dart_PyUnicodeEncodeError_SetReason>();

  int PyUnicodeDecodeError_SetReason(
    ffi.Pointer<PyObject> exc,
    ffi.Pointer<ffi.Int8> reason,
  ) {
    return _PyUnicodeDecodeError_SetReason(
      exc,
      reason,
    );
  }

  late final _PyUnicodeDecodeError_SetReason_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicodeDecodeError_SetReason>>(
          'PyUnicodeDecodeError_SetReason');
  late final _dart_PyUnicodeDecodeError_SetReason
      _PyUnicodeDecodeError_SetReason = _PyUnicodeDecodeError_SetReason_ptr
          .asFunction<_dart_PyUnicodeDecodeError_SetReason>();

  int PyUnicodeTranslateError_SetReason(
    ffi.Pointer<PyObject> exc,
    ffi.Pointer<ffi.Int8> reason,
  ) {
    return _PyUnicodeTranslateError_SetReason(
      exc,
      reason,
    );
  }

  late final _PyUnicodeTranslateError_SetReason_ptr =
      _lookup<ffi.NativeFunction<_c_PyUnicodeTranslateError_SetReason>>(
          'PyUnicodeTranslateError_SetReason');
  late final _dart_PyUnicodeTranslateError_SetReason
      _PyUnicodeTranslateError_SetReason =
      _PyUnicodeTranslateError_SetReason_ptr.asFunction<
          _dart_PyUnicodeTranslateError_SetReason>();

  int PyOS_snprintf(
    ffi.Pointer<ffi.Int8> str,
    int size,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _PyOS_snprintf(
      str,
      size,
      format,
    );
  }

  late final _PyOS_snprintf_ptr =
      _lookup<ffi.NativeFunction<_c_PyOS_snprintf>>('PyOS_snprintf');
  late final _dart_PyOS_snprintf _PyOS_snprintf =
      _PyOS_snprintf_ptr.asFunction<_dart_PyOS_snprintf>();

  int PyOS_vsnprintf(
    ffi.Pointer<ffi.Int8> str,
    int size,
    ffi.Pointer<ffi.Int8> format,
    ffi.Pointer<__va_list_tag> va,
  ) {
    return _PyOS_vsnprintf(
      str,
      size,
      format,
      va,
    );
  }

  late final _PyOS_vsnprintf_ptr =
      _lookup<ffi.NativeFunction<_c_PyOS_vsnprintf>>('PyOS_vsnprintf');
  late final _dart_PyOS_vsnprintf _PyOS_vsnprintf =
      _PyOS_vsnprintf_ptr.asFunction<_dart_PyOS_vsnprintf>();

  late final ffi.Pointer<_typeobject> _PyContext_Type =
      _lookup<_typeobject>('PyContext_Type');

  _typeobject get PyContext_Type => _PyContext_Type.ref;

  late final ffi.Pointer<_typeobject> _PyContextVar_Type =
      _lookup<_typeobject>('PyContextVar_Type');

  _typeobject get PyContextVar_Type => _PyContextVar_Type.ref;

  late final ffi.Pointer<_typeobject> _PyContextToken_Type =
      _lookup<_typeobject>('PyContextToken_Type');

  _typeobject get PyContextToken_Type => _PyContextToken_Type.ref;

  ffi.Pointer<PyObject> PyContext_New() {
    return _PyContext_New();
  }

  late final _PyContext_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyContext_New>>('PyContext_New');
  late final _dart_PyContext_New _PyContext_New =
      _PyContext_New_ptr.asFunction<_dart_PyContext_New>();

  ffi.Pointer<PyObject> PyContext_Copy(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyContext_Copy(
      arg0,
    );
  }

  late final _PyContext_Copy_ptr =
      _lookup<ffi.NativeFunction<_c_PyContext_Copy>>('PyContext_Copy');
  late final _dart_PyContext_Copy _PyContext_Copy =
      _PyContext_Copy_ptr.asFunction<_dart_PyContext_Copy>();

  ffi.Pointer<PyObject> PyContext_CopyCurrent() {
    return _PyContext_CopyCurrent();
  }

  late final _PyContext_CopyCurrent_ptr =
      _lookup<ffi.NativeFunction<_c_PyContext_CopyCurrent>>(
          'PyContext_CopyCurrent');
  late final _dart_PyContext_CopyCurrent _PyContext_CopyCurrent =
      _PyContext_CopyCurrent_ptr.asFunction<_dart_PyContext_CopyCurrent>();

  int PyContext_Enter(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyContext_Enter(
      arg0,
    );
  }

  late final _PyContext_Enter_ptr =
      _lookup<ffi.NativeFunction<_c_PyContext_Enter>>('PyContext_Enter');
  late final _dart_PyContext_Enter _PyContext_Enter =
      _PyContext_Enter_ptr.asFunction<_dart_PyContext_Enter>();

  int PyContext_Exit(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyContext_Exit(
      arg0,
    );
  }

  late final _PyContext_Exit_ptr =
      _lookup<ffi.NativeFunction<_c_PyContext_Exit>>('PyContext_Exit');
  late final _dart_PyContext_Exit _PyContext_Exit =
      _PyContext_Exit_ptr.asFunction<_dart_PyContext_Exit>();

  ffi.Pointer<PyObject> PyContextVar_New(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<PyObject> default_value,
  ) {
    return _PyContextVar_New(
      name,
      default_value,
    );
  }

  late final _PyContextVar_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyContextVar_New>>('PyContextVar_New');
  late final _dart_PyContextVar_New _PyContextVar_New =
      _PyContextVar_New_ptr.asFunction<_dart_PyContextVar_New>();

  int PyContextVar_Get(
    ffi.Pointer<PyObject> var_1,
    ffi.Pointer<PyObject> default_value,
    ffi.Pointer<ffi.Pointer<PyObject>> value,
  ) {
    return _PyContextVar_Get(
      var_1,
      default_value,
      value,
    );
  }

  late final _PyContextVar_Get_ptr =
      _lookup<ffi.NativeFunction<_c_PyContextVar_Get>>('PyContextVar_Get');
  late final _dart_PyContextVar_Get _PyContextVar_Get =
      _PyContextVar_Get_ptr.asFunction<_dart_PyContextVar_Get>();

  ffi.Pointer<PyObject> PyContextVar_Set(
    ffi.Pointer<PyObject> var_1,
    ffi.Pointer<PyObject> value,
  ) {
    return _PyContextVar_Set(
      var_1,
      value,
    );
  }

  late final _PyContextVar_Set_ptr =
      _lookup<ffi.NativeFunction<_c_PyContextVar_Set>>('PyContextVar_Set');
  late final _dart_PyContextVar_Set _PyContextVar_Set =
      _PyContextVar_Set_ptr.asFunction<_dart_PyContextVar_Set>();

  int PyContextVar_Reset(
    ffi.Pointer<PyObject> var_1,
    ffi.Pointer<PyObject> token,
  ) {
    return _PyContextVar_Reset(
      var_1,
      token,
    );
  }

  late final _PyContextVar_Reset_ptr =
      _lookup<ffi.NativeFunction<_c_PyContextVar_Reset>>('PyContextVar_Reset');
  late final _dart_PyContextVar_Reset _PyContextVar_Reset =
      _PyContextVar_Reset_ptr.asFunction<_dart_PyContextVar_Reset>();

  ffi.Pointer<PyObject> PyContext_NewHamtForTests() {
    return _PyContext_NewHamtForTests();
  }

  late final _PyContext_NewHamtForTests_ptr =
      _lookup<ffi.NativeFunction<_c_PyContext_NewHamtForTests>>(
          '_PyContext_NewHamtForTests');
  late final _dart_PyContext_NewHamtForTests _PyContext_NewHamtForTests =
      _PyContext_NewHamtForTests_ptr.asFunction<
          _dart_PyContext_NewHamtForTests>();

  int PyContext_ClearFreeList() {
    return _PyContext_ClearFreeList();
  }

  late final _PyContext_ClearFreeList_ptr =
      _lookup<ffi.NativeFunction<_c_PyContext_ClearFreeList>>(
          'PyContext_ClearFreeList');
  late final _dart_PyContext_ClearFreeList _PyContext_ClearFreeList =
      _PyContext_ClearFreeList_ptr.asFunction<_dart_PyContext_ClearFreeList>();

  ffi.Pointer<_arena> PyArena_New() {
    return _PyArena_New();
  }

  late final _PyArena_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyArena_New>>('PyArena_New');
  late final _dart_PyArena_New _PyArena_New =
      _PyArena_New_ptr.asFunction<_dart_PyArena_New>();

  void PyArena_Free(
    ffi.Pointer<_arena> arg0,
  ) {
    return _PyArena_Free(
      arg0,
    );
  }

  late final _PyArena_Free_ptr =
      _lookup<ffi.NativeFunction<_c_PyArena_Free>>('PyArena_Free');
  late final _dart_PyArena_Free _PyArena_Free =
      _PyArena_Free_ptr.asFunction<_dart_PyArena_Free>();

  ffi.Pointer<ffi.Void> PyArena_Malloc(
    ffi.Pointer<_arena> arg0,
    int size,
  ) {
    return _PyArena_Malloc(
      arg0,
      size,
    );
  }

  late final _PyArena_Malloc_ptr =
      _lookup<ffi.NativeFunction<_c_PyArena_Malloc>>('PyArena_Malloc');
  late final _dart_PyArena_Malloc _PyArena_Malloc =
      _PyArena_Malloc_ptr.asFunction<_dart_PyArena_Malloc>();

  int PyArena_AddPyObject(
    ffi.Pointer<_arena> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyArena_AddPyObject(
      arg0,
      arg1,
    );
  }

  late final _PyArena_AddPyObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyArena_AddPyObject>>(
          'PyArena_AddPyObject');
  late final _dart_PyArena_AddPyObject _PyArena_AddPyObject =
      _PyArena_AddPyObject_ptr.asFunction<_dart_PyArena_AddPyObject>();

  ffi.Pointer<PyObject> Py_VaBuildValue_SizeT(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<__va_list_tag> arg1,
  ) {
    return _Py_VaBuildValue_SizeT(
      arg0,
      arg1,
    );
  }

  late final _Py_VaBuildValue_SizeT_ptr =
      _lookup<ffi.NativeFunction<_c_Py_VaBuildValue_SizeT>>(
          '_Py_VaBuildValue_SizeT');
  late final _dart_Py_VaBuildValue_SizeT _Py_VaBuildValue_SizeT =
      _Py_VaBuildValue_SizeT_ptr.asFunction<_dart_Py_VaBuildValue_SizeT>();

  ffi.Pointer<ffi.Pointer<PyObject>> Py_VaBuildStack_SizeT(
    ffi.Pointer<ffi.Pointer<PyObject>> small_stack,
    int small_stack_len,
    ffi.Pointer<ffi.Int8> format,
    ffi.Pointer<__va_list_tag> va,
    ffi.Pointer<ffi.Int64> p_nargs,
  ) {
    return _Py_VaBuildStack_SizeT(
      small_stack,
      small_stack_len,
      format,
      va,
      p_nargs,
    );
  }

  late final _Py_VaBuildStack_SizeT_ptr =
      _lookup<ffi.NativeFunction<_c_Py_VaBuildStack_SizeT>>(
          '_Py_VaBuildStack_SizeT');
  late final _dart_Py_VaBuildStack_SizeT _Py_VaBuildStack_SizeT =
      _Py_VaBuildStack_SizeT_ptr.asFunction<_dart_Py_VaBuildStack_SizeT>();

  int PyArg_Parse(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _PyArg_Parse(
      arg0,
      arg1,
    );
  }

  late final _PyArg_Parse_ptr =
      _lookup<ffi.NativeFunction<_c_PyArg_Parse>>('PyArg_Parse');
  late final _dart_PyArg_Parse _PyArg_Parse =
      _PyArg_Parse_ptr.asFunction<_dart_PyArg_Parse>();

  int PyArg_ParseTuple(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _PyArg_ParseTuple(
      arg0,
      arg1,
    );
  }

  late final _PyArg_ParseTuple_ptr =
      _lookup<ffi.NativeFunction<_c_PyArg_ParseTuple>>('PyArg_ParseTuple');
  late final _dart_PyArg_ParseTuple _PyArg_ParseTuple =
      _PyArg_ParseTuple_ptr.asFunction<_dart_PyArg_ParseTuple>();

  int PyArg_ParseTupleAndKeywords(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg3,
  ) {
    return _PyArg_ParseTupleAndKeywords(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _PyArg_ParseTupleAndKeywords_ptr =
      _lookup<ffi.NativeFunction<_c_PyArg_ParseTupleAndKeywords>>(
          'PyArg_ParseTupleAndKeywords');
  late final _dart_PyArg_ParseTupleAndKeywords _PyArg_ParseTupleAndKeywords =
      _PyArg_ParseTupleAndKeywords_ptr.asFunction<
          _dart_PyArg_ParseTupleAndKeywords>();

  int PyArg_VaParse(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _PyArg_VaParse(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyArg_VaParse_ptr =
      _lookup<ffi.NativeFunction<_c_PyArg_VaParse>>('PyArg_VaParse');
  late final _dart_PyArg_VaParse _PyArg_VaParse =
      _PyArg_VaParse_ptr.asFunction<_dart_PyArg_VaParse>();

  int PyArg_VaParseTupleAndKeywords(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg3,
    ffi.Pointer<__va_list_tag> arg4,
  ) {
    return _PyArg_VaParseTupleAndKeywords(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _PyArg_VaParseTupleAndKeywords_ptr =
      _lookup<ffi.NativeFunction<_c_PyArg_VaParseTupleAndKeywords>>(
          'PyArg_VaParseTupleAndKeywords');
  late final _dart_PyArg_VaParseTupleAndKeywords
      _PyArg_VaParseTupleAndKeywords = _PyArg_VaParseTupleAndKeywords_ptr
          .asFunction<_dart_PyArg_VaParseTupleAndKeywords>();

  int PyArg_ValidateKeywordArguments(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyArg_ValidateKeywordArguments(
      arg0,
    );
  }

  late final _PyArg_ValidateKeywordArguments_ptr =
      _lookup<ffi.NativeFunction<_c_PyArg_ValidateKeywordArguments>>(
          'PyArg_ValidateKeywordArguments');
  late final _dart_PyArg_ValidateKeywordArguments
      _PyArg_ValidateKeywordArguments = _PyArg_ValidateKeywordArguments_ptr
          .asFunction<_dart_PyArg_ValidateKeywordArguments>();

  int PyArg_UnpackTuple(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    int arg3,
  ) {
    return _PyArg_UnpackTuple(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _PyArg_UnpackTuple_ptr =
      _lookup<ffi.NativeFunction<_c_PyArg_UnpackTuple>>('PyArg_UnpackTuple');
  late final _dart_PyArg_UnpackTuple _PyArg_UnpackTuple =
      _PyArg_UnpackTuple_ptr.asFunction<_dart_PyArg_UnpackTuple>();

  ffi.Pointer<PyObject> Py_BuildValue(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _Py_BuildValue(
      arg0,
    );
  }

  late final _Py_BuildValue_ptr =
      _lookup<ffi.NativeFunction<_c_Py_BuildValue>>('Py_BuildValue');
  late final _dart_Py_BuildValue _Py_BuildValue =
      _Py_BuildValue_ptr.asFunction<_dart_Py_BuildValue>();

  ffi.Pointer<PyObject> Py_BuildValue_SizeT(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _Py_BuildValue_SizeT(
      arg0,
    );
  }

  late final _Py_BuildValue_SizeT_ptr =
      _lookup<ffi.NativeFunction<_c_Py_BuildValue_SizeT>>(
          '_Py_BuildValue_SizeT');
  late final _dart_Py_BuildValue_SizeT _Py_BuildValue_SizeT =
      _Py_BuildValue_SizeT_ptr.asFunction<_dart_Py_BuildValue_SizeT>();

  int PyArg_UnpackStack(
    ffi.Pointer<ffi.Pointer<PyObject>> args,
    int nargs,
    ffi.Pointer<ffi.Int8> name,
    int min,
    int max,
  ) {
    return _PyArg_UnpackStack(
      args,
      nargs,
      name,
      min,
      max,
    );
  }

  late final _PyArg_UnpackStack_ptr =
      _lookup<ffi.NativeFunction<_c_PyArg_UnpackStack>>('_PyArg_UnpackStack');
  late final _dart_PyArg_UnpackStack _PyArg_UnpackStack =
      _PyArg_UnpackStack_ptr.asFunction<_dart_PyArg_UnpackStack>();

  int PyArg_NoKeywords(
    ffi.Pointer<ffi.Int8> funcname,
    ffi.Pointer<PyObject> kwargs,
  ) {
    return _PyArg_NoKeywords(
      funcname,
      kwargs,
    );
  }

  late final _PyArg_NoKeywords_ptr =
      _lookup<ffi.NativeFunction<_c_PyArg_NoKeywords>>('_PyArg_NoKeywords');
  late final _dart_PyArg_NoKeywords _PyArg_NoKeywords =
      _PyArg_NoKeywords_ptr.asFunction<_dart_PyArg_NoKeywords>();

  int PyArg_NoPositional(
    ffi.Pointer<ffi.Int8> funcname,
    ffi.Pointer<PyObject> args,
  ) {
    return _PyArg_NoPositional(
      funcname,
      args,
    );
  }

  late final _PyArg_NoPositional_ptr =
      _lookup<ffi.NativeFunction<_c_PyArg_NoPositional>>('_PyArg_NoPositional');
  late final _dart_PyArg_NoPositional _PyArg_NoPositional =
      _PyArg_NoPositional_ptr.asFunction<_dart_PyArg_NoPositional>();

  void PyArg_BadArgument(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<PyObject> arg3,
  ) {
    return _PyArg_BadArgument(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _PyArg_BadArgument_ptr =
      _lookup<ffi.NativeFunction<_c_PyArg_BadArgument>>('_PyArg_BadArgument');
  late final _dart_PyArg_BadArgument _PyArg_BadArgument =
      _PyArg_BadArgument_ptr.asFunction<_dart_PyArg_BadArgument>();

  int PyArg_CheckPositional(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _PyArg_CheckPositional(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _PyArg_CheckPositional_ptr =
      _lookup<ffi.NativeFunction<_c_PyArg_CheckPositional>>(
          '_PyArg_CheckPositional');
  late final _dart_PyArg_CheckPositional _PyArg_CheckPositional =
      _PyArg_CheckPositional_ptr.asFunction<_dart_PyArg_CheckPositional>();

  ffi.Pointer<PyObject> Py_VaBuildValue(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<__va_list_tag> arg1,
  ) {
    return _Py_VaBuildValue(
      arg0,
      arg1,
    );
  }

  late final _Py_VaBuildValue_ptr =
      _lookup<ffi.NativeFunction<_c_Py_VaBuildValue>>('Py_VaBuildValue');
  late final _dart_Py_VaBuildValue _Py_VaBuildValue =
      _Py_VaBuildValue_ptr.asFunction<_dart_Py_VaBuildValue>();

  ffi.Pointer<ffi.Pointer<PyObject>> Py_VaBuildStack(
    ffi.Pointer<ffi.Pointer<PyObject>> small_stack,
    int small_stack_len,
    ffi.Pointer<ffi.Int8> format,
    ffi.Pointer<__va_list_tag> va,
    ffi.Pointer<ffi.Int64> p_nargs,
  ) {
    return _Py_VaBuildStack(
      small_stack,
      small_stack_len,
      format,
      va,
      p_nargs,
    );
  }

  late final _Py_VaBuildStack_ptr =
      _lookup<ffi.NativeFunction<_c_Py_VaBuildStack>>('_Py_VaBuildStack');
  late final _dart_Py_VaBuildStack _Py_VaBuildStack =
      _Py_VaBuildStack_ptr.asFunction<_dart_Py_VaBuildStack>();

  int PyArg_ParseTupleAndKeywordsFast(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
    ffi.Pointer<_PyArg_Parser> arg2,
  ) {
    return _PyArg_ParseTupleAndKeywordsFast(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyArg_ParseTupleAndKeywordsFast_ptr =
      _lookup<ffi.NativeFunction<_c_PyArg_ParseTupleAndKeywordsFast>>(
          '_PyArg_ParseTupleAndKeywordsFast');
  late final _dart_PyArg_ParseTupleAndKeywordsFast
      _PyArg_ParseTupleAndKeywordsFast = _PyArg_ParseTupleAndKeywordsFast_ptr
          .asFunction<_dart_PyArg_ParseTupleAndKeywordsFast>();

  int PyArg_ParseStack(
    ffi.Pointer<ffi.Pointer<PyObject>> args,
    int nargs,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _PyArg_ParseStack(
      args,
      nargs,
      format,
    );
  }

  late final _PyArg_ParseStack_ptr =
      _lookup<ffi.NativeFunction<_c_PyArg_ParseStack>>('_PyArg_ParseStack');
  late final _dart_PyArg_ParseStack _PyArg_ParseStack =
      _PyArg_ParseStack_ptr.asFunction<_dart_PyArg_ParseStack>();

  int PyArg_ParseStackAndKeywords(
    ffi.Pointer<ffi.Pointer<PyObject>> args,
    int nargs,
    ffi.Pointer<PyObject> kwnames,
    ffi.Pointer<_PyArg_Parser> arg3,
  ) {
    return _PyArg_ParseStackAndKeywords(
      args,
      nargs,
      kwnames,
      arg3,
    );
  }

  late final _PyArg_ParseStackAndKeywords_ptr =
      _lookup<ffi.NativeFunction<_c_PyArg_ParseStackAndKeywords>>(
          '_PyArg_ParseStackAndKeywords');
  late final _dart_PyArg_ParseStackAndKeywords _PyArg_ParseStackAndKeywords =
      _PyArg_ParseStackAndKeywords_ptr.asFunction<
          _dart_PyArg_ParseStackAndKeywords>();

  int PyArg_VaParseTupleAndKeywordsFast(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
    ffi.Pointer<_PyArg_Parser> arg2,
    ffi.Pointer<__va_list_tag> arg3,
  ) {
    return _PyArg_VaParseTupleAndKeywordsFast(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _PyArg_VaParseTupleAndKeywordsFast_ptr =
      _lookup<ffi.NativeFunction<_c_PyArg_VaParseTupleAndKeywordsFast>>(
          '_PyArg_VaParseTupleAndKeywordsFast');
  late final _dart_PyArg_VaParseTupleAndKeywordsFast
      _PyArg_VaParseTupleAndKeywordsFast =
      _PyArg_VaParseTupleAndKeywordsFast_ptr.asFunction<
          _dart_PyArg_VaParseTupleAndKeywordsFast>();

  ffi.Pointer<ffi.Pointer<PyObject>> PyArg_UnpackKeywords(
    ffi.Pointer<ffi.Pointer<PyObject>> args,
    int nargs,
    ffi.Pointer<PyObject> kwargs,
    ffi.Pointer<PyObject> kwnames,
    ffi.Pointer<_PyArg_Parser> parser,
    int minpos,
    int maxpos,
    int minkw,
    ffi.Pointer<ffi.Pointer<PyObject>> buf,
  ) {
    return _PyArg_UnpackKeywords(
      args,
      nargs,
      kwargs,
      kwnames,
      parser,
      minpos,
      maxpos,
      minkw,
      buf,
    );
  }

  late final _PyArg_UnpackKeywords_ptr =
      _lookup<ffi.NativeFunction<_c_PyArg_UnpackKeywords>>(
          '_PyArg_UnpackKeywords');
  late final _dart_PyArg_UnpackKeywords _PyArg_UnpackKeywords =
      _PyArg_UnpackKeywords_ptr.asFunction<_dart_PyArg_UnpackKeywords>();

  void PyArg_Fini() {
    return _PyArg_Fini();
  }

  late final _PyArg_Fini_ptr =
      _lookup<ffi.NativeFunction<_c_PyArg_Fini>>('_PyArg_Fini');
  late final _dart_PyArg_Fini _PyArg_Fini =
      _PyArg_Fini_ptr.asFunction<_dart_PyArg_Fini>();

  int PyModule_AddObject(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<PyObject> arg2,
  ) {
    return _PyModule_AddObject(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyModule_AddObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyModule_AddObject>>('PyModule_AddObject');
  late final _dart_PyModule_AddObject _PyModule_AddObject =
      _PyModule_AddObject_ptr.asFunction<_dart_PyModule_AddObject>();

  int PyModule_AddIntConstant(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _PyModule_AddIntConstant(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyModule_AddIntConstant_ptr =
      _lookup<ffi.NativeFunction<_c_PyModule_AddIntConstant>>(
          'PyModule_AddIntConstant');
  late final _dart_PyModule_AddIntConstant _PyModule_AddIntConstant =
      _PyModule_AddIntConstant_ptr.asFunction<_dart_PyModule_AddIntConstant>();

  int PyModule_AddStringConstant(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    return _PyModule_AddStringConstant(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyModule_AddStringConstant_ptr =
      _lookup<ffi.NativeFunction<_c_PyModule_AddStringConstant>>(
          'PyModule_AddStringConstant');
  late final _dart_PyModule_AddStringConstant _PyModule_AddStringConstant =
      _PyModule_AddStringConstant_ptr.asFunction<
          _dart_PyModule_AddStringConstant>();

  int PyModule_SetDocString(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _PyModule_SetDocString(
      arg0,
      arg1,
    );
  }

  late final _PyModule_SetDocString_ptr =
      _lookup<ffi.NativeFunction<_c_PyModule_SetDocString>>(
          'PyModule_SetDocString');
  late final _dart_PyModule_SetDocString _PyModule_SetDocString =
      _PyModule_SetDocString_ptr.asFunction<_dart_PyModule_SetDocString>();

  int PyModule_AddFunctions(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyMethodDef> arg1,
  ) {
    return _PyModule_AddFunctions(
      arg0,
      arg1,
    );
  }

  late final _PyModule_AddFunctions_ptr =
      _lookup<ffi.NativeFunction<_c_PyModule_AddFunctions>>(
          'PyModule_AddFunctions');
  late final _dart_PyModule_AddFunctions _PyModule_AddFunctions =
      _PyModule_AddFunctions_ptr.asFunction<_dart_PyModule_AddFunctions>();

  int PyModule_ExecDef(
    ffi.Pointer<PyObject> module,
    ffi.Pointer<PyModuleDef> def,
  ) {
    return _PyModule_ExecDef(
      module,
      def,
    );
  }

  late final _PyModule_ExecDef_ptr =
      _lookup<ffi.NativeFunction<_c_PyModule_ExecDef>>('PyModule_ExecDef');
  late final _dart_PyModule_ExecDef _PyModule_ExecDef =
      _PyModule_ExecDef_ptr.asFunction<_dart_PyModule_ExecDef>();

  ffi.Pointer<PyObject> PyModule_Create2(
    ffi.Pointer<PyModuleDef> arg0,
    int apiver,
  ) {
    return _PyModule_Create2(
      arg0,
      apiver,
    );
  }

  late final _PyModule_Create2_ptr =
      _lookup<ffi.NativeFunction<_c_PyModule_Create2>>('PyModule_Create2');
  late final _dart_PyModule_Create2 _PyModule_Create2 =
      _PyModule_Create2_ptr.asFunction<_dart_PyModule_Create2>();

  ffi.Pointer<PyObject> PyModule_CreateInitialized(
    ffi.Pointer<PyModuleDef> arg0,
    int apiver,
  ) {
    return _PyModule_CreateInitialized(
      arg0,
      apiver,
    );
  }

  late final _PyModule_CreateInitialized_ptr =
      _lookup<ffi.NativeFunction<_c_PyModule_CreateInitialized>>(
          '_PyModule_CreateInitialized');
  late final _dart_PyModule_CreateInitialized _PyModule_CreateInitialized =
      _PyModule_CreateInitialized_ptr.asFunction<
          _dart_PyModule_CreateInitialized>();

  ffi.Pointer<PyObject> PyModule_FromDefAndSpec2(
    ffi.Pointer<PyModuleDef> def,
    ffi.Pointer<PyObject> spec,
    int module_api_version,
  ) {
    return _PyModule_FromDefAndSpec2(
      def,
      spec,
      module_api_version,
    );
  }

  late final _PyModule_FromDefAndSpec2_ptr =
      _lookup<ffi.NativeFunction<_c_PyModule_FromDefAndSpec2>>(
          'PyModule_FromDefAndSpec2');
  late final _dart_PyModule_FromDefAndSpec2 _PyModule_FromDefAndSpec2 =
      _PyModule_FromDefAndSpec2_ptr.asFunction<
          _dart_PyModule_FromDefAndSpec2>();

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _Py_PackageContext =
      _lookup<ffi.Pointer<ffi.Int8>>('_Py_PackageContext');

  ffi.Pointer<ffi.Int8> get Py_PackageContext => _Py_PackageContext.value;

  set Py_PackageContext(ffi.Pointer<ffi.Int8> value) =>
      _Py_PackageContext.value = value;

  late final ffi.Pointer<_typeobject> _PyCode_Type =
      _lookup<_typeobject>('PyCode_Type');

  _typeobject get PyCode_Type => _PyCode_Type.ref;

  ffi.Pointer<PyCodeObject> PyCode_New(
    int arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<PyObject> arg5,
    ffi.Pointer<PyObject> arg6,
    ffi.Pointer<PyObject> arg7,
    ffi.Pointer<PyObject> arg8,
    ffi.Pointer<PyObject> arg9,
    ffi.Pointer<PyObject> arg10,
    ffi.Pointer<PyObject> arg11,
    ffi.Pointer<PyObject> arg12,
    int arg13,
    ffi.Pointer<PyObject> arg14,
  ) {
    return _PyCode_New(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
      arg13,
      arg14,
    );
  }

  late final _PyCode_New_ptr =
      _lookup<ffi.NativeFunction<_c_PyCode_New>>('PyCode_New');
  late final _dart_PyCode_New _PyCode_New =
      _PyCode_New_ptr.asFunction<_dart_PyCode_New>();

  ffi.Pointer<PyCodeObject> PyCode_NewWithPosOnlyArgs(
    int arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    ffi.Pointer<PyObject> arg6,
    ffi.Pointer<PyObject> arg7,
    ffi.Pointer<PyObject> arg8,
    ffi.Pointer<PyObject> arg9,
    ffi.Pointer<PyObject> arg10,
    ffi.Pointer<PyObject> arg11,
    ffi.Pointer<PyObject> arg12,
    ffi.Pointer<PyObject> arg13,
    int arg14,
    ffi.Pointer<PyObject> arg15,
  ) {
    return _PyCode_NewWithPosOnlyArgs(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
      arg13,
      arg14,
      arg15,
    );
  }

  late final _PyCode_NewWithPosOnlyArgs_ptr =
      _lookup<ffi.NativeFunction<_c_PyCode_NewWithPosOnlyArgs>>(
          'PyCode_NewWithPosOnlyArgs');
  late final _dart_PyCode_NewWithPosOnlyArgs _PyCode_NewWithPosOnlyArgs =
      _PyCode_NewWithPosOnlyArgs_ptr.asFunction<
          _dart_PyCode_NewWithPosOnlyArgs>();

  ffi.Pointer<PyCodeObject> PyCode_NewEmpty(
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Int8> funcname,
    int firstlineno,
  ) {
    return _PyCode_NewEmpty(
      filename,
      funcname,
      firstlineno,
    );
  }

  late final _PyCode_NewEmpty_ptr =
      _lookup<ffi.NativeFunction<_c_PyCode_NewEmpty>>('PyCode_NewEmpty');
  late final _dart_PyCode_NewEmpty _PyCode_NewEmpty =
      _PyCode_NewEmpty_ptr.asFunction<_dart_PyCode_NewEmpty>();

  int PyCode_Addr2Line(
    ffi.Pointer<PyCodeObject> arg0,
    int arg1,
  ) {
    return _PyCode_Addr2Line(
      arg0,
      arg1,
    );
  }

  late final _PyCode_Addr2Line_ptr =
      _lookup<ffi.NativeFunction<_c_PyCode_Addr2Line>>('PyCode_Addr2Line');
  late final _dart_PyCode_Addr2Line _PyCode_Addr2Line =
      _PyCode_Addr2Line_ptr.asFunction<_dart_PyCode_Addr2Line>();

  int PyCode_CheckLineNumber(
    ffi.Pointer<PyCodeObject> co,
    int lasti,
    ffi.Pointer<PyAddrPair> bounds,
  ) {
    return _PyCode_CheckLineNumber(
      co,
      lasti,
      bounds,
    );
  }

  late final _PyCode_CheckLineNumber_ptr =
      _lookup<ffi.NativeFunction<_c_PyCode_CheckLineNumber>>(
          '_PyCode_CheckLineNumber');
  late final _dart_PyCode_CheckLineNumber _PyCode_CheckLineNumber =
      _PyCode_CheckLineNumber_ptr.asFunction<_dart_PyCode_CheckLineNumber>();

  ffi.Pointer<PyObject> PyCode_ConstantKey(
    ffi.Pointer<PyObject> obj,
  ) {
    return _PyCode_ConstantKey(
      obj,
    );
  }

  late final _PyCode_ConstantKey_ptr =
      _lookup<ffi.NativeFunction<_c_PyCode_ConstantKey>>('_PyCode_ConstantKey');
  late final _dart_PyCode_ConstantKey _PyCode_ConstantKey =
      _PyCode_ConstantKey_ptr.asFunction<_dart_PyCode_ConstantKey>();

  ffi.Pointer<PyObject> PyCode_Optimize(
    ffi.Pointer<PyObject> code,
    ffi.Pointer<PyObject> consts,
    ffi.Pointer<PyObject> names,
    ffi.Pointer<PyObject> lnotab,
  ) {
    return _PyCode_Optimize(
      code,
      consts,
      names,
      lnotab,
    );
  }

  late final _PyCode_Optimize_ptr =
      _lookup<ffi.NativeFunction<_c_PyCode_Optimize>>('PyCode_Optimize');
  late final _dart_PyCode_Optimize _PyCode_Optimize =
      _PyCode_Optimize_ptr.asFunction<_dart_PyCode_Optimize>();

  int PyCode_GetExtra(
    ffi.Pointer<PyObject> code,
    int index,
    ffi.Pointer<ffi.Pointer<ffi.Void>> extra,
  ) {
    return _PyCode_GetExtra(
      code,
      index,
      extra,
    );
  }

  late final _PyCode_GetExtra_ptr =
      _lookup<ffi.NativeFunction<_c_PyCode_GetExtra>>('_PyCode_GetExtra');
  late final _dart_PyCode_GetExtra _PyCode_GetExtra =
      _PyCode_GetExtra_ptr.asFunction<_dart_PyCode_GetExtra>();

  int PyCode_SetExtra(
    ffi.Pointer<PyObject> code,
    int index,
    ffi.Pointer<ffi.Void> extra,
  ) {
    return _PyCode_SetExtra(
      code,
      index,
      extra,
    );
  }

  late final _PyCode_SetExtra_ptr =
      _lookup<ffi.NativeFunction<_c_PyCode_SetExtra>>('_PyCode_SetExtra');
  late final _dart_PyCode_SetExtra _PyCode_SetExtra =
      _PyCode_SetExtra_ptr.asFunction<_dart_PyCode_SetExtra>();

  ffi.Pointer<PyCodeObject> PyNode_Compile(
    ffi.Pointer<_node> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _PyNode_Compile(
      arg0,
      arg1,
    );
  }

  late final _PyNode_Compile_ptr =
      _lookup<ffi.NativeFunction<_c_PyNode_Compile>>('PyNode_Compile');
  late final _dart_PyNode_Compile _PyNode_Compile =
      _PyNode_Compile_ptr.asFunction<_dart_PyNode_Compile>();

  ffi.Pointer<PyCodeObject> PyAST_CompileEx(
    ffi.Pointer<_mod> mod,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<PyCompilerFlags> flags,
    int optimize,
    ffi.Pointer<_arena> arena,
  ) {
    return _PyAST_CompileEx(
      mod,
      filename,
      flags,
      optimize,
      arena,
    );
  }

  late final _PyAST_CompileEx_ptr =
      _lookup<ffi.NativeFunction<_c_PyAST_CompileEx>>('PyAST_CompileEx');
  late final _dart_PyAST_CompileEx _PyAST_CompileEx =
      _PyAST_CompileEx_ptr.asFunction<_dart_PyAST_CompileEx>();

  ffi.Pointer<PyCodeObject> PyAST_CompileObject(
    ffi.Pointer<_mod> mod,
    ffi.Pointer<PyObject> filename,
    ffi.Pointer<PyCompilerFlags> flags,
    int optimize,
    ffi.Pointer<_arena> arena,
  ) {
    return _PyAST_CompileObject(
      mod,
      filename,
      flags,
      optimize,
      arena,
    );
  }

  late final _PyAST_CompileObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyAST_CompileObject>>(
          'PyAST_CompileObject');
  late final _dart_PyAST_CompileObject _PyAST_CompileObject =
      _PyAST_CompileObject_ptr.asFunction<_dart_PyAST_CompileObject>();

  ffi.Pointer<PyFutureFeatures> PyFuture_FromAST(
    ffi.Pointer<_mod> mod,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _PyFuture_FromAST(
      mod,
      filename,
    );
  }

  late final _PyFuture_FromAST_ptr =
      _lookup<ffi.NativeFunction<_c_PyFuture_FromAST>>('PyFuture_FromAST');
  late final _dart_PyFuture_FromAST _PyFuture_FromAST =
      _PyFuture_FromAST_ptr.asFunction<_dart_PyFuture_FromAST>();

  ffi.Pointer<PyFutureFeatures> PyFuture_FromASTObject(
    ffi.Pointer<_mod> mod,
    ffi.Pointer<PyObject> filename,
  ) {
    return _PyFuture_FromASTObject(
      mod,
      filename,
    );
  }

  late final _PyFuture_FromASTObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyFuture_FromASTObject>>(
          'PyFuture_FromASTObject');
  late final _dart_PyFuture_FromASTObject _PyFuture_FromASTObject =
      _PyFuture_FromASTObject_ptr.asFunction<_dart_PyFuture_FromASTObject>();

  ffi.Pointer<PyObject> Py_Mangle(
    ffi.Pointer<PyObject> p,
    ffi.Pointer<PyObject> name,
  ) {
    return _Py_Mangle(
      p,
      name,
    );
  }

  late final _Py_Mangle_ptr =
      _lookup<ffi.NativeFunction<_c_Py_Mangle>>('_Py_Mangle');
  late final _dart_Py_Mangle _Py_Mangle =
      _Py_Mangle_ptr.asFunction<_dart_Py_Mangle>();

  int PyCompile_OpcodeStackEffect(
    int opcode,
    int oparg,
  ) {
    return _PyCompile_OpcodeStackEffect(
      opcode,
      oparg,
    );
  }

  late final _PyCompile_OpcodeStackEffect_ptr =
      _lookup<ffi.NativeFunction<_c_PyCompile_OpcodeStackEffect>>(
          'PyCompile_OpcodeStackEffect');
  late final _dart_PyCompile_OpcodeStackEffect _PyCompile_OpcodeStackEffect =
      _PyCompile_OpcodeStackEffect_ptr.asFunction<
          _dart_PyCompile_OpcodeStackEffect>();

  int PyCompile_OpcodeStackEffectWithJump(
    int opcode,
    int oparg,
    int jump,
  ) {
    return _PyCompile_OpcodeStackEffectWithJump(
      opcode,
      oparg,
      jump,
    );
  }

  late final _PyCompile_OpcodeStackEffectWithJump_ptr =
      _lookup<ffi.NativeFunction<_c_PyCompile_OpcodeStackEffectWithJump>>(
          'PyCompile_OpcodeStackEffectWithJump');
  late final _dart_PyCompile_OpcodeStackEffectWithJump
      _PyCompile_OpcodeStackEffectWithJump =
      _PyCompile_OpcodeStackEffectWithJump_ptr.asFunction<
          _dart_PyCompile_OpcodeStackEffectWithJump>();

  int PyAST_Optimize(
    ffi.Pointer<_mod> arg0,
    ffi.Pointer<_arena> arena,
    int optimize,
  ) {
    return _PyAST_Optimize(
      arg0,
      arena,
      optimize,
    );
  }

  late final _PyAST_Optimize_ptr =
      _lookup<ffi.NativeFunction<_c_PyAST_Optimize>>('_PyAST_Optimize');
  late final _dart_PyAST_Optimize _PyAST_Optimize =
      _PyAST_Optimize_ptr.asFunction<_dart_PyAST_Optimize>();

  int PyRun_SimpleStringFlags(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<PyCompilerFlags> arg1,
  ) {
    return _PyRun_SimpleStringFlags(
      arg0,
      arg1,
    );
  }

  late final _PyRun_SimpleStringFlags_ptr =
      _lookup<ffi.NativeFunction<_c_PyRun_SimpleStringFlags>>(
          'PyRun_SimpleStringFlags');
  late final _dart_PyRun_SimpleStringFlags _PyRun_SimpleStringFlags =
      _PyRun_SimpleStringFlags_ptr.asFunction<_dart_PyRun_SimpleStringFlags>();

  int PyRun_AnyFileExFlags(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Int8> filename,
    int closeit,
    ffi.Pointer<PyCompilerFlags> flags,
  ) {
    return _PyRun_AnyFileExFlags(
      fp,
      filename,
      closeit,
      flags,
    );
  }

  late final _PyRun_AnyFileExFlags_ptr =
      _lookup<ffi.NativeFunction<_c_PyRun_AnyFileExFlags>>(
          'PyRun_AnyFileExFlags');
  late final _dart_PyRun_AnyFileExFlags _PyRun_AnyFileExFlags =
      _PyRun_AnyFileExFlags_ptr.asFunction<_dart_PyRun_AnyFileExFlags>();

  int PyRun_SimpleFileExFlags(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Int8> filename,
    int closeit,
    ffi.Pointer<PyCompilerFlags> flags,
  ) {
    return _PyRun_SimpleFileExFlags(
      fp,
      filename,
      closeit,
      flags,
    );
  }

  late final _PyRun_SimpleFileExFlags_ptr =
      _lookup<ffi.NativeFunction<_c_PyRun_SimpleFileExFlags>>(
          'PyRun_SimpleFileExFlags');
  late final _dart_PyRun_SimpleFileExFlags _PyRun_SimpleFileExFlags =
      _PyRun_SimpleFileExFlags_ptr.asFunction<_dart_PyRun_SimpleFileExFlags>();

  int PyRun_InteractiveOneFlags(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<PyCompilerFlags> flags,
  ) {
    return _PyRun_InteractiveOneFlags(
      fp,
      filename,
      flags,
    );
  }

  late final _PyRun_InteractiveOneFlags_ptr =
      _lookup<ffi.NativeFunction<_c_PyRun_InteractiveOneFlags>>(
          'PyRun_InteractiveOneFlags');
  late final _dart_PyRun_InteractiveOneFlags _PyRun_InteractiveOneFlags =
      _PyRun_InteractiveOneFlags_ptr.asFunction<
          _dart_PyRun_InteractiveOneFlags>();

  int PyRun_InteractiveOneObject(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<PyObject> filename,
    ffi.Pointer<PyCompilerFlags> flags,
  ) {
    return _PyRun_InteractiveOneObject(
      fp,
      filename,
      flags,
    );
  }

  late final _PyRun_InteractiveOneObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyRun_InteractiveOneObject>>(
          'PyRun_InteractiveOneObject');
  late final _dart_PyRun_InteractiveOneObject _PyRun_InteractiveOneObject =
      _PyRun_InteractiveOneObject_ptr.asFunction<
          _dart_PyRun_InteractiveOneObject>();

  int PyRun_InteractiveLoopFlags(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<PyCompilerFlags> flags,
  ) {
    return _PyRun_InteractiveLoopFlags(
      fp,
      filename,
      flags,
    );
  }

  late final _PyRun_InteractiveLoopFlags_ptr =
      _lookup<ffi.NativeFunction<_c_PyRun_InteractiveLoopFlags>>(
          'PyRun_InteractiveLoopFlags');
  late final _dart_PyRun_InteractiveLoopFlags _PyRun_InteractiveLoopFlags =
      _PyRun_InteractiveLoopFlags_ptr.asFunction<
          _dart_PyRun_InteractiveLoopFlags>();

  ffi.Pointer<_mod> PyParser_ASTFromString(
    ffi.Pointer<ffi.Int8> s,
    ffi.Pointer<ffi.Int8> filename,
    int start,
    ffi.Pointer<PyCompilerFlags> flags,
    ffi.Pointer<_arena> arena,
  ) {
    return _PyParser_ASTFromString(
      s,
      filename,
      start,
      flags,
      arena,
    );
  }

  late final _PyParser_ASTFromString_ptr =
      _lookup<ffi.NativeFunction<_c_PyParser_ASTFromString>>(
          'PyParser_ASTFromString');
  late final _dart_PyParser_ASTFromString _PyParser_ASTFromString =
      _PyParser_ASTFromString_ptr.asFunction<_dart_PyParser_ASTFromString>();

  ffi.Pointer<_mod> PyParser_ASTFromStringObject(
    ffi.Pointer<ffi.Int8> s,
    ffi.Pointer<PyObject> filename,
    int start,
    ffi.Pointer<PyCompilerFlags> flags,
    ffi.Pointer<_arena> arena,
  ) {
    return _PyParser_ASTFromStringObject(
      s,
      filename,
      start,
      flags,
      arena,
    );
  }

  late final _PyParser_ASTFromStringObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyParser_ASTFromStringObject>>(
          'PyParser_ASTFromStringObject');
  late final _dart_PyParser_ASTFromStringObject _PyParser_ASTFromStringObject =
      _PyParser_ASTFromStringObject_ptr.asFunction<
          _dart_PyParser_ASTFromStringObject>();

  ffi.Pointer<_mod> PyParser_ASTFromFile(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Int8> enc,
    int start,
    ffi.Pointer<ffi.Int8> ps1,
    ffi.Pointer<ffi.Int8> ps2,
    ffi.Pointer<PyCompilerFlags> flags,
    ffi.Pointer<ffi.Int32> errcode,
    ffi.Pointer<_arena> arena,
  ) {
    return _PyParser_ASTFromFile(
      fp,
      filename,
      enc,
      start,
      ps1,
      ps2,
      flags,
      errcode,
      arena,
    );
  }

  late final _PyParser_ASTFromFile_ptr =
      _lookup<ffi.NativeFunction<_c_PyParser_ASTFromFile>>(
          'PyParser_ASTFromFile');
  late final _dart_PyParser_ASTFromFile _PyParser_ASTFromFile =
      _PyParser_ASTFromFile_ptr.asFunction<_dart_PyParser_ASTFromFile>();

  ffi.Pointer<_mod> PyParser_ASTFromFileObject(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<PyObject> filename,
    ffi.Pointer<ffi.Int8> enc,
    int start,
    ffi.Pointer<ffi.Int8> ps1,
    ffi.Pointer<ffi.Int8> ps2,
    ffi.Pointer<PyCompilerFlags> flags,
    ffi.Pointer<ffi.Int32> errcode,
    ffi.Pointer<_arena> arena,
  ) {
    return _PyParser_ASTFromFileObject(
      fp,
      filename,
      enc,
      start,
      ps1,
      ps2,
      flags,
      errcode,
      arena,
    );
  }

  late final _PyParser_ASTFromFileObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyParser_ASTFromFileObject>>(
          'PyParser_ASTFromFileObject');
  late final _dart_PyParser_ASTFromFileObject _PyParser_ASTFromFileObject =
      _PyParser_ASTFromFileObject_ptr.asFunction<
          _dart_PyParser_ASTFromFileObject>();

  ffi.Pointer<_node> PyParser_SimpleParseStringFlags(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
  ) {
    return _PyParser_SimpleParseStringFlags(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyParser_SimpleParseStringFlags_ptr =
      _lookup<ffi.NativeFunction<_c_PyParser_SimpleParseStringFlags>>(
          'PyParser_SimpleParseStringFlags');
  late final _dart_PyParser_SimpleParseStringFlags
      _PyParser_SimpleParseStringFlags = _PyParser_SimpleParseStringFlags_ptr
          .asFunction<_dart_PyParser_SimpleParseStringFlags>();

  ffi.Pointer<_node> PyParser_SimpleParseStringFlagsFilename(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    int arg3,
  ) {
    return _PyParser_SimpleParseStringFlagsFilename(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _PyParser_SimpleParseStringFlagsFilename_ptr =
      _lookup<ffi.NativeFunction<_c_PyParser_SimpleParseStringFlagsFilename>>(
          'PyParser_SimpleParseStringFlagsFilename');
  late final _dart_PyParser_SimpleParseStringFlagsFilename
      _PyParser_SimpleParseStringFlagsFilename =
      _PyParser_SimpleParseStringFlagsFilename_ptr.asFunction<
          _dart_PyParser_SimpleParseStringFlagsFilename>();

  ffi.Pointer<_node> PyParser_SimpleParseFileFlags(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    int arg3,
  ) {
    return _PyParser_SimpleParseFileFlags(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _PyParser_SimpleParseFileFlags_ptr =
      _lookup<ffi.NativeFunction<_c_PyParser_SimpleParseFileFlags>>(
          'PyParser_SimpleParseFileFlags');
  late final _dart_PyParser_SimpleParseFileFlags
      _PyParser_SimpleParseFileFlags = _PyParser_SimpleParseFileFlags_ptr
          .asFunction<_dart_PyParser_SimpleParseFileFlags>();

  ffi.Pointer<PyObject> PyRun_StringFlags(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<PyObject> arg2,
    ffi.Pointer<PyObject> arg3,
    ffi.Pointer<PyCompilerFlags> arg4,
  ) {
    return _PyRun_StringFlags(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _PyRun_StringFlags_ptr =
      _lookup<ffi.NativeFunction<_c_PyRun_StringFlags>>('PyRun_StringFlags');
  late final _dart_PyRun_StringFlags _PyRun_StringFlags =
      _PyRun_StringFlags_ptr.asFunction<_dart_PyRun_StringFlags>();

  ffi.Pointer<PyObject> PyRun_FileExFlags(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Int8> filename,
    int start,
    ffi.Pointer<PyObject> globals,
    ffi.Pointer<PyObject> locals,
    int closeit,
    ffi.Pointer<PyCompilerFlags> flags,
  ) {
    return _PyRun_FileExFlags(
      fp,
      filename,
      start,
      globals,
      locals,
      closeit,
      flags,
    );
  }

  late final _PyRun_FileExFlags_ptr =
      _lookup<ffi.NativeFunction<_c_PyRun_FileExFlags>>('PyRun_FileExFlags');
  late final _dart_PyRun_FileExFlags _PyRun_FileExFlags =
      _PyRun_FileExFlags_ptr.asFunction<_dart_PyRun_FileExFlags>();

  ffi.Pointer<PyObject> Py_CompileStringExFlags(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Int8> filename,
    int start,
    ffi.Pointer<PyCompilerFlags> flags,
    int optimize,
  ) {
    return _Py_CompileStringExFlags(
      str,
      filename,
      start,
      flags,
      optimize,
    );
  }

  late final _Py_CompileStringExFlags_ptr =
      _lookup<ffi.NativeFunction<_c_Py_CompileStringExFlags>>(
          'Py_CompileStringExFlags');
  late final _dart_Py_CompileStringExFlags _Py_CompileStringExFlags =
      _Py_CompileStringExFlags_ptr.asFunction<_dart_Py_CompileStringExFlags>();

  ffi.Pointer<PyObject> Py_CompileStringObject(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<PyObject> filename,
    int start,
    ffi.Pointer<PyCompilerFlags> flags,
    int optimize,
  ) {
    return _Py_CompileStringObject(
      str,
      filename,
      start,
      flags,
      optimize,
    );
  }

  late final _Py_CompileStringObject_ptr =
      _lookup<ffi.NativeFunction<_c_Py_CompileStringObject>>(
          'Py_CompileStringObject');
  late final _dart_Py_CompileStringObject _Py_CompileStringObject =
      _Py_CompileStringObject_ptr.asFunction<_dart_Py_CompileStringObject>();

  ffi.Pointer<symtable> Py_SymtableString(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Int8> filename,
    int start,
  ) {
    return _Py_SymtableString(
      str,
      filename,
      start,
    );
  }

  late final _Py_SymtableString_ptr =
      _lookup<ffi.NativeFunction<_c_Py_SymtableString>>('Py_SymtableString');
  late final _dart_Py_SymtableString _Py_SymtableString =
      _Py_SymtableString_ptr.asFunction<_dart_Py_SymtableString>();

  ffi.Pointer<ffi.Int8> Py_SourceAsString(
    ffi.Pointer<PyObject> cmd,
    ffi.Pointer<ffi.Int8> funcname,
    ffi.Pointer<ffi.Int8> what,
    ffi.Pointer<PyCompilerFlags> cf,
    ffi.Pointer<ffi.Pointer<PyObject>> cmd_copy,
  ) {
    return _Py_SourceAsString(
      cmd,
      funcname,
      what,
      cf,
      cmd_copy,
    );
  }

  late final _Py_SourceAsString_ptr =
      _lookup<ffi.NativeFunction<_c_Py_SourceAsString>>('_Py_SourceAsString');
  late final _dart_Py_SourceAsString _Py_SourceAsString =
      _Py_SourceAsString_ptr.asFunction<_dart_Py_SourceAsString>();

  ffi.Pointer<symtable> Py_SymtableStringObject(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<PyObject> filename,
    int start,
  ) {
    return _Py_SymtableStringObject(
      str,
      filename,
      start,
    );
  }

  late final _Py_SymtableStringObject_ptr =
      _lookup<ffi.NativeFunction<_c_Py_SymtableStringObject>>(
          'Py_SymtableStringObject');
  late final _dart_Py_SymtableStringObject _Py_SymtableStringObject =
      _Py_SymtableStringObject_ptr.asFunction<_dart_Py_SymtableStringObject>();

  ffi.Pointer<symtable> Py_SymtableStringObjectFlags(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<PyObject> filename,
    int start,
    ffi.Pointer<PyCompilerFlags> flags,
  ) {
    return _Py_SymtableStringObjectFlags(
      str,
      filename,
      start,
      flags,
    );
  }

  late final _Py_SymtableStringObjectFlags_ptr =
      _lookup<ffi.NativeFunction<_c_Py_SymtableStringObjectFlags>>(
          '_Py_SymtableStringObjectFlags');
  late final _dart_Py_SymtableStringObjectFlags _Py_SymtableStringObjectFlags =
      _Py_SymtableStringObjectFlags_ptr.asFunction<
          _dart_Py_SymtableStringObjectFlags>();

  void PyErr_Print() {
    return _PyErr_Print();
  }

  late final _PyErr_Print_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_Print>>('PyErr_Print');
  late final _dart_PyErr_Print _PyErr_Print =
      _PyErr_Print_ptr.asFunction<_dart_PyErr_Print>();

  void PyErr_PrintEx(
    int arg0,
  ) {
    return _PyErr_PrintEx(
      arg0,
    );
  }

  late final _PyErr_PrintEx_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_PrintEx>>('PyErr_PrintEx');
  late final _dart_PyErr_PrintEx _PyErr_PrintEx =
      _PyErr_PrintEx_ptr.asFunction<_dart_PyErr_PrintEx>();

  void PyErr_Display(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
    ffi.Pointer<PyObject> arg2,
  ) {
    return _PyErr_Display(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyErr_Display_ptr =
      _lookup<ffi.NativeFunction<_c_PyErr_Display>>('PyErr_Display');
  late final _dart_PyErr_Display _PyErr_Display =
      _PyErr_Display_ptr.asFunction<_dart_PyErr_Display>();

  ffi.Pointer<PyObject> PyRun_String(
    ffi.Pointer<ffi.Int8> str,
    int s,
    ffi.Pointer<PyObject> g,
    ffi.Pointer<PyObject> l,
  ) {
    return _PyRun_String(
      str,
      s,
      g,
      l,
    );
  }

  late final _PyRun_String_ptr =
      _lookup<ffi.NativeFunction<_c_PyRun_String>>('PyRun_String');
  late final _dart_PyRun_String _PyRun_String =
      _PyRun_String_ptr.asFunction<_dart_PyRun_String>();

  int PyRun_AnyFile(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _PyRun_AnyFile(
      fp,
      name,
    );
  }

  late final _PyRun_AnyFile_ptr =
      _lookup<ffi.NativeFunction<_c_PyRun_AnyFile>>('PyRun_AnyFile');
  late final _dart_PyRun_AnyFile _PyRun_AnyFile =
      _PyRun_AnyFile_ptr.asFunction<_dart_PyRun_AnyFile>();

  int PyRun_AnyFileEx(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Int8> name,
    int closeit,
  ) {
    return _PyRun_AnyFileEx(
      fp,
      name,
      closeit,
    );
  }

  late final _PyRun_AnyFileEx_ptr =
      _lookup<ffi.NativeFunction<_c_PyRun_AnyFileEx>>('PyRun_AnyFileEx');
  late final _dart_PyRun_AnyFileEx _PyRun_AnyFileEx =
      _PyRun_AnyFileEx_ptr.asFunction<_dart_PyRun_AnyFileEx>();

  int PyRun_AnyFileFlags(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<PyCompilerFlags> arg2,
  ) {
    return _PyRun_AnyFileFlags(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyRun_AnyFileFlags_ptr =
      _lookup<ffi.NativeFunction<_c_PyRun_AnyFileFlags>>('PyRun_AnyFileFlags');
  late final _dart_PyRun_AnyFileFlags _PyRun_AnyFileFlags =
      _PyRun_AnyFileFlags_ptr.asFunction<_dart_PyRun_AnyFileFlags>();

  int PyRun_SimpleString(
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _PyRun_SimpleString(
      s,
    );
  }

  late final _PyRun_SimpleString_ptr =
      _lookup<ffi.NativeFunction<_c_PyRun_SimpleString>>('PyRun_SimpleString');
  late final _dart_PyRun_SimpleString _PyRun_SimpleString =
      _PyRun_SimpleString_ptr.asFunction<_dart_PyRun_SimpleString>();

  int PyRun_SimpleFile(
    ffi.Pointer<FILE> f,
    ffi.Pointer<ffi.Int8> p,
  ) {
    return _PyRun_SimpleFile(
      f,
      p,
    );
  }

  late final _PyRun_SimpleFile_ptr =
      _lookup<ffi.NativeFunction<_c_PyRun_SimpleFile>>('PyRun_SimpleFile');
  late final _dart_PyRun_SimpleFile _PyRun_SimpleFile =
      _PyRun_SimpleFile_ptr.asFunction<_dart_PyRun_SimpleFile>();

  int PyRun_SimpleFileEx(
    ffi.Pointer<FILE> f,
    ffi.Pointer<ffi.Int8> p,
    int c,
  ) {
    return _PyRun_SimpleFileEx(
      f,
      p,
      c,
    );
  }

  late final _PyRun_SimpleFileEx_ptr =
      _lookup<ffi.NativeFunction<_c_PyRun_SimpleFileEx>>('PyRun_SimpleFileEx');
  late final _dart_PyRun_SimpleFileEx _PyRun_SimpleFileEx =
      _PyRun_SimpleFileEx_ptr.asFunction<_dart_PyRun_SimpleFileEx>();

  int PyRun_InteractiveOne(
    ffi.Pointer<FILE> f,
    ffi.Pointer<ffi.Int8> p,
  ) {
    return _PyRun_InteractiveOne(
      f,
      p,
    );
  }

  late final _PyRun_InteractiveOne_ptr =
      _lookup<ffi.NativeFunction<_c_PyRun_InteractiveOne>>(
          'PyRun_InteractiveOne');
  late final _dart_PyRun_InteractiveOne _PyRun_InteractiveOne =
      _PyRun_InteractiveOne_ptr.asFunction<_dart_PyRun_InteractiveOne>();

  int PyRun_InteractiveLoop(
    ffi.Pointer<FILE> f,
    ffi.Pointer<ffi.Int8> p,
  ) {
    return _PyRun_InteractiveLoop(
      f,
      p,
    );
  }

  late final _PyRun_InteractiveLoop_ptr =
      _lookup<ffi.NativeFunction<_c_PyRun_InteractiveLoop>>(
          'PyRun_InteractiveLoop');
  late final _dart_PyRun_InteractiveLoop _PyRun_InteractiveLoop =
      _PyRun_InteractiveLoop_ptr.asFunction<_dart_PyRun_InteractiveLoop>();

  ffi.Pointer<PyObject> PyRun_File(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Int8> p,
    int s,
    ffi.Pointer<PyObject> g,
    ffi.Pointer<PyObject> l,
  ) {
    return _PyRun_File(
      fp,
      p,
      s,
      g,
      l,
    );
  }

  late final _PyRun_File_ptr =
      _lookup<ffi.NativeFunction<_c_PyRun_File>>('PyRun_File');
  late final _dart_PyRun_File _PyRun_File =
      _PyRun_File_ptr.asFunction<_dart_PyRun_File>();

  ffi.Pointer<PyObject> PyRun_FileEx(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Int8> p,
    int s,
    ffi.Pointer<PyObject> g,
    ffi.Pointer<PyObject> l,
    int c,
  ) {
    return _PyRun_FileEx(
      fp,
      p,
      s,
      g,
      l,
      c,
    );
  }

  late final _PyRun_FileEx_ptr =
      _lookup<ffi.NativeFunction<_c_PyRun_FileEx>>('PyRun_FileEx');
  late final _dart_PyRun_FileEx _PyRun_FileEx =
      _PyRun_FileEx_ptr.asFunction<_dart_PyRun_FileEx>();

  ffi.Pointer<PyObject> PyRun_FileFlags(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Int8> p,
    int s,
    ffi.Pointer<PyObject> g,
    ffi.Pointer<PyObject> l,
    ffi.Pointer<PyCompilerFlags> flags,
  ) {
    return _PyRun_FileFlags(
      fp,
      p,
      s,
      g,
      l,
      flags,
    );
  }

  late final _PyRun_FileFlags_ptr =
      _lookup<ffi.NativeFunction<_c_PyRun_FileFlags>>('PyRun_FileFlags');
  late final _dart_PyRun_FileFlags _PyRun_FileFlags =
      _PyRun_FileFlags_ptr.asFunction<_dart_PyRun_FileFlags>();

  ffi.Pointer<ffi.Int8> PyOS_Readline(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<FILE> arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    return _PyOS_Readline(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyOS_Readline_ptr =
      _lookup<ffi.NativeFunction<_c_PyOS_Readline>>('PyOS_Readline');
  late final _dart_PyOS_Readline _PyOS_Readline =
      _PyOS_Readline_ptr.asFunction<_dart_PyOS_Readline>();

  late final ffi.Pointer<ffi.Pointer<ffi.NativeFunction<_typedefC_6>>>
      _PyOS_InputHook =
      _lookup<ffi.Pointer<ffi.NativeFunction<_typedefC_6>>>('PyOS_InputHook');

  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> get PyOS_InputHook =>
      _PyOS_InputHook.value;

  set PyOS_InputHook(ffi.Pointer<ffi.NativeFunction<_typedefC_6>> value) =>
      _PyOS_InputHook.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.NativeFunction<_typedefC_7>>>
      _PyOS_ReadlineFunctionPointer =
      _lookup<ffi.Pointer<ffi.NativeFunction<_typedefC_7>>>(
          'PyOS_ReadlineFunctionPointer');

  ffi.Pointer<ffi.NativeFunction<_typedefC_7>>
      get PyOS_ReadlineFunctionPointer => _PyOS_ReadlineFunctionPointer.value;

  set PyOS_ReadlineFunctionPointer(
          ffi.Pointer<ffi.NativeFunction<_typedefC_7>> value) =>
      _PyOS_ReadlineFunctionPointer.value = value;

  late final ffi.Pointer<ffi.Pointer<_ts>> _PyOS_ReadlineTState =
      _lookup<ffi.Pointer<_ts>>('_PyOS_ReadlineTState');

  ffi.Pointer<_ts> get PyOS_ReadlineTState => _PyOS_ReadlineTState.value;

  set PyOS_ReadlineTState(ffi.Pointer<_ts> value) =>
      _PyOS_ReadlineTState.value = value;

  void Py_Initialize() {
    return _Py_Initialize();
  }

  late final _Py_Initialize_ptr =
      _lookup<ffi.NativeFunction<_c_Py_Initialize>>('Py_Initialize');
  late final _dart_Py_Initialize _Py_Initialize =
      _Py_Initialize_ptr.asFunction<_dart_Py_Initialize>();

  void Py_InitializeEx(
    int arg0,
  ) {
    return _Py_InitializeEx(
      arg0,
    );
  }

  late final _Py_InitializeEx_ptr =
      _lookup<ffi.NativeFunction<_c_Py_InitializeEx>>('Py_InitializeEx');
  late final _dart_Py_InitializeEx _Py_InitializeEx =
      _Py_InitializeEx_ptr.asFunction<_dart_Py_InitializeEx>();

  void Py_Finalize() {
    return _Py_Finalize();
  }

  late final _Py_Finalize_ptr =
      _lookup<ffi.NativeFunction<_c_Py_Finalize>>('Py_Finalize');
  late final _dart_Py_Finalize _Py_Finalize =
      _Py_Finalize_ptr.asFunction<_dart_Py_Finalize>();

  int Py_FinalizeEx() {
    return _Py_FinalizeEx();
  }

  late final _Py_FinalizeEx_ptr =
      _lookup<ffi.NativeFunction<_c_Py_FinalizeEx>>('Py_FinalizeEx');
  late final _dart_Py_FinalizeEx _Py_FinalizeEx =
      _Py_FinalizeEx_ptr.asFunction<_dart_Py_FinalizeEx>();

  int Py_IsInitialized() {
    return _Py_IsInitialized();
  }

  late final _Py_IsInitialized_ptr =
      _lookup<ffi.NativeFunction<_c_Py_IsInitialized>>('Py_IsInitialized');
  late final _dart_Py_IsInitialized _Py_IsInitialized =
      _Py_IsInitialized_ptr.asFunction<_dart_Py_IsInitialized>();

  ffi.Pointer<_ts> Py_NewInterpreter() {
    return _Py_NewInterpreter();
  }

  late final _Py_NewInterpreter_ptr =
      _lookup<ffi.NativeFunction<_c_Py_NewInterpreter>>('Py_NewInterpreter');
  late final _dart_Py_NewInterpreter _Py_NewInterpreter =
      _Py_NewInterpreter_ptr.asFunction<_dart_Py_NewInterpreter>();

  void Py_EndInterpreter(
    ffi.Pointer<_ts> arg0,
  ) {
    return _Py_EndInterpreter(
      arg0,
    );
  }

  late final _Py_EndInterpreter_ptr =
      _lookup<ffi.NativeFunction<_c_Py_EndInterpreter>>('Py_EndInterpreter');
  late final _dart_Py_EndInterpreter _Py_EndInterpreter =
      _Py_EndInterpreter_ptr.asFunction<_dart_Py_EndInterpreter>();

  int Py_AtExit(
    ffi.Pointer<ffi.NativeFunction<_typedefC_8>> func,
  ) {
    return _Py_AtExit(
      func,
    );
  }

  late final _Py_AtExit_ptr =
      _lookup<ffi.NativeFunction<_c_Py_AtExit>>('Py_AtExit');
  late final _dart_Py_AtExit _Py_AtExit =
      _Py_AtExit_ptr.asFunction<_dart_Py_AtExit>();

  void Py_Exit(
    int arg0,
  ) {
    return _Py_Exit(
      arg0,
    );
  }

  late final _Py_Exit_ptr = _lookup<ffi.NativeFunction<_c_Py_Exit>>('Py_Exit');
  late final _dart_Py_Exit _Py_Exit = _Py_Exit_ptr.asFunction<_dart_Py_Exit>();

  int Py_Main(
    int argc,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> argv,
  ) {
    return _Py_Main(
      argc,
      argv,
    );
  }

  late final _Py_Main_ptr = _lookup<ffi.NativeFunction<_c_Py_Main>>('Py_Main');
  late final _dart_Py_Main _Py_Main = _Py_Main_ptr.asFunction<_dart_Py_Main>();

  int Py_BytesMain(
    int argc,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
  ) {
    return _Py_BytesMain(
      argc,
      argv,
    );
  }

  late final _Py_BytesMain_ptr =
      _lookup<ffi.NativeFunction<_c_Py_BytesMain>>('Py_BytesMain');
  late final _dart_Py_BytesMain _Py_BytesMain =
      _Py_BytesMain_ptr.asFunction<_dart_Py_BytesMain>();

  void Py_SetProgramName(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    return _Py_SetProgramName(
      arg0,
    );
  }

  late final _Py_SetProgramName_ptr =
      _lookup<ffi.NativeFunction<_c_Py_SetProgramName>>('Py_SetProgramName');
  late final _dart_Py_SetProgramName _Py_SetProgramName =
      _Py_SetProgramName_ptr.asFunction<_dart_Py_SetProgramName>();

  ffi.Pointer<ffi.Int32> Py_GetProgramName() {
    return _Py_GetProgramName();
  }

  late final _Py_GetProgramName_ptr =
      _lookup<ffi.NativeFunction<_c_Py_GetProgramName>>('Py_GetProgramName');
  late final _dart_Py_GetProgramName _Py_GetProgramName =
      _Py_GetProgramName_ptr.asFunction<_dart_Py_GetProgramName>();

  void Py_SetPythonHome(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    return _Py_SetPythonHome(
      arg0,
    );
  }

  late final _Py_SetPythonHome_ptr =
      _lookup<ffi.NativeFunction<_c_Py_SetPythonHome>>('Py_SetPythonHome');
  late final _dart_Py_SetPythonHome _Py_SetPythonHome =
      _Py_SetPythonHome_ptr.asFunction<_dart_Py_SetPythonHome>();

  ffi.Pointer<ffi.Int32> Py_GetPythonHome() {
    return _Py_GetPythonHome();
  }

  late final _Py_GetPythonHome_ptr =
      _lookup<ffi.NativeFunction<_c_Py_GetPythonHome>>('Py_GetPythonHome');
  late final _dart_Py_GetPythonHome _Py_GetPythonHome =
      _Py_GetPythonHome_ptr.asFunction<_dart_Py_GetPythonHome>();

  ffi.Pointer<ffi.Int32> Py_GetProgramFullPath() {
    return _Py_GetProgramFullPath();
  }

  late final _Py_GetProgramFullPath_ptr =
      _lookup<ffi.NativeFunction<_c_Py_GetProgramFullPath>>(
          'Py_GetProgramFullPath');
  late final _dart_Py_GetProgramFullPath _Py_GetProgramFullPath =
      _Py_GetProgramFullPath_ptr.asFunction<_dart_Py_GetProgramFullPath>();

  ffi.Pointer<ffi.Int32> Py_GetPrefix() {
    return _Py_GetPrefix();
  }

  late final _Py_GetPrefix_ptr =
      _lookup<ffi.NativeFunction<_c_Py_GetPrefix>>('Py_GetPrefix');
  late final _dart_Py_GetPrefix _Py_GetPrefix =
      _Py_GetPrefix_ptr.asFunction<_dart_Py_GetPrefix>();

  ffi.Pointer<ffi.Int32> Py_GetExecPrefix() {
    return _Py_GetExecPrefix();
  }

  late final _Py_GetExecPrefix_ptr =
      _lookup<ffi.NativeFunction<_c_Py_GetExecPrefix>>('Py_GetExecPrefix');
  late final _dart_Py_GetExecPrefix _Py_GetExecPrefix =
      _Py_GetExecPrefix_ptr.asFunction<_dart_Py_GetExecPrefix>();

  ffi.Pointer<ffi.Int32> Py_GetPath() {
    return _Py_GetPath();
  }

  late final _Py_GetPath_ptr =
      _lookup<ffi.NativeFunction<_c_Py_GetPath>>('Py_GetPath');
  late final _dart_Py_GetPath _Py_GetPath =
      _Py_GetPath_ptr.asFunction<_dart_Py_GetPath>();

  void Py_SetPath(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    return _Py_SetPath(
      arg0,
    );
  }

  late final _Py_SetPath_ptr =
      _lookup<ffi.NativeFunction<_c_Py_SetPath>>('Py_SetPath');
  late final _dart_Py_SetPath _Py_SetPath =
      _Py_SetPath_ptr.asFunction<_dart_Py_SetPath>();

  ffi.Pointer<ffi.Int8> Py_GetVersion() {
    return _Py_GetVersion();
  }

  late final _Py_GetVersion_ptr =
      _lookup<ffi.NativeFunction<_c_Py_GetVersion>>('Py_GetVersion');
  late final _dart_Py_GetVersion _Py_GetVersion =
      _Py_GetVersion_ptr.asFunction<_dart_Py_GetVersion>();

  ffi.Pointer<ffi.Int8> Py_GetPlatform() {
    return _Py_GetPlatform();
  }

  late final _Py_GetPlatform_ptr =
      _lookup<ffi.NativeFunction<_c_Py_GetPlatform>>('Py_GetPlatform');
  late final _dart_Py_GetPlatform _Py_GetPlatform =
      _Py_GetPlatform_ptr.asFunction<_dart_Py_GetPlatform>();

  ffi.Pointer<ffi.Int8> Py_GetCopyright() {
    return _Py_GetCopyright();
  }

  late final _Py_GetCopyright_ptr =
      _lookup<ffi.NativeFunction<_c_Py_GetCopyright>>('Py_GetCopyright');
  late final _dart_Py_GetCopyright _Py_GetCopyright =
      _Py_GetCopyright_ptr.asFunction<_dart_Py_GetCopyright>();

  ffi.Pointer<ffi.Int8> Py_GetCompiler() {
    return _Py_GetCompiler();
  }

  late final _Py_GetCompiler_ptr =
      _lookup<ffi.NativeFunction<_c_Py_GetCompiler>>('Py_GetCompiler');
  late final _dart_Py_GetCompiler _Py_GetCompiler =
      _Py_GetCompiler_ptr.asFunction<_dart_Py_GetCompiler>();

  ffi.Pointer<ffi.Int8> Py_GetBuildInfo() {
    return _Py_GetBuildInfo();
  }

  late final _Py_GetBuildInfo_ptr =
      _lookup<ffi.NativeFunction<_c_Py_GetBuildInfo>>('Py_GetBuildInfo');
  late final _dart_Py_GetBuildInfo _Py_GetBuildInfo =
      _Py_GetBuildInfo_ptr.asFunction<_dart_Py_GetBuildInfo>();

  ffi.Pointer<ffi.NativeFunction<PyOS_sighandler_t>> PyOS_getsig(
    int arg0,
  ) {
    return _PyOS_getsig(
      arg0,
    );
  }

  late final _PyOS_getsig_ptr =
      _lookup<ffi.NativeFunction<_c_PyOS_getsig>>('PyOS_getsig');
  late final _dart_PyOS_getsig _PyOS_getsig =
      _PyOS_getsig_ptr.asFunction<_dart_PyOS_getsig>();

  ffi.Pointer<ffi.NativeFunction<PyOS_sighandler_t>> PyOS_setsig(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<PyOS_sighandler_t>> arg1,
  ) {
    return _PyOS_setsig(
      arg0,
      arg1,
    );
  }

  late final _PyOS_setsig_ptr =
      _lookup<ffi.NativeFunction<_c_PyOS_setsig>>('PyOS_setsig');
  late final _dart_PyOS_setsig _PyOS_setsig =
      _PyOS_setsig_ptr.asFunction<_dart_PyOS_setsig>();

  ffi.Pointer<PyObject> PyEval_CallObjectWithKeywords(
    ffi.Pointer<PyObject> callable,
    ffi.Pointer<PyObject> args,
    ffi.Pointer<PyObject> kwargs,
  ) {
    return _PyEval_CallObjectWithKeywords(
      callable,
      args,
      kwargs,
    );
  }

  late final _PyEval_CallObjectWithKeywords_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_CallObjectWithKeywords>>(
          'PyEval_CallObjectWithKeywords');
  late final _dart_PyEval_CallObjectWithKeywords
      _PyEval_CallObjectWithKeywords = _PyEval_CallObjectWithKeywords_ptr
          .asFunction<_dart_PyEval_CallObjectWithKeywords>();

  ffi.Pointer<PyObject> PyEval_CallFunction(
    ffi.Pointer<PyObject> callable,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _PyEval_CallFunction(
      callable,
      format,
    );
  }

  late final _PyEval_CallFunction_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_CallFunction>>(
          'PyEval_CallFunction');
  late final _dart_PyEval_CallFunction _PyEval_CallFunction =
      _PyEval_CallFunction_ptr.asFunction<_dart_PyEval_CallFunction>();

  ffi.Pointer<PyObject> PyEval_CallMethod(
    ffi.Pointer<PyObject> obj,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _PyEval_CallMethod(
      obj,
      name,
      format,
    );
  }

  late final _PyEval_CallMethod_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_CallMethod>>('PyEval_CallMethod');
  late final _dart_PyEval_CallMethod _PyEval_CallMethod =
      _PyEval_CallMethod_ptr.asFunction<_dart_PyEval_CallMethod>();

  void PyEval_SetProfile(
    ffi.Pointer<ffi.NativeFunction<Py_tracefunc>> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyEval_SetProfile(
      arg0,
      arg1,
    );
  }

  late final _PyEval_SetProfile_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_SetProfile>>('PyEval_SetProfile');
  late final _dart_PyEval_SetProfile _PyEval_SetProfile =
      _PyEval_SetProfile_ptr.asFunction<_dart_PyEval_SetProfile>();

  void PyEval_SetTrace(
    ffi.Pointer<ffi.NativeFunction<Py_tracefunc>> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyEval_SetTrace(
      arg0,
      arg1,
    );
  }

  late final _PyEval_SetTrace_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_SetTrace>>('PyEval_SetTrace');
  late final _dart_PyEval_SetTrace _PyEval_SetTrace =
      _PyEval_SetTrace_ptr.asFunction<_dart_PyEval_SetTrace>();

  void PyEval_SetCoroutineOriginTrackingDepth(
    int new_depth,
  ) {
    return _PyEval_SetCoroutineOriginTrackingDepth(
      new_depth,
    );
  }

  late final _PyEval_SetCoroutineOriginTrackingDepth_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_SetCoroutineOriginTrackingDepth>>(
          '_PyEval_SetCoroutineOriginTrackingDepth');
  late final _dart_PyEval_SetCoroutineOriginTrackingDepth
      _PyEval_SetCoroutineOriginTrackingDepth =
      _PyEval_SetCoroutineOriginTrackingDepth_ptr.asFunction<
          _dart_PyEval_SetCoroutineOriginTrackingDepth>();

  int PyEval_GetCoroutineOriginTrackingDepth() {
    return _PyEval_GetCoroutineOriginTrackingDepth();
  }

  late final _PyEval_GetCoroutineOriginTrackingDepth_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_GetCoroutineOriginTrackingDepth>>(
          '_PyEval_GetCoroutineOriginTrackingDepth');
  late final _dart_PyEval_GetCoroutineOriginTrackingDepth
      _PyEval_GetCoroutineOriginTrackingDepth =
      _PyEval_GetCoroutineOriginTrackingDepth_ptr.asFunction<
          _dart_PyEval_GetCoroutineOriginTrackingDepth>();

  void PyEval_SetAsyncGenFirstiter(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyEval_SetAsyncGenFirstiter(
      arg0,
    );
  }

  late final _PyEval_SetAsyncGenFirstiter_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_SetAsyncGenFirstiter>>(
          '_PyEval_SetAsyncGenFirstiter');
  late final _dart_PyEval_SetAsyncGenFirstiter _PyEval_SetAsyncGenFirstiter =
      _PyEval_SetAsyncGenFirstiter_ptr.asFunction<
          _dart_PyEval_SetAsyncGenFirstiter>();

  ffi.Pointer<PyObject> PyEval_GetAsyncGenFirstiter() {
    return _PyEval_GetAsyncGenFirstiter();
  }

  late final _PyEval_GetAsyncGenFirstiter_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_GetAsyncGenFirstiter>>(
          '_PyEval_GetAsyncGenFirstiter');
  late final _dart_PyEval_GetAsyncGenFirstiter _PyEval_GetAsyncGenFirstiter =
      _PyEval_GetAsyncGenFirstiter_ptr.asFunction<
          _dart_PyEval_GetAsyncGenFirstiter>();

  void PyEval_SetAsyncGenFinalizer(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyEval_SetAsyncGenFinalizer(
      arg0,
    );
  }

  late final _PyEval_SetAsyncGenFinalizer_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_SetAsyncGenFinalizer>>(
          '_PyEval_SetAsyncGenFinalizer');
  late final _dart_PyEval_SetAsyncGenFinalizer _PyEval_SetAsyncGenFinalizer =
      _PyEval_SetAsyncGenFinalizer_ptr.asFunction<
          _dart_PyEval_SetAsyncGenFinalizer>();

  ffi.Pointer<PyObject> PyEval_GetAsyncGenFinalizer() {
    return _PyEval_GetAsyncGenFinalizer();
  }

  late final _PyEval_GetAsyncGenFinalizer_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_GetAsyncGenFinalizer>>(
          '_PyEval_GetAsyncGenFinalizer');
  late final _dart_PyEval_GetAsyncGenFinalizer _PyEval_GetAsyncGenFinalizer =
      _PyEval_GetAsyncGenFinalizer_ptr.asFunction<
          _dart_PyEval_GetAsyncGenFinalizer>();

  ffi.Pointer<PyObject> PyEval_GetBuiltins() {
    return _PyEval_GetBuiltins();
  }

  late final _PyEval_GetBuiltins_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_GetBuiltins>>('PyEval_GetBuiltins');
  late final _dart_PyEval_GetBuiltins _PyEval_GetBuiltins =
      _PyEval_GetBuiltins_ptr.asFunction<_dart_PyEval_GetBuiltins>();

  ffi.Pointer<PyObject> PyEval_GetGlobals() {
    return _PyEval_GetGlobals();
  }

  late final _PyEval_GetGlobals_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_GetGlobals>>('PyEval_GetGlobals');
  late final _dart_PyEval_GetGlobals _PyEval_GetGlobals =
      _PyEval_GetGlobals_ptr.asFunction<_dart_PyEval_GetGlobals>();

  ffi.Pointer<PyObject> PyEval_GetLocals() {
    return _PyEval_GetLocals();
  }

  late final _PyEval_GetLocals_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_GetLocals>>('PyEval_GetLocals');
  late final _dart_PyEval_GetLocals _PyEval_GetLocals =
      _PyEval_GetLocals_ptr.asFunction<_dart_PyEval_GetLocals>();

  ffi.Pointer<_frame> PyEval_GetFrame() {
    return _PyEval_GetFrame();
  }

  late final _PyEval_GetFrame_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_GetFrame>>('PyEval_GetFrame');
  late final _dart_PyEval_GetFrame _PyEval_GetFrame =
      _PyEval_GetFrame_ptr.asFunction<_dart_PyEval_GetFrame>();

  ffi.Pointer<PyObject> PyEval_GetBuiltinId(
    ffi.Pointer<_Py_Identifier> arg0,
  ) {
    return _PyEval_GetBuiltinId(
      arg0,
    );
  }

  late final _PyEval_GetBuiltinId_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_GetBuiltinId>>(
          '_PyEval_GetBuiltinId');
  late final _dart_PyEval_GetBuiltinId _PyEval_GetBuiltinId =
      _PyEval_GetBuiltinId_ptr.asFunction<_dart_PyEval_GetBuiltinId>();

  int PyEval_MergeCompilerFlags(
    ffi.Pointer<PyCompilerFlags> cf,
  ) {
    return _PyEval_MergeCompilerFlags(
      cf,
    );
  }

  late final _PyEval_MergeCompilerFlags_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_MergeCompilerFlags>>(
          'PyEval_MergeCompilerFlags');
  late final _dart_PyEval_MergeCompilerFlags _PyEval_MergeCompilerFlags =
      _PyEval_MergeCompilerFlags_ptr.asFunction<
          _dart_PyEval_MergeCompilerFlags>();

  int Py_AddPendingCall(
    ffi.Pointer<ffi.NativeFunction<_typedefC_9>> func,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _Py_AddPendingCall(
      func,
      arg,
    );
  }

  late final _Py_AddPendingCall_ptr =
      _lookup<ffi.NativeFunction<_c_Py_AddPendingCall>>('Py_AddPendingCall');
  late final _dart_Py_AddPendingCall _Py_AddPendingCall =
      _Py_AddPendingCall_ptr.asFunction<_dart_Py_AddPendingCall>();

  int Py_MakePendingCalls() {
    return _Py_MakePendingCalls();
  }

  late final _Py_MakePendingCalls_ptr =
      _lookup<ffi.NativeFunction<_c_Py_MakePendingCalls>>(
          'Py_MakePendingCalls');
  late final _dart_Py_MakePendingCalls _Py_MakePendingCalls =
      _Py_MakePendingCalls_ptr.asFunction<_dart_Py_MakePendingCalls>();

  void Py_SetRecursionLimit(
    int arg0,
  ) {
    return _Py_SetRecursionLimit(
      arg0,
    );
  }

  late final _Py_SetRecursionLimit_ptr =
      _lookup<ffi.NativeFunction<_c_Py_SetRecursionLimit>>(
          'Py_SetRecursionLimit');
  late final _dart_Py_SetRecursionLimit _Py_SetRecursionLimit =
      _Py_SetRecursionLimit_ptr.asFunction<_dart_Py_SetRecursionLimit>();

  int Py_GetRecursionLimit() {
    return _Py_GetRecursionLimit();
  }

  late final _Py_GetRecursionLimit_ptr =
      _lookup<ffi.NativeFunction<_c_Py_GetRecursionLimit>>(
          'Py_GetRecursionLimit');
  late final _dart_Py_GetRecursionLimit _Py_GetRecursionLimit =
      _Py_GetRecursionLimit_ptr.asFunction<_dart_Py_GetRecursionLimit>();

  int Py_CheckRecursiveCall(
    ffi.Pointer<ffi.Int8> where,
  ) {
    return _Py_CheckRecursiveCall(
      where,
    );
  }

  late final _Py_CheckRecursiveCall_ptr =
      _lookup<ffi.NativeFunction<_c_Py_CheckRecursiveCall>>(
          '_Py_CheckRecursiveCall');
  late final _dart_Py_CheckRecursiveCall _Py_CheckRecursiveCall =
      _Py_CheckRecursiveCall_ptr.asFunction<_dart_Py_CheckRecursiveCall>();

  late final ffi.Pointer<ffi.Int32> _Py_CheckRecursionLimit =
      _lookup<ffi.Int32>('_Py_CheckRecursionLimit');

  int get Py_CheckRecursionLimit => _Py_CheckRecursionLimit.value;

  set Py_CheckRecursionLimit(int value) =>
      _Py_CheckRecursionLimit.value = value;

  ffi.Pointer<ffi.Int8> PyEval_GetFuncName(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyEval_GetFuncName(
      arg0,
    );
  }

  late final _PyEval_GetFuncName_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_GetFuncName>>('PyEval_GetFuncName');
  late final _dart_PyEval_GetFuncName _PyEval_GetFuncName =
      _PyEval_GetFuncName_ptr.asFunction<_dart_PyEval_GetFuncName>();

  ffi.Pointer<ffi.Int8> PyEval_GetFuncDesc(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyEval_GetFuncDesc(
      arg0,
    );
  }

  late final _PyEval_GetFuncDesc_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_GetFuncDesc>>('PyEval_GetFuncDesc');
  late final _dart_PyEval_GetFuncDesc _PyEval_GetFuncDesc =
      _PyEval_GetFuncDesc_ptr.asFunction<_dart_PyEval_GetFuncDesc>();

  ffi.Pointer<PyObject> PyEval_EvalFrame(
    ffi.Pointer<_frame> arg0,
  ) {
    return _PyEval_EvalFrame(
      arg0,
    );
  }

  late final _PyEval_EvalFrame_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_EvalFrame>>('PyEval_EvalFrame');
  late final _dart_PyEval_EvalFrame _PyEval_EvalFrame =
      _PyEval_EvalFrame_ptr.asFunction<_dart_PyEval_EvalFrame>();

  ffi.Pointer<PyObject> PyEval_EvalFrameEx(
    ffi.Pointer<_frame> f,
    int exc,
  ) {
    return _PyEval_EvalFrameEx(
      f,
      exc,
    );
  }

  late final _PyEval_EvalFrameEx_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_EvalFrameEx>>('PyEval_EvalFrameEx');
  late final _dart_PyEval_EvalFrameEx _PyEval_EvalFrameEx =
      _PyEval_EvalFrameEx_ptr.asFunction<_dart_PyEval_EvalFrameEx>();

  ffi.Pointer<PyObject> PyEval_EvalFrameDefault(
    ffi.Pointer<_frame> f,
    int exc,
  ) {
    return _PyEval_EvalFrameDefault(
      f,
      exc,
    );
  }

  late final _PyEval_EvalFrameDefault_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_EvalFrameDefault>>(
          '_PyEval_EvalFrameDefault');
  late final _dart_PyEval_EvalFrameDefault _PyEval_EvalFrameDefault =
      _PyEval_EvalFrameDefault_ptr.asFunction<_dart_PyEval_EvalFrameDefault>();

  ffi.Pointer<_ts> PyEval_SaveThread() {
    return _PyEval_SaveThread();
  }

  late final _PyEval_SaveThread_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_SaveThread>>('PyEval_SaveThread');
  late final _dart_PyEval_SaveThread _PyEval_SaveThread =
      _PyEval_SaveThread_ptr.asFunction<_dart_PyEval_SaveThread>();

  void PyEval_RestoreThread(
    ffi.Pointer<_ts> arg0,
  ) {
    return _PyEval_RestoreThread(
      arg0,
    );
  }

  late final _PyEval_RestoreThread_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_RestoreThread>>(
          'PyEval_RestoreThread');
  late final _dart_PyEval_RestoreThread _PyEval_RestoreThread =
      _PyEval_RestoreThread_ptr.asFunction<_dart_PyEval_RestoreThread>();

  int PyEval_ThreadsInitialized() {
    return _PyEval_ThreadsInitialized();
  }

  late final _PyEval_ThreadsInitialized_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_ThreadsInitialized>>(
          'PyEval_ThreadsInitialized');
  late final _dart_PyEval_ThreadsInitialized _PyEval_ThreadsInitialized =
      _PyEval_ThreadsInitialized_ptr.asFunction<
          _dart_PyEval_ThreadsInitialized>();

  void PyEval_InitThreads() {
    return _PyEval_InitThreads();
  }

  late final _PyEval_InitThreads_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_InitThreads>>('PyEval_InitThreads');
  late final _dart_PyEval_InitThreads _PyEval_InitThreads =
      _PyEval_InitThreads_ptr.asFunction<_dart_PyEval_InitThreads>();

  void PyEval_AcquireLock() {
    return _PyEval_AcquireLock();
  }

  late final _PyEval_AcquireLock_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_AcquireLock>>('PyEval_AcquireLock');
  late final _dart_PyEval_AcquireLock _PyEval_AcquireLock =
      _PyEval_AcquireLock_ptr.asFunction<_dart_PyEval_AcquireLock>();

  void PyEval_ReleaseLock() {
    return _PyEval_ReleaseLock();
  }

  late final _PyEval_ReleaseLock_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_ReleaseLock>>('PyEval_ReleaseLock');
  late final _dart_PyEval_ReleaseLock _PyEval_ReleaseLock =
      _PyEval_ReleaseLock_ptr.asFunction<_dart_PyEval_ReleaseLock>();

  void PyEval_AcquireThread(
    ffi.Pointer<_ts> tstate,
  ) {
    return _PyEval_AcquireThread(
      tstate,
    );
  }

  late final _PyEval_AcquireThread_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_AcquireThread>>(
          'PyEval_AcquireThread');
  late final _dart_PyEval_AcquireThread _PyEval_AcquireThread =
      _PyEval_AcquireThread_ptr.asFunction<_dart_PyEval_AcquireThread>();

  void PyEval_ReleaseThread(
    ffi.Pointer<_ts> tstate,
  ) {
    return _PyEval_ReleaseThread(
      tstate,
    );
  }

  late final _PyEval_ReleaseThread_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_ReleaseThread>>(
          'PyEval_ReleaseThread');
  late final _dart_PyEval_ReleaseThread _PyEval_ReleaseThread =
      _PyEval_ReleaseThread_ptr.asFunction<_dart_PyEval_ReleaseThread>();

  void PyEval_SetSwitchInterval(
    int microseconds,
  ) {
    return _PyEval_SetSwitchInterval(
      microseconds,
    );
  }

  late final _PyEval_SetSwitchInterval_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_SetSwitchInterval>>(
          '_PyEval_SetSwitchInterval');
  late final _dart_PyEval_SetSwitchInterval _PyEval_SetSwitchInterval =
      _PyEval_SetSwitchInterval_ptr.asFunction<
          _dart_PyEval_SetSwitchInterval>();

  int PyEval_GetSwitchInterval() {
    return _PyEval_GetSwitchInterval();
  }

  late final _PyEval_GetSwitchInterval_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_GetSwitchInterval>>(
          '_PyEval_GetSwitchInterval');
  late final _dart_PyEval_GetSwitchInterval _PyEval_GetSwitchInterval =
      _PyEval_GetSwitchInterval_ptr.asFunction<
          _dart_PyEval_GetSwitchInterval>();

  int PyEval_RequestCodeExtraIndex(
    ffi.Pointer<ffi.NativeFunction<freefunc>> arg0,
  ) {
    return _PyEval_RequestCodeExtraIndex(
      arg0,
    );
  }

  late final _PyEval_RequestCodeExtraIndex_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_RequestCodeExtraIndex>>(
          '_PyEval_RequestCodeExtraIndex');
  late final _dart_PyEval_RequestCodeExtraIndex _PyEval_RequestCodeExtraIndex =
      _PyEval_RequestCodeExtraIndex_ptr.asFunction<
          _dart_PyEval_RequestCodeExtraIndex>();

  int PyEval_SliceIndex(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Int64> arg1,
  ) {
    return _PyEval_SliceIndex(
      arg0,
      arg1,
    );
  }

  late final _PyEval_SliceIndex_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_SliceIndex>>('_PyEval_SliceIndex');
  late final _dart_PyEval_SliceIndex _PyEval_SliceIndex =
      _PyEval_SliceIndex_ptr.asFunction<_dart_PyEval_SliceIndex>();

  int PyEval_SliceIndexNotNone(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<ffi.Int64> arg1,
  ) {
    return _PyEval_SliceIndexNotNone(
      arg0,
      arg1,
    );
  }

  late final _PyEval_SliceIndexNotNone_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_SliceIndexNotNone>>(
          '_PyEval_SliceIndexNotNone');
  late final _dart_PyEval_SliceIndexNotNone _PyEval_SliceIndexNotNone =
      _PyEval_SliceIndexNotNone_ptr.asFunction<
          _dart_PyEval_SliceIndexNotNone>();

  ffi.Pointer<PyObject> PySys_GetObject(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _PySys_GetObject(
      arg0,
    );
  }

  late final _PySys_GetObject_ptr =
      _lookup<ffi.NativeFunction<_c_PySys_GetObject>>('PySys_GetObject');
  late final _dart_PySys_GetObject _PySys_GetObject =
      _PySys_GetObject_ptr.asFunction<_dart_PySys_GetObject>();

  int PySys_SetObject(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PySys_SetObject(
      arg0,
      arg1,
    );
  }

  late final _PySys_SetObject_ptr =
      _lookup<ffi.NativeFunction<_c_PySys_SetObject>>('PySys_SetObject');
  late final _dart_PySys_SetObject _PySys_SetObject =
      _PySys_SetObject_ptr.asFunction<_dart_PySys_SetObject>();

  void PySys_SetArgv(
    int arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> arg1,
  ) {
    return _PySys_SetArgv(
      arg0,
      arg1,
    );
  }

  late final _PySys_SetArgv_ptr =
      _lookup<ffi.NativeFunction<_c_PySys_SetArgv>>('PySys_SetArgv');
  late final _dart_PySys_SetArgv _PySys_SetArgv =
      _PySys_SetArgv_ptr.asFunction<_dart_PySys_SetArgv>();

  void PySys_SetArgvEx(
    int arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> arg1,
    int arg2,
  ) {
    return _PySys_SetArgvEx(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PySys_SetArgvEx_ptr =
      _lookup<ffi.NativeFunction<_c_PySys_SetArgvEx>>('PySys_SetArgvEx');
  late final _dart_PySys_SetArgvEx _PySys_SetArgvEx =
      _PySys_SetArgvEx_ptr.asFunction<_dart_PySys_SetArgvEx>();

  void PySys_SetPath(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    return _PySys_SetPath(
      arg0,
    );
  }

  late final _PySys_SetPath_ptr =
      _lookup<ffi.NativeFunction<_c_PySys_SetPath>>('PySys_SetPath');
  late final _dart_PySys_SetPath _PySys_SetPath =
      _PySys_SetPath_ptr.asFunction<_dart_PySys_SetPath>();

  void PySys_WriteStdout(
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _PySys_WriteStdout(
      format,
    );
  }

  late final _PySys_WriteStdout_ptr =
      _lookup<ffi.NativeFunction<_c_PySys_WriteStdout>>('PySys_WriteStdout');
  late final _dart_PySys_WriteStdout _PySys_WriteStdout =
      _PySys_WriteStdout_ptr.asFunction<_dart_PySys_WriteStdout>();

  void PySys_WriteStderr(
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _PySys_WriteStderr(
      format,
    );
  }

  late final _PySys_WriteStderr_ptr =
      _lookup<ffi.NativeFunction<_c_PySys_WriteStderr>>('PySys_WriteStderr');
  late final _dart_PySys_WriteStderr _PySys_WriteStderr =
      _PySys_WriteStderr_ptr.asFunction<_dart_PySys_WriteStderr>();

  void PySys_FormatStdout(
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _PySys_FormatStdout(
      format,
    );
  }

  late final _PySys_FormatStdout_ptr =
      _lookup<ffi.NativeFunction<_c_PySys_FormatStdout>>('PySys_FormatStdout');
  late final _dart_PySys_FormatStdout _PySys_FormatStdout =
      _PySys_FormatStdout_ptr.asFunction<_dart_PySys_FormatStdout>();

  void PySys_FormatStderr(
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _PySys_FormatStderr(
      format,
    );
  }

  late final _PySys_FormatStderr_ptr =
      _lookup<ffi.NativeFunction<_c_PySys_FormatStderr>>('PySys_FormatStderr');
  late final _dart_PySys_FormatStderr _PySys_FormatStderr =
      _PySys_FormatStderr_ptr.asFunction<_dart_PySys_FormatStderr>();

  void PySys_ResetWarnOptions() {
    return _PySys_ResetWarnOptions();
  }

  late final _PySys_ResetWarnOptions_ptr =
      _lookup<ffi.NativeFunction<_c_PySys_ResetWarnOptions>>(
          'PySys_ResetWarnOptions');
  late final _dart_PySys_ResetWarnOptions _PySys_ResetWarnOptions =
      _PySys_ResetWarnOptions_ptr.asFunction<_dart_PySys_ResetWarnOptions>();

  void PySys_AddWarnOption(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    return _PySys_AddWarnOption(
      arg0,
    );
  }

  late final _PySys_AddWarnOption_ptr =
      _lookup<ffi.NativeFunction<_c_PySys_AddWarnOption>>(
          'PySys_AddWarnOption');
  late final _dart_PySys_AddWarnOption _PySys_AddWarnOption =
      _PySys_AddWarnOption_ptr.asFunction<_dart_PySys_AddWarnOption>();

  void PySys_AddWarnOptionUnicode(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PySys_AddWarnOptionUnicode(
      arg0,
    );
  }

  late final _PySys_AddWarnOptionUnicode_ptr =
      _lookup<ffi.NativeFunction<_c_PySys_AddWarnOptionUnicode>>(
          'PySys_AddWarnOptionUnicode');
  late final _dart_PySys_AddWarnOptionUnicode _PySys_AddWarnOptionUnicode =
      _PySys_AddWarnOptionUnicode_ptr.asFunction<
          _dart_PySys_AddWarnOptionUnicode>();

  int PySys_HasWarnOptions() {
    return _PySys_HasWarnOptions();
  }

  late final _PySys_HasWarnOptions_ptr =
      _lookup<ffi.NativeFunction<_c_PySys_HasWarnOptions>>(
          'PySys_HasWarnOptions');
  late final _dart_PySys_HasWarnOptions _PySys_HasWarnOptions =
      _PySys_HasWarnOptions_ptr.asFunction<_dart_PySys_HasWarnOptions>();

  void PySys_AddXOption(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    return _PySys_AddXOption(
      arg0,
    );
  }

  late final _PySys_AddXOption_ptr =
      _lookup<ffi.NativeFunction<_c_PySys_AddXOption>>('PySys_AddXOption');
  late final _dart_PySys_AddXOption _PySys_AddXOption =
      _PySys_AddXOption_ptr.asFunction<_dart_PySys_AddXOption>();

  ffi.Pointer<PyObject> PySys_GetXOptions() {
    return _PySys_GetXOptions();
  }

  late final _PySys_GetXOptions_ptr =
      _lookup<ffi.NativeFunction<_c_PySys_GetXOptions>>('PySys_GetXOptions');
  late final _dart_PySys_GetXOptions _PySys_GetXOptions =
      _PySys_GetXOptions_ptr.asFunction<_dart_PySys_GetXOptions>();

  ffi.Pointer<PyObject> PyOS_FSPath(
    ffi.Pointer<PyObject> path,
  ) {
    return _PyOS_FSPath(
      path,
    );
  }

  late final _PyOS_FSPath_ptr =
      _lookup<ffi.NativeFunction<_c_PyOS_FSPath>>('PyOS_FSPath');
  late final _dart_PyOS_FSPath _PyOS_FSPath =
      _PyOS_FSPath_ptr.asFunction<_dart_PyOS_FSPath>();

  int PyOS_InterruptOccurred() {
    return _PyOS_InterruptOccurred();
  }

  late final _PyOS_InterruptOccurred_ptr =
      _lookup<ffi.NativeFunction<_c_PyOS_InterruptOccurred>>(
          'PyOS_InterruptOccurred');
  late final _dart_PyOS_InterruptOccurred _PyOS_InterruptOccurred =
      _PyOS_InterruptOccurred_ptr.asFunction<_dart_PyOS_InterruptOccurred>();

  void PyOS_InitInterrupts() {
    return _PyOS_InitInterrupts();
  }

  late final _PyOS_InitInterrupts_ptr =
      _lookup<ffi.NativeFunction<_c_PyOS_InitInterrupts>>(
          'PyOS_InitInterrupts');
  late final _dart_PyOS_InitInterrupts _PyOS_InitInterrupts =
      _PyOS_InitInterrupts_ptr.asFunction<_dart_PyOS_InitInterrupts>();

  void PyOS_BeforeFork() {
    return _PyOS_BeforeFork();
  }

  late final _PyOS_BeforeFork_ptr =
      _lookup<ffi.NativeFunction<_c_PyOS_BeforeFork>>('PyOS_BeforeFork');
  late final _dart_PyOS_BeforeFork _PyOS_BeforeFork =
      _PyOS_BeforeFork_ptr.asFunction<_dart_PyOS_BeforeFork>();

  void PyOS_AfterFork_Parent() {
    return _PyOS_AfterFork_Parent();
  }

  late final _PyOS_AfterFork_Parent_ptr =
      _lookup<ffi.NativeFunction<_c_PyOS_AfterFork_Parent>>(
          'PyOS_AfterFork_Parent');
  late final _dart_PyOS_AfterFork_Parent _PyOS_AfterFork_Parent =
      _PyOS_AfterFork_Parent_ptr.asFunction<_dart_PyOS_AfterFork_Parent>();

  void PyOS_AfterFork_Child() {
    return _PyOS_AfterFork_Child();
  }

  late final _PyOS_AfterFork_Child_ptr =
      _lookup<ffi.NativeFunction<_c_PyOS_AfterFork_Child>>(
          'PyOS_AfterFork_Child');
  late final _dart_PyOS_AfterFork_Child _PyOS_AfterFork_Child =
      _PyOS_AfterFork_Child_ptr.asFunction<_dart_PyOS_AfterFork_Child>();

  void PyOS_AfterFork() {
    return _PyOS_AfterFork();
  }

  late final _PyOS_AfterFork_ptr =
      _lookup<ffi.NativeFunction<_c_PyOS_AfterFork>>('PyOS_AfterFork');
  late final _dart_PyOS_AfterFork _PyOS_AfterFork =
      _PyOS_AfterFork_ptr.asFunction<_dart_PyOS_AfterFork>();

  int PyOS_IsMainThread() {
    return _PyOS_IsMainThread();
  }

  late final _PyOS_IsMainThread_ptr =
      _lookup<ffi.NativeFunction<_c_PyOS_IsMainThread>>('_PyOS_IsMainThread');
  late final _dart_PyOS_IsMainThread _PyOS_IsMainThread =
      _PyOS_IsMainThread_ptr.asFunction<_dart_PyOS_IsMainThread>();

  void PySignal_AfterFork() {
    return _PySignal_AfterFork();
  }

  late final _PySignal_AfterFork_ptr =
      _lookup<ffi.NativeFunction<_c_PySignal_AfterFork>>('_PySignal_AfterFork');
  late final _dart_PySignal_AfterFork _PySignal_AfterFork =
      _PySignal_AfterFork_ptr.asFunction<_dart_PySignal_AfterFork>();

  ffi.Pointer<PyObject> PyInit__imp() {
    return _PyInit__imp();
  }

  late final _PyInit__imp_ptr =
      _lookup<ffi.NativeFunction<_c_PyInit__imp>>('PyInit__imp');
  late final _dart_PyInit__imp _PyInit__imp =
      _PyInit__imp_ptr.asFunction<_dart_PyInit__imp>();

  int PyImport_GetMagicNumber() {
    return _PyImport_GetMagicNumber();
  }

  late final _PyImport_GetMagicNumber_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_GetMagicNumber>>(
          'PyImport_GetMagicNumber');
  late final _dart_PyImport_GetMagicNumber _PyImport_GetMagicNumber =
      _PyImport_GetMagicNumber_ptr.asFunction<_dart_PyImport_GetMagicNumber>();

  ffi.Pointer<ffi.Int8> PyImport_GetMagicTag() {
    return _PyImport_GetMagicTag();
  }

  late final _PyImport_GetMagicTag_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_GetMagicTag>>(
          'PyImport_GetMagicTag');
  late final _dart_PyImport_GetMagicTag _PyImport_GetMagicTag =
      _PyImport_GetMagicTag_ptr.asFunction<_dart_PyImport_GetMagicTag>();

  ffi.Pointer<PyObject> PyImport_ExecCodeModule(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<PyObject> co,
  ) {
    return _PyImport_ExecCodeModule(
      name,
      co,
    );
  }

  late final _PyImport_ExecCodeModule_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_ExecCodeModule>>(
          'PyImport_ExecCodeModule');
  late final _dart_PyImport_ExecCodeModule _PyImport_ExecCodeModule =
      _PyImport_ExecCodeModule_ptr.asFunction<_dart_PyImport_ExecCodeModule>();

  ffi.Pointer<PyObject> PyImport_ExecCodeModuleEx(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<PyObject> co,
    ffi.Pointer<ffi.Int8> pathname,
  ) {
    return _PyImport_ExecCodeModuleEx(
      name,
      co,
      pathname,
    );
  }

  late final _PyImport_ExecCodeModuleEx_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_ExecCodeModuleEx>>(
          'PyImport_ExecCodeModuleEx');
  late final _dart_PyImport_ExecCodeModuleEx _PyImport_ExecCodeModuleEx =
      _PyImport_ExecCodeModuleEx_ptr.asFunction<
          _dart_PyImport_ExecCodeModuleEx>();

  ffi.Pointer<PyObject> PyImport_ExecCodeModuleWithPathnames(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<PyObject> co,
    ffi.Pointer<ffi.Int8> pathname,
    ffi.Pointer<ffi.Int8> cpathname,
  ) {
    return _PyImport_ExecCodeModuleWithPathnames(
      name,
      co,
      pathname,
      cpathname,
    );
  }

  late final _PyImport_ExecCodeModuleWithPathnames_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_ExecCodeModuleWithPathnames>>(
          'PyImport_ExecCodeModuleWithPathnames');
  late final _dart_PyImport_ExecCodeModuleWithPathnames
      _PyImport_ExecCodeModuleWithPathnames =
      _PyImport_ExecCodeModuleWithPathnames_ptr.asFunction<
          _dart_PyImport_ExecCodeModuleWithPathnames>();

  ffi.Pointer<PyObject> PyImport_ExecCodeModuleObject(
    ffi.Pointer<PyObject> name,
    ffi.Pointer<PyObject> co,
    ffi.Pointer<PyObject> pathname,
    ffi.Pointer<PyObject> cpathname,
  ) {
    return _PyImport_ExecCodeModuleObject(
      name,
      co,
      pathname,
      cpathname,
    );
  }

  late final _PyImport_ExecCodeModuleObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_ExecCodeModuleObject>>(
          'PyImport_ExecCodeModuleObject');
  late final _dart_PyImport_ExecCodeModuleObject
      _PyImport_ExecCodeModuleObject = _PyImport_ExecCodeModuleObject_ptr
          .asFunction<_dart_PyImport_ExecCodeModuleObject>();

  ffi.Pointer<PyObject> PyImport_GetModuleDict() {
    return _PyImport_GetModuleDict();
  }

  late final _PyImport_GetModuleDict_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_GetModuleDict>>(
          'PyImport_GetModuleDict');
  late final _dart_PyImport_GetModuleDict _PyImport_GetModuleDict =
      _PyImport_GetModuleDict_ptr.asFunction<_dart_PyImport_GetModuleDict>();

  ffi.Pointer<PyObject> PyImport_GetModule(
    ffi.Pointer<PyObject> name,
  ) {
    return _PyImport_GetModule(
      name,
    );
  }

  late final _PyImport_GetModule_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_GetModule>>('PyImport_GetModule');
  late final _dart_PyImport_GetModule _PyImport_GetModule =
      _PyImport_GetModule_ptr.asFunction<_dart_PyImport_GetModule>();

  int PyImport_IsInitialized(
    ffi.Pointer<_is> arg0,
  ) {
    return _PyImport_IsInitialized(
      arg0,
    );
  }

  late final _PyImport_IsInitialized_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_IsInitialized>>(
          '_PyImport_IsInitialized');
  late final _dart_PyImport_IsInitialized _PyImport_IsInitialized =
      _PyImport_IsInitialized_ptr.asFunction<_dart_PyImport_IsInitialized>();

  ffi.Pointer<PyObject> PyImport_GetModuleId(
    ffi.Pointer<_Py_Identifier> name,
  ) {
    return _PyImport_GetModuleId(
      name,
    );
  }

  late final _PyImport_GetModuleId_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_GetModuleId>>(
          '_PyImport_GetModuleId');
  late final _dart_PyImport_GetModuleId _PyImport_GetModuleId =
      _PyImport_GetModuleId_ptr.asFunction<_dart_PyImport_GetModuleId>();

  ffi.Pointer<PyObject> PyImport_AddModuleObject(
    ffi.Pointer<PyObject> name,
    ffi.Pointer<PyObject> modules,
  ) {
    return _PyImport_AddModuleObject(
      name,
      modules,
    );
  }

  late final _PyImport_AddModuleObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_AddModuleObject>>(
          '_PyImport_AddModuleObject');
  late final _dart_PyImport_AddModuleObject _PyImport_AddModuleObject =
      _PyImport_AddModuleObject_ptr.asFunction<
          _dart_PyImport_AddModuleObject>();

  int PyImport_SetModule(
    ffi.Pointer<PyObject> name,
    ffi.Pointer<PyObject> module,
  ) {
    return _PyImport_SetModule(
      name,
      module,
    );
  }

  late final _PyImport_SetModule_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_SetModule>>('_PyImport_SetModule');
  late final _dart_PyImport_SetModule _PyImport_SetModule =
      _PyImport_SetModule_ptr.asFunction<_dart_PyImport_SetModule>();

  int PyImport_SetModuleString(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<PyObject> module,
  ) {
    return _PyImport_SetModuleString(
      name,
      module,
    );
  }

  late final _PyImport_SetModuleString_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_SetModuleString>>(
          '_PyImport_SetModuleString');
  late final _dart_PyImport_SetModuleString _PyImport_SetModuleString =
      _PyImport_SetModuleString_ptr.asFunction<
          _dart_PyImport_SetModuleString>();

  ffi.Pointer<PyObject> PyImport_AddModuleObject_1(
    ffi.Pointer<PyObject> name,
  ) {
    return _PyImport_AddModuleObject_1(
      name,
    );
  }

  late final _PyImport_AddModuleObject_1_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_AddModuleObject_1>>(
          'PyImport_AddModuleObject');
  late final _dart_PyImport_AddModuleObject_1 _PyImport_AddModuleObject_1 =
      _PyImport_AddModuleObject_1_ptr.asFunction<
          _dart_PyImport_AddModuleObject_1>();

  ffi.Pointer<PyObject> PyImport_AddModule(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _PyImport_AddModule(
      name,
    );
  }

  late final _PyImport_AddModule_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_AddModule>>('PyImport_AddModule');
  late final _dart_PyImport_AddModule _PyImport_AddModule =
      _PyImport_AddModule_ptr.asFunction<_dart_PyImport_AddModule>();

  ffi.Pointer<PyObject> PyImport_ImportModule(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _PyImport_ImportModule(
      name,
    );
  }

  late final _PyImport_ImportModule_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_ImportModule>>(
          'PyImport_ImportModule');
  late final _dart_PyImport_ImportModule _PyImport_ImportModule =
      _PyImport_ImportModule_ptr.asFunction<_dart_PyImport_ImportModule>();

  ffi.Pointer<PyObject> PyImport_ImportModuleNoBlock(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _PyImport_ImportModuleNoBlock(
      name,
    );
  }

  late final _PyImport_ImportModuleNoBlock_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_ImportModuleNoBlock>>(
          'PyImport_ImportModuleNoBlock');
  late final _dart_PyImport_ImportModuleNoBlock _PyImport_ImportModuleNoBlock =
      _PyImport_ImportModuleNoBlock_ptr.asFunction<
          _dart_PyImport_ImportModuleNoBlock>();

  ffi.Pointer<PyObject> PyImport_ImportModuleLevel(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<PyObject> globals,
    ffi.Pointer<PyObject> locals,
    ffi.Pointer<PyObject> fromlist,
    int level,
  ) {
    return _PyImport_ImportModuleLevel(
      name,
      globals,
      locals,
      fromlist,
      level,
    );
  }

  late final _PyImport_ImportModuleLevel_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_ImportModuleLevel>>(
          'PyImport_ImportModuleLevel');
  late final _dart_PyImport_ImportModuleLevel _PyImport_ImportModuleLevel =
      _PyImport_ImportModuleLevel_ptr.asFunction<
          _dart_PyImport_ImportModuleLevel>();

  ffi.Pointer<PyObject> PyImport_ImportModuleLevelObject(
    ffi.Pointer<PyObject> name,
    ffi.Pointer<PyObject> globals,
    ffi.Pointer<PyObject> locals,
    ffi.Pointer<PyObject> fromlist,
    int level,
  ) {
    return _PyImport_ImportModuleLevelObject(
      name,
      globals,
      locals,
      fromlist,
      level,
    );
  }

  late final _PyImport_ImportModuleLevelObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_ImportModuleLevelObject>>(
          'PyImport_ImportModuleLevelObject');
  late final _dart_PyImport_ImportModuleLevelObject
      _PyImport_ImportModuleLevelObject = _PyImport_ImportModuleLevelObject_ptr
          .asFunction<_dart_PyImport_ImportModuleLevelObject>();

  ffi.Pointer<PyObject> PyImport_GetImporter(
    ffi.Pointer<PyObject> path,
  ) {
    return _PyImport_GetImporter(
      path,
    );
  }

  late final _PyImport_GetImporter_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_GetImporter>>(
          'PyImport_GetImporter');
  late final _dart_PyImport_GetImporter _PyImport_GetImporter =
      _PyImport_GetImporter_ptr.asFunction<_dart_PyImport_GetImporter>();

  ffi.Pointer<PyObject> PyImport_Import(
    ffi.Pointer<PyObject> name,
  ) {
    return _PyImport_Import(
      name,
    );
  }

  late final _PyImport_Import_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_Import>>('PyImport_Import');
  late final _dart_PyImport_Import _PyImport_Import =
      _PyImport_Import_ptr.asFunction<_dart_PyImport_Import>();

  ffi.Pointer<PyObject> PyImport_ReloadModule(
    ffi.Pointer<PyObject> m,
  ) {
    return _PyImport_ReloadModule(
      m,
    );
  }

  late final _PyImport_ReloadModule_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_ReloadModule>>(
          'PyImport_ReloadModule');
  late final _dart_PyImport_ReloadModule _PyImport_ReloadModule =
      _PyImport_ReloadModule_ptr.asFunction<_dart_PyImport_ReloadModule>();

  void PyImport_Cleanup() {
    return _PyImport_Cleanup();
  }

  late final _PyImport_Cleanup_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_Cleanup>>('PyImport_Cleanup');
  late final _dart_PyImport_Cleanup _PyImport_Cleanup =
      _PyImport_Cleanup_ptr.asFunction<_dart_PyImport_Cleanup>();

  int PyImport_ImportFrozenModuleObject(
    ffi.Pointer<PyObject> name,
  ) {
    return _PyImport_ImportFrozenModuleObject(
      name,
    );
  }

  late final _PyImport_ImportFrozenModuleObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_ImportFrozenModuleObject>>(
          'PyImport_ImportFrozenModuleObject');
  late final _dart_PyImport_ImportFrozenModuleObject
      _PyImport_ImportFrozenModuleObject =
      _PyImport_ImportFrozenModuleObject_ptr.asFunction<
          _dart_PyImport_ImportFrozenModuleObject>();

  int PyImport_ImportFrozenModule(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _PyImport_ImportFrozenModule(
      name,
    );
  }

  late final _PyImport_ImportFrozenModule_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_ImportFrozenModule>>(
          'PyImport_ImportFrozenModule');
  late final _dart_PyImport_ImportFrozenModule _PyImport_ImportFrozenModule =
      _PyImport_ImportFrozenModule_ptr.asFunction<
          _dart_PyImport_ImportFrozenModule>();

  void PyImport_AcquireLock() {
    return _PyImport_AcquireLock();
  }

  late final _PyImport_AcquireLock_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_AcquireLock>>(
          '_PyImport_AcquireLock');
  late final _dart_PyImport_AcquireLock _PyImport_AcquireLock =
      _PyImport_AcquireLock_ptr.asFunction<_dart_PyImport_AcquireLock>();

  int PyImport_ReleaseLock() {
    return _PyImport_ReleaseLock();
  }

  late final _PyImport_ReleaseLock_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_ReleaseLock>>(
          '_PyImport_ReleaseLock');
  late final _dart_PyImport_ReleaseLock _PyImport_ReleaseLock =
      _PyImport_ReleaseLock_ptr.asFunction<_dart_PyImport_ReleaseLock>();

  void PyImport_ReInitLock() {
    return _PyImport_ReInitLock();
  }

  late final _PyImport_ReInitLock_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_ReInitLock>>(
          '_PyImport_ReInitLock');
  late final _dart_PyImport_ReInitLock _PyImport_ReInitLock =
      _PyImport_ReInitLock_ptr.asFunction<_dart_PyImport_ReInitLock>();

  ffi.Pointer<PyObject> PyImport_FindBuiltin(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<PyObject> modules,
  ) {
    return _PyImport_FindBuiltin(
      name,
      modules,
    );
  }

  late final _PyImport_FindBuiltin_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_FindBuiltin>>(
          '_PyImport_FindBuiltin');
  late final _dart_PyImport_FindBuiltin _PyImport_FindBuiltin =
      _PyImport_FindBuiltin_ptr.asFunction<_dart_PyImport_FindBuiltin>();

  ffi.Pointer<PyObject> PyImport_FindExtensionObject(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
  ) {
    return _PyImport_FindExtensionObject(
      arg0,
      arg1,
    );
  }

  late final _PyImport_FindExtensionObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_FindExtensionObject>>(
          '_PyImport_FindExtensionObject');
  late final _dart_PyImport_FindExtensionObject _PyImport_FindExtensionObject =
      _PyImport_FindExtensionObject_ptr.asFunction<
          _dart_PyImport_FindExtensionObject>();

  ffi.Pointer<PyObject> PyImport_FindExtensionObjectEx(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
    ffi.Pointer<PyObject> arg2,
  ) {
    return _PyImport_FindExtensionObjectEx(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyImport_FindExtensionObjectEx_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_FindExtensionObjectEx>>(
          '_PyImport_FindExtensionObjectEx');
  late final _dart_PyImport_FindExtensionObjectEx
      _PyImport_FindExtensionObjectEx = _PyImport_FindExtensionObjectEx_ptr
          .asFunction<_dart_PyImport_FindExtensionObjectEx>();

  int PyImport_FixupBuiltin(
    ffi.Pointer<PyObject> mod,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<PyObject> modules,
  ) {
    return _PyImport_FixupBuiltin(
      mod,
      name,
      modules,
    );
  }

  late final _PyImport_FixupBuiltin_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_FixupBuiltin>>(
          '_PyImport_FixupBuiltin');
  late final _dart_PyImport_FixupBuiltin _PyImport_FixupBuiltin =
      _PyImport_FixupBuiltin_ptr.asFunction<_dart_PyImport_FixupBuiltin>();

  int PyImport_FixupExtensionObject(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
    ffi.Pointer<PyObject> arg2,
    ffi.Pointer<PyObject> arg3,
  ) {
    return _PyImport_FixupExtensionObject(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _PyImport_FixupExtensionObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_FixupExtensionObject>>(
          '_PyImport_FixupExtensionObject');
  late final _dart_PyImport_FixupExtensionObject
      _PyImport_FixupExtensionObject = _PyImport_FixupExtensionObject_ptr
          .asFunction<_dart_PyImport_FixupExtensionObject>();

  late final ffi.Pointer<ffi.Pointer<_inittab>> _PyImport_Inittab =
      _lookup<ffi.Pointer<_inittab>>('PyImport_Inittab');

  ffi.Pointer<_inittab> get PyImport_Inittab => _PyImport_Inittab.value;

  set PyImport_Inittab(ffi.Pointer<_inittab> value) =>
      _PyImport_Inittab.value = value;

  int PyImport_ExtendInittab(
    ffi.Pointer<_inittab> newtab,
  ) {
    return _PyImport_ExtendInittab(
      newtab,
    );
  }

  late final _PyImport_ExtendInittab_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_ExtendInittab>>(
          'PyImport_ExtendInittab');
  late final _dart_PyImport_ExtendInittab _PyImport_ExtendInittab =
      _PyImport_ExtendInittab_ptr.asFunction<_dart_PyImport_ExtendInittab>();

  late final ffi.Pointer<_typeobject> _PyNullImporter_Type =
      _lookup<_typeobject>('PyNullImporter_Type');

  _typeobject get PyNullImporter_Type => _PyNullImporter_Type.ref;

  int PyImport_AppendInittab(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.NativeFunction<_typedefC_11>> initfunc,
  ) {
    return _PyImport_AppendInittab(
      name,
      initfunc,
    );
  }

  late final _PyImport_AppendInittab_ptr =
      _lookup<ffi.NativeFunction<_c_PyImport_AppendInittab>>(
          'PyImport_AppendInittab');
  late final _dart_PyImport_AppendInittab _PyImport_AppendInittab =
      _PyImport_AppendInittab_ptr.asFunction<_dart_PyImport_AppendInittab>();

  late final ffi.Pointer<ffi.Pointer<_frozen>> _PyImport_FrozenModules =
      _lookup<ffi.Pointer<_frozen>>('PyImport_FrozenModules');

  ffi.Pointer<_frozen> get PyImport_FrozenModules =>
      _PyImport_FrozenModules.value;

  set PyImport_FrozenModules(ffi.Pointer<_frozen> value) =>
      _PyImport_FrozenModules.value = value;

  ffi.Pointer<PyObject> PyObject_Call(
    ffi.Pointer<PyObject> callable,
    ffi.Pointer<PyObject> args,
    ffi.Pointer<PyObject> kwargs,
  ) {
    return _PyObject_Call(
      callable,
      args,
      kwargs,
    );
  }

  late final _PyObject_Call_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_Call>>('PyObject_Call');
  late final _dart_PyObject_Call _PyObject_Call =
      _PyObject_Call_ptr.asFunction<_dart_PyObject_Call>();

  ffi.Pointer<PyObject> PyObject_CallObject(
    ffi.Pointer<PyObject> callable,
    ffi.Pointer<PyObject> args,
  ) {
    return _PyObject_CallObject(
      callable,
      args,
    );
  }

  late final _PyObject_CallObject_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_CallObject>>(
          'PyObject_CallObject');
  late final _dart_PyObject_CallObject _PyObject_CallObject =
      _PyObject_CallObject_ptr.asFunction<_dart_PyObject_CallObject>();

  ffi.Pointer<PyObject> PyObject_CallFunction(
    ffi.Pointer<PyObject> callable,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _PyObject_CallFunction(
      callable,
      format,
    );
  }

  late final _PyObject_CallFunction_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_CallFunction>>(
          'PyObject_CallFunction');
  late final _dart_PyObject_CallFunction _PyObject_CallFunction =
      _PyObject_CallFunction_ptr.asFunction<_dart_PyObject_CallFunction>();

  ffi.Pointer<PyObject> PyObject_CallMethod(
    ffi.Pointer<PyObject> obj,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _PyObject_CallMethod(
      obj,
      name,
      format,
    );
  }

  late final _PyObject_CallMethod_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_CallMethod>>(
          'PyObject_CallMethod');
  late final _dart_PyObject_CallMethod _PyObject_CallMethod =
      _PyObject_CallMethod_ptr.asFunction<_dart_PyObject_CallMethod>();

  ffi.Pointer<PyObject> PyObject_CallFunction_SizeT(
    ffi.Pointer<PyObject> callable,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _PyObject_CallFunction_SizeT(
      callable,
      format,
    );
  }

  late final _PyObject_CallFunction_SizeT_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_CallFunction_SizeT>>(
          '_PyObject_CallFunction_SizeT');
  late final _dart_PyObject_CallFunction_SizeT _PyObject_CallFunction_SizeT =
      _PyObject_CallFunction_SizeT_ptr.asFunction<
          _dart_PyObject_CallFunction_SizeT>();

  ffi.Pointer<PyObject> PyObject_CallMethod_SizeT(
    ffi.Pointer<PyObject> obj,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _PyObject_CallMethod_SizeT(
      obj,
      name,
      format,
    );
  }

  late final _PyObject_CallMethod_SizeT_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_CallMethod_SizeT>>(
          '_PyObject_CallMethod_SizeT');
  late final _dart_PyObject_CallMethod_SizeT _PyObject_CallMethod_SizeT =
      _PyObject_CallMethod_SizeT_ptr.asFunction<
          _dart_PyObject_CallMethod_SizeT>();

  ffi.Pointer<PyObject> PyObject_CallFunctionObjArgs(
    ffi.Pointer<PyObject> callable,
  ) {
    return _PyObject_CallFunctionObjArgs(
      callable,
    );
  }

  late final _PyObject_CallFunctionObjArgs_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_CallFunctionObjArgs>>(
          'PyObject_CallFunctionObjArgs');
  late final _dart_PyObject_CallFunctionObjArgs _PyObject_CallFunctionObjArgs =
      _PyObject_CallFunctionObjArgs_ptr.asFunction<
          _dart_PyObject_CallFunctionObjArgs>();

  ffi.Pointer<PyObject> PyObject_CallMethodObjArgs(
    ffi.Pointer<PyObject> obj,
    ffi.Pointer<PyObject> name,
  ) {
    return _PyObject_CallMethodObjArgs(
      obj,
      name,
    );
  }

  late final _PyObject_CallMethodObjArgs_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_CallMethodObjArgs>>(
          'PyObject_CallMethodObjArgs');
  late final _dart_PyObject_CallMethodObjArgs _PyObject_CallMethodObjArgs =
      _PyObject_CallMethodObjArgs_ptr.asFunction<
          _dart_PyObject_CallMethodObjArgs>();

  ffi.Pointer<PyObject> PyObject_Type(
    ffi.Pointer<PyObject> o,
  ) {
    return _PyObject_Type(
      o,
    );
  }

  late final _PyObject_Type_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_Type>>('PyObject_Type');
  late final _dart_PyObject_Type _PyObject_Type =
      _PyObject_Type_ptr.asFunction<_dart_PyObject_Type>();

  int PyObject_Size(
    ffi.Pointer<PyObject> o,
  ) {
    return _PyObject_Size(
      o,
    );
  }

  late final _PyObject_Size_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_Size>>('PyObject_Size');
  late final _dart_PyObject_Size _PyObject_Size =
      _PyObject_Size_ptr.asFunction<_dart_PyObject_Size>();

  int PyObject_Length(
    ffi.Pointer<PyObject> o,
  ) {
    return _PyObject_Length(
      o,
    );
  }

  late final _PyObject_Length_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_Length>>('PyObject_Length');
  late final _dart_PyObject_Length _PyObject_Length =
      _PyObject_Length_ptr.asFunction<_dart_PyObject_Length>();

  ffi.Pointer<PyObject> PyObject_GetItem(
    ffi.Pointer<PyObject> o,
    ffi.Pointer<PyObject> key,
  ) {
    return _PyObject_GetItem(
      o,
      key,
    );
  }

  late final _PyObject_GetItem_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_GetItem>>('PyObject_GetItem');
  late final _dart_PyObject_GetItem _PyObject_GetItem =
      _PyObject_GetItem_ptr.asFunction<_dart_PyObject_GetItem>();

  int PyObject_SetItem(
    ffi.Pointer<PyObject> o,
    ffi.Pointer<PyObject> key,
    ffi.Pointer<PyObject> v,
  ) {
    return _PyObject_SetItem(
      o,
      key,
      v,
    );
  }

  late final _PyObject_SetItem_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_SetItem>>('PyObject_SetItem');
  late final _dart_PyObject_SetItem _PyObject_SetItem =
      _PyObject_SetItem_ptr.asFunction<_dart_PyObject_SetItem>();

  int PyObject_DelItemString(
    ffi.Pointer<PyObject> o,
    ffi.Pointer<ffi.Int8> key,
  ) {
    return _PyObject_DelItemString(
      o,
      key,
    );
  }

  late final _PyObject_DelItemString_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_DelItemString>>(
          'PyObject_DelItemString');
  late final _dart_PyObject_DelItemString _PyObject_DelItemString =
      _PyObject_DelItemString_ptr.asFunction<_dart_PyObject_DelItemString>();

  int PyObject_DelItem(
    ffi.Pointer<PyObject> o,
    ffi.Pointer<PyObject> key,
  ) {
    return _PyObject_DelItem(
      o,
      key,
    );
  }

  late final _PyObject_DelItem_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_DelItem>>('PyObject_DelItem');
  late final _dart_PyObject_DelItem _PyObject_DelItem =
      _PyObject_DelItem_ptr.asFunction<_dart_PyObject_DelItem>();

  int PyObject_AsCharBuffer(
    ffi.Pointer<PyObject> obj,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> buffer,
    ffi.Pointer<ffi.Int64> buffer_len,
  ) {
    return _PyObject_AsCharBuffer(
      obj,
      buffer,
      buffer_len,
    );
  }

  late final _PyObject_AsCharBuffer_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_AsCharBuffer>>(
          'PyObject_AsCharBuffer');
  late final _dart_PyObject_AsCharBuffer _PyObject_AsCharBuffer =
      _PyObject_AsCharBuffer_ptr.asFunction<_dart_PyObject_AsCharBuffer>();

  int PyObject_CheckReadBuffer(
    ffi.Pointer<PyObject> obj,
  ) {
    return _PyObject_CheckReadBuffer(
      obj,
    );
  }

  late final _PyObject_CheckReadBuffer_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_CheckReadBuffer>>(
          'PyObject_CheckReadBuffer');
  late final _dart_PyObject_CheckReadBuffer _PyObject_CheckReadBuffer =
      _PyObject_CheckReadBuffer_ptr.asFunction<
          _dart_PyObject_CheckReadBuffer>();

  int PyObject_AsReadBuffer(
    ffi.Pointer<PyObject> obj,
    ffi.Pointer<ffi.Pointer<ffi.Void>> buffer,
    ffi.Pointer<ffi.Int64> buffer_len,
  ) {
    return _PyObject_AsReadBuffer(
      obj,
      buffer,
      buffer_len,
    );
  }

  late final _PyObject_AsReadBuffer_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_AsReadBuffer>>(
          'PyObject_AsReadBuffer');
  late final _dart_PyObject_AsReadBuffer _PyObject_AsReadBuffer =
      _PyObject_AsReadBuffer_ptr.asFunction<_dart_PyObject_AsReadBuffer>();

  int PyObject_AsWriteBuffer(
    ffi.Pointer<PyObject> obj,
    ffi.Pointer<ffi.Pointer<ffi.Void>> buffer,
    ffi.Pointer<ffi.Int64> buffer_len,
  ) {
    return _PyObject_AsWriteBuffer(
      obj,
      buffer,
      buffer_len,
    );
  }

  late final _PyObject_AsWriteBuffer_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_AsWriteBuffer>>(
          'PyObject_AsWriteBuffer');
  late final _dart_PyObject_AsWriteBuffer _PyObject_AsWriteBuffer =
      _PyObject_AsWriteBuffer_ptr.asFunction<_dart_PyObject_AsWriteBuffer>();

  ffi.Pointer<PyObject> PyObject_Format(
    ffi.Pointer<PyObject> obj,
    ffi.Pointer<PyObject> format_spec,
  ) {
    return _PyObject_Format(
      obj,
      format_spec,
    );
  }

  late final _PyObject_Format_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_Format>>('PyObject_Format');
  late final _dart_PyObject_Format _PyObject_Format =
      _PyObject_Format_ptr.asFunction<_dart_PyObject_Format>();

  ffi.Pointer<PyObject> PyObject_GetIter(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyObject_GetIter(
      arg0,
    );
  }

  late final _PyObject_GetIter_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_GetIter>>('PyObject_GetIter');
  late final _dart_PyObject_GetIter _PyObject_GetIter =
      _PyObject_GetIter_ptr.asFunction<_dart_PyObject_GetIter>();

  int PyIter_Check(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyIter_Check(
      arg0,
    );
  }

  late final _PyIter_Check_ptr =
      _lookup<ffi.NativeFunction<_c_PyIter_Check>>('PyIter_Check');
  late final _dart_PyIter_Check _PyIter_Check =
      _PyIter_Check_ptr.asFunction<_dart_PyIter_Check>();

  ffi.Pointer<PyObject> PyIter_Next(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyIter_Next(
      arg0,
    );
  }

  late final _PyIter_Next_ptr =
      _lookup<ffi.NativeFunction<_c_PyIter_Next>>('PyIter_Next');
  late final _dart_PyIter_Next _PyIter_Next =
      _PyIter_Next_ptr.asFunction<_dart_PyIter_Next>();

  int PyNumber_Check(
    ffi.Pointer<PyObject> o,
  ) {
    return _PyNumber_Check(
      o,
    );
  }

  late final _PyNumber_Check_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_Check>>('PyNumber_Check');
  late final _dart_PyNumber_Check _PyNumber_Check =
      _PyNumber_Check_ptr.asFunction<_dart_PyNumber_Check>();

  ffi.Pointer<PyObject> PyNumber_Add(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PyNumber_Add(
      o1,
      o2,
    );
  }

  late final _PyNumber_Add_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_Add>>('PyNumber_Add');
  late final _dart_PyNumber_Add _PyNumber_Add =
      _PyNumber_Add_ptr.asFunction<_dart_PyNumber_Add>();

  ffi.Pointer<PyObject> PyNumber_Subtract(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PyNumber_Subtract(
      o1,
      o2,
    );
  }

  late final _PyNumber_Subtract_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_Subtract>>('PyNumber_Subtract');
  late final _dart_PyNumber_Subtract _PyNumber_Subtract =
      _PyNumber_Subtract_ptr.asFunction<_dart_PyNumber_Subtract>();

  ffi.Pointer<PyObject> PyNumber_Multiply(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PyNumber_Multiply(
      o1,
      o2,
    );
  }

  late final _PyNumber_Multiply_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_Multiply>>('PyNumber_Multiply');
  late final _dart_PyNumber_Multiply _PyNumber_Multiply =
      _PyNumber_Multiply_ptr.asFunction<_dart_PyNumber_Multiply>();

  ffi.Pointer<PyObject> PyNumber_MatrixMultiply(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PyNumber_MatrixMultiply(
      o1,
      o2,
    );
  }

  late final _PyNumber_MatrixMultiply_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_MatrixMultiply>>(
          'PyNumber_MatrixMultiply');
  late final _dart_PyNumber_MatrixMultiply _PyNumber_MatrixMultiply =
      _PyNumber_MatrixMultiply_ptr.asFunction<_dart_PyNumber_MatrixMultiply>();

  ffi.Pointer<PyObject> PyNumber_FloorDivide(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PyNumber_FloorDivide(
      o1,
      o2,
    );
  }

  late final _PyNumber_FloorDivide_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_FloorDivide>>(
          'PyNumber_FloorDivide');
  late final _dart_PyNumber_FloorDivide _PyNumber_FloorDivide =
      _PyNumber_FloorDivide_ptr.asFunction<_dart_PyNumber_FloorDivide>();

  ffi.Pointer<PyObject> PyNumber_TrueDivide(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PyNumber_TrueDivide(
      o1,
      o2,
    );
  }

  late final _PyNumber_TrueDivide_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_TrueDivide>>(
          'PyNumber_TrueDivide');
  late final _dart_PyNumber_TrueDivide _PyNumber_TrueDivide =
      _PyNumber_TrueDivide_ptr.asFunction<_dart_PyNumber_TrueDivide>();

  ffi.Pointer<PyObject> PyNumber_Remainder(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PyNumber_Remainder(
      o1,
      o2,
    );
  }

  late final _PyNumber_Remainder_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_Remainder>>('PyNumber_Remainder');
  late final _dart_PyNumber_Remainder _PyNumber_Remainder =
      _PyNumber_Remainder_ptr.asFunction<_dart_PyNumber_Remainder>();

  ffi.Pointer<PyObject> PyNumber_Divmod(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PyNumber_Divmod(
      o1,
      o2,
    );
  }

  late final _PyNumber_Divmod_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_Divmod>>('PyNumber_Divmod');
  late final _dart_PyNumber_Divmod _PyNumber_Divmod =
      _PyNumber_Divmod_ptr.asFunction<_dart_PyNumber_Divmod>();

  ffi.Pointer<PyObject> PyNumber_Power(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
    ffi.Pointer<PyObject> o3,
  ) {
    return _PyNumber_Power(
      o1,
      o2,
      o3,
    );
  }

  late final _PyNumber_Power_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_Power>>('PyNumber_Power');
  late final _dart_PyNumber_Power _PyNumber_Power =
      _PyNumber_Power_ptr.asFunction<_dart_PyNumber_Power>();

  ffi.Pointer<PyObject> PyNumber_Negative(
    ffi.Pointer<PyObject> o,
  ) {
    return _PyNumber_Negative(
      o,
    );
  }

  late final _PyNumber_Negative_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_Negative>>('PyNumber_Negative');
  late final _dart_PyNumber_Negative _PyNumber_Negative =
      _PyNumber_Negative_ptr.asFunction<_dart_PyNumber_Negative>();

  ffi.Pointer<PyObject> PyNumber_Positive(
    ffi.Pointer<PyObject> o,
  ) {
    return _PyNumber_Positive(
      o,
    );
  }

  late final _PyNumber_Positive_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_Positive>>('PyNumber_Positive');
  late final _dart_PyNumber_Positive _PyNumber_Positive =
      _PyNumber_Positive_ptr.asFunction<_dart_PyNumber_Positive>();

  ffi.Pointer<PyObject> PyNumber_Absolute(
    ffi.Pointer<PyObject> o,
  ) {
    return _PyNumber_Absolute(
      o,
    );
  }

  late final _PyNumber_Absolute_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_Absolute>>('PyNumber_Absolute');
  late final _dart_PyNumber_Absolute _PyNumber_Absolute =
      _PyNumber_Absolute_ptr.asFunction<_dart_PyNumber_Absolute>();

  ffi.Pointer<PyObject> PyNumber_Invert(
    ffi.Pointer<PyObject> o,
  ) {
    return _PyNumber_Invert(
      o,
    );
  }

  late final _PyNumber_Invert_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_Invert>>('PyNumber_Invert');
  late final _dart_PyNumber_Invert _PyNumber_Invert =
      _PyNumber_Invert_ptr.asFunction<_dart_PyNumber_Invert>();

  ffi.Pointer<PyObject> PyNumber_Lshift(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PyNumber_Lshift(
      o1,
      o2,
    );
  }

  late final _PyNumber_Lshift_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_Lshift>>('PyNumber_Lshift');
  late final _dart_PyNumber_Lshift _PyNumber_Lshift =
      _PyNumber_Lshift_ptr.asFunction<_dart_PyNumber_Lshift>();

  ffi.Pointer<PyObject> PyNumber_Rshift(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PyNumber_Rshift(
      o1,
      o2,
    );
  }

  late final _PyNumber_Rshift_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_Rshift>>('PyNumber_Rshift');
  late final _dart_PyNumber_Rshift _PyNumber_Rshift =
      _PyNumber_Rshift_ptr.asFunction<_dart_PyNumber_Rshift>();

  ffi.Pointer<PyObject> PyNumber_And(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PyNumber_And(
      o1,
      o2,
    );
  }

  late final _PyNumber_And_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_And>>('PyNumber_And');
  late final _dart_PyNumber_And _PyNumber_And =
      _PyNumber_And_ptr.asFunction<_dart_PyNumber_And>();

  ffi.Pointer<PyObject> PyNumber_Xor(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PyNumber_Xor(
      o1,
      o2,
    );
  }

  late final _PyNumber_Xor_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_Xor>>('PyNumber_Xor');
  late final _dart_PyNumber_Xor _PyNumber_Xor =
      _PyNumber_Xor_ptr.asFunction<_dart_PyNumber_Xor>();

  ffi.Pointer<PyObject> PyNumber_Or(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PyNumber_Or(
      o1,
      o2,
    );
  }

  late final _PyNumber_Or_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_Or>>('PyNumber_Or');
  late final _dart_PyNumber_Or _PyNumber_Or =
      _PyNumber_Or_ptr.asFunction<_dart_PyNumber_Or>();

  int PyIndex_Check(
    ffi.Pointer<PyObject> arg0,
  ) {
    return _PyIndex_Check(
      arg0,
    );
  }

  late final _PyIndex_Check_ptr =
      _lookup<ffi.NativeFunction<_c_PyIndex_Check>>('PyIndex_Check');
  late final _dart_PyIndex_Check _PyIndex_Check =
      _PyIndex_Check_ptr.asFunction<_dart_PyIndex_Check>();

  ffi.Pointer<PyObject> PyNumber_Index(
    ffi.Pointer<PyObject> o,
  ) {
    return _PyNumber_Index(
      o,
    );
  }

  late final _PyNumber_Index_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_Index>>('PyNumber_Index');
  late final _dart_PyNumber_Index _PyNumber_Index =
      _PyNumber_Index_ptr.asFunction<_dart_PyNumber_Index>();

  int PyNumber_AsSsize_t(
    ffi.Pointer<PyObject> o,
    ffi.Pointer<PyObject> exc,
  ) {
    return _PyNumber_AsSsize_t(
      o,
      exc,
    );
  }

  late final _PyNumber_AsSsize_t_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_AsSsize_t>>('PyNumber_AsSsize_t');
  late final _dart_PyNumber_AsSsize_t _PyNumber_AsSsize_t =
      _PyNumber_AsSsize_t_ptr.asFunction<_dart_PyNumber_AsSsize_t>();

  ffi.Pointer<PyObject> PyNumber_Long(
    ffi.Pointer<PyObject> o,
  ) {
    return _PyNumber_Long(
      o,
    );
  }

  late final _PyNumber_Long_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_Long>>('PyNumber_Long');
  late final _dart_PyNumber_Long _PyNumber_Long =
      _PyNumber_Long_ptr.asFunction<_dart_PyNumber_Long>();

  ffi.Pointer<PyObject> PyNumber_Float(
    ffi.Pointer<PyObject> o,
  ) {
    return _PyNumber_Float(
      o,
    );
  }

  late final _PyNumber_Float_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_Float>>('PyNumber_Float');
  late final _dart_PyNumber_Float _PyNumber_Float =
      _PyNumber_Float_ptr.asFunction<_dart_PyNumber_Float>();

  ffi.Pointer<PyObject> PyNumber_InPlaceAdd(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PyNumber_InPlaceAdd(
      o1,
      o2,
    );
  }

  late final _PyNumber_InPlaceAdd_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_InPlaceAdd>>(
          'PyNumber_InPlaceAdd');
  late final _dart_PyNumber_InPlaceAdd _PyNumber_InPlaceAdd =
      _PyNumber_InPlaceAdd_ptr.asFunction<_dart_PyNumber_InPlaceAdd>();

  ffi.Pointer<PyObject> PyNumber_InPlaceSubtract(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PyNumber_InPlaceSubtract(
      o1,
      o2,
    );
  }

  late final _PyNumber_InPlaceSubtract_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_InPlaceSubtract>>(
          'PyNumber_InPlaceSubtract');
  late final _dart_PyNumber_InPlaceSubtract _PyNumber_InPlaceSubtract =
      _PyNumber_InPlaceSubtract_ptr.asFunction<
          _dart_PyNumber_InPlaceSubtract>();

  ffi.Pointer<PyObject> PyNumber_InPlaceMultiply(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PyNumber_InPlaceMultiply(
      o1,
      o2,
    );
  }

  late final _PyNumber_InPlaceMultiply_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_InPlaceMultiply>>(
          'PyNumber_InPlaceMultiply');
  late final _dart_PyNumber_InPlaceMultiply _PyNumber_InPlaceMultiply =
      _PyNumber_InPlaceMultiply_ptr.asFunction<
          _dart_PyNumber_InPlaceMultiply>();

  ffi.Pointer<PyObject> PyNumber_InPlaceMatrixMultiply(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PyNumber_InPlaceMatrixMultiply(
      o1,
      o2,
    );
  }

  late final _PyNumber_InPlaceMatrixMultiply_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_InPlaceMatrixMultiply>>(
          'PyNumber_InPlaceMatrixMultiply');
  late final _dart_PyNumber_InPlaceMatrixMultiply
      _PyNumber_InPlaceMatrixMultiply = _PyNumber_InPlaceMatrixMultiply_ptr
          .asFunction<_dart_PyNumber_InPlaceMatrixMultiply>();

  ffi.Pointer<PyObject> PyNumber_InPlaceFloorDivide(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PyNumber_InPlaceFloorDivide(
      o1,
      o2,
    );
  }

  late final _PyNumber_InPlaceFloorDivide_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_InPlaceFloorDivide>>(
          'PyNumber_InPlaceFloorDivide');
  late final _dart_PyNumber_InPlaceFloorDivide _PyNumber_InPlaceFloorDivide =
      _PyNumber_InPlaceFloorDivide_ptr.asFunction<
          _dart_PyNumber_InPlaceFloorDivide>();

  ffi.Pointer<PyObject> PyNumber_InPlaceTrueDivide(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PyNumber_InPlaceTrueDivide(
      o1,
      o2,
    );
  }

  late final _PyNumber_InPlaceTrueDivide_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_InPlaceTrueDivide>>(
          'PyNumber_InPlaceTrueDivide');
  late final _dart_PyNumber_InPlaceTrueDivide _PyNumber_InPlaceTrueDivide =
      _PyNumber_InPlaceTrueDivide_ptr.asFunction<
          _dart_PyNumber_InPlaceTrueDivide>();

  ffi.Pointer<PyObject> PyNumber_InPlaceRemainder(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PyNumber_InPlaceRemainder(
      o1,
      o2,
    );
  }

  late final _PyNumber_InPlaceRemainder_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_InPlaceRemainder>>(
          'PyNumber_InPlaceRemainder');
  late final _dart_PyNumber_InPlaceRemainder _PyNumber_InPlaceRemainder =
      _PyNumber_InPlaceRemainder_ptr.asFunction<
          _dart_PyNumber_InPlaceRemainder>();

  ffi.Pointer<PyObject> PyNumber_InPlacePower(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
    ffi.Pointer<PyObject> o3,
  ) {
    return _PyNumber_InPlacePower(
      o1,
      o2,
      o3,
    );
  }

  late final _PyNumber_InPlacePower_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_InPlacePower>>(
          'PyNumber_InPlacePower');
  late final _dart_PyNumber_InPlacePower _PyNumber_InPlacePower =
      _PyNumber_InPlacePower_ptr.asFunction<_dart_PyNumber_InPlacePower>();

  ffi.Pointer<PyObject> PyNumber_InPlaceLshift(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PyNumber_InPlaceLshift(
      o1,
      o2,
    );
  }

  late final _PyNumber_InPlaceLshift_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_InPlaceLshift>>(
          'PyNumber_InPlaceLshift');
  late final _dart_PyNumber_InPlaceLshift _PyNumber_InPlaceLshift =
      _PyNumber_InPlaceLshift_ptr.asFunction<_dart_PyNumber_InPlaceLshift>();

  ffi.Pointer<PyObject> PyNumber_InPlaceRshift(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PyNumber_InPlaceRshift(
      o1,
      o2,
    );
  }

  late final _PyNumber_InPlaceRshift_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_InPlaceRshift>>(
          'PyNumber_InPlaceRshift');
  late final _dart_PyNumber_InPlaceRshift _PyNumber_InPlaceRshift =
      _PyNumber_InPlaceRshift_ptr.asFunction<_dart_PyNumber_InPlaceRshift>();

  ffi.Pointer<PyObject> PyNumber_InPlaceAnd(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PyNumber_InPlaceAnd(
      o1,
      o2,
    );
  }

  late final _PyNumber_InPlaceAnd_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_InPlaceAnd>>(
          'PyNumber_InPlaceAnd');
  late final _dart_PyNumber_InPlaceAnd _PyNumber_InPlaceAnd =
      _PyNumber_InPlaceAnd_ptr.asFunction<_dart_PyNumber_InPlaceAnd>();

  ffi.Pointer<PyObject> PyNumber_InPlaceXor(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PyNumber_InPlaceXor(
      o1,
      o2,
    );
  }

  late final _PyNumber_InPlaceXor_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_InPlaceXor>>(
          'PyNumber_InPlaceXor');
  late final _dart_PyNumber_InPlaceXor _PyNumber_InPlaceXor =
      _PyNumber_InPlaceXor_ptr.asFunction<_dart_PyNumber_InPlaceXor>();

  ffi.Pointer<PyObject> PyNumber_InPlaceOr(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PyNumber_InPlaceOr(
      o1,
      o2,
    );
  }

  late final _PyNumber_InPlaceOr_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_InPlaceOr>>('PyNumber_InPlaceOr');
  late final _dart_PyNumber_InPlaceOr _PyNumber_InPlaceOr =
      _PyNumber_InPlaceOr_ptr.asFunction<_dart_PyNumber_InPlaceOr>();

  ffi.Pointer<PyObject> PyNumber_ToBase(
    ffi.Pointer<PyObject> n,
    int base,
  ) {
    return _PyNumber_ToBase(
      n,
      base,
    );
  }

  late final _PyNumber_ToBase_ptr =
      _lookup<ffi.NativeFunction<_c_PyNumber_ToBase>>('PyNumber_ToBase');
  late final _dart_PyNumber_ToBase _PyNumber_ToBase =
      _PyNumber_ToBase_ptr.asFunction<_dart_PyNumber_ToBase>();

  int PySequence_Check(
    ffi.Pointer<PyObject> o,
  ) {
    return _PySequence_Check(
      o,
    );
  }

  late final _PySequence_Check_ptr =
      _lookup<ffi.NativeFunction<_c_PySequence_Check>>('PySequence_Check');
  late final _dart_PySequence_Check _PySequence_Check =
      _PySequence_Check_ptr.asFunction<_dart_PySequence_Check>();

  int PySequence_Size(
    ffi.Pointer<PyObject> o,
  ) {
    return _PySequence_Size(
      o,
    );
  }

  late final _PySequence_Size_ptr =
      _lookup<ffi.NativeFunction<_c_PySequence_Size>>('PySequence_Size');
  late final _dart_PySequence_Size _PySequence_Size =
      _PySequence_Size_ptr.asFunction<_dart_PySequence_Size>();

  int PySequence_Length(
    ffi.Pointer<PyObject> o,
  ) {
    return _PySequence_Length(
      o,
    );
  }

  late final _PySequence_Length_ptr =
      _lookup<ffi.NativeFunction<_c_PySequence_Length>>('PySequence_Length');
  late final _dart_PySequence_Length _PySequence_Length =
      _PySequence_Length_ptr.asFunction<_dart_PySequence_Length>();

  ffi.Pointer<PyObject> PySequence_Concat(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PySequence_Concat(
      o1,
      o2,
    );
  }

  late final _PySequence_Concat_ptr =
      _lookup<ffi.NativeFunction<_c_PySequence_Concat>>('PySequence_Concat');
  late final _dart_PySequence_Concat _PySequence_Concat =
      _PySequence_Concat_ptr.asFunction<_dart_PySequence_Concat>();

  ffi.Pointer<PyObject> PySequence_Repeat(
    ffi.Pointer<PyObject> o,
    int count,
  ) {
    return _PySequence_Repeat(
      o,
      count,
    );
  }

  late final _PySequence_Repeat_ptr =
      _lookup<ffi.NativeFunction<_c_PySequence_Repeat>>('PySequence_Repeat');
  late final _dart_PySequence_Repeat _PySequence_Repeat =
      _PySequence_Repeat_ptr.asFunction<_dart_PySequence_Repeat>();

  ffi.Pointer<PyObject> PySequence_GetItem(
    ffi.Pointer<PyObject> o,
    int i,
  ) {
    return _PySequence_GetItem(
      o,
      i,
    );
  }

  late final _PySequence_GetItem_ptr =
      _lookup<ffi.NativeFunction<_c_PySequence_GetItem>>('PySequence_GetItem');
  late final _dart_PySequence_GetItem _PySequence_GetItem =
      _PySequence_GetItem_ptr.asFunction<_dart_PySequence_GetItem>();

  ffi.Pointer<PyObject> PySequence_GetSlice(
    ffi.Pointer<PyObject> o,
    int i1,
    int i2,
  ) {
    return _PySequence_GetSlice(
      o,
      i1,
      i2,
    );
  }

  late final _PySequence_GetSlice_ptr =
      _lookup<ffi.NativeFunction<_c_PySequence_GetSlice>>(
          'PySequence_GetSlice');
  late final _dart_PySequence_GetSlice _PySequence_GetSlice =
      _PySequence_GetSlice_ptr.asFunction<_dart_PySequence_GetSlice>();

  int PySequence_SetItem(
    ffi.Pointer<PyObject> o,
    int i,
    ffi.Pointer<PyObject> v,
  ) {
    return _PySequence_SetItem(
      o,
      i,
      v,
    );
  }

  late final _PySequence_SetItem_ptr =
      _lookup<ffi.NativeFunction<_c_PySequence_SetItem>>('PySequence_SetItem');
  late final _dart_PySequence_SetItem _PySequence_SetItem =
      _PySequence_SetItem_ptr.asFunction<_dart_PySequence_SetItem>();

  int PySequence_DelItem(
    ffi.Pointer<PyObject> o,
    int i,
  ) {
    return _PySequence_DelItem(
      o,
      i,
    );
  }

  late final _PySequence_DelItem_ptr =
      _lookup<ffi.NativeFunction<_c_PySequence_DelItem>>('PySequence_DelItem');
  late final _dart_PySequence_DelItem _PySequence_DelItem =
      _PySequence_DelItem_ptr.asFunction<_dart_PySequence_DelItem>();

  int PySequence_SetSlice(
    ffi.Pointer<PyObject> o,
    int i1,
    int i2,
    ffi.Pointer<PyObject> v,
  ) {
    return _PySequence_SetSlice(
      o,
      i1,
      i2,
      v,
    );
  }

  late final _PySequence_SetSlice_ptr =
      _lookup<ffi.NativeFunction<_c_PySequence_SetSlice>>(
          'PySequence_SetSlice');
  late final _dart_PySequence_SetSlice _PySequence_SetSlice =
      _PySequence_SetSlice_ptr.asFunction<_dart_PySequence_SetSlice>();

  int PySequence_DelSlice(
    ffi.Pointer<PyObject> o,
    int i1,
    int i2,
  ) {
    return _PySequence_DelSlice(
      o,
      i1,
      i2,
    );
  }

  late final _PySequence_DelSlice_ptr =
      _lookup<ffi.NativeFunction<_c_PySequence_DelSlice>>(
          'PySequence_DelSlice');
  late final _dart_PySequence_DelSlice _PySequence_DelSlice =
      _PySequence_DelSlice_ptr.asFunction<_dart_PySequence_DelSlice>();

  ffi.Pointer<PyObject> PySequence_Tuple(
    ffi.Pointer<PyObject> o,
  ) {
    return _PySequence_Tuple(
      o,
    );
  }

  late final _PySequence_Tuple_ptr =
      _lookup<ffi.NativeFunction<_c_PySequence_Tuple>>('PySequence_Tuple');
  late final _dart_PySequence_Tuple _PySequence_Tuple =
      _PySequence_Tuple_ptr.asFunction<_dart_PySequence_Tuple>();

  ffi.Pointer<PyObject> PySequence_List(
    ffi.Pointer<PyObject> o,
  ) {
    return _PySequence_List(
      o,
    );
  }

  late final _PySequence_List_ptr =
      _lookup<ffi.NativeFunction<_c_PySequence_List>>('PySequence_List');
  late final _dart_PySequence_List _PySequence_List =
      _PySequence_List_ptr.asFunction<_dart_PySequence_List>();

  ffi.Pointer<PyObject> PySequence_Fast(
    ffi.Pointer<PyObject> o,
    ffi.Pointer<ffi.Int8> m,
  ) {
    return _PySequence_Fast(
      o,
      m,
    );
  }

  late final _PySequence_Fast_ptr =
      _lookup<ffi.NativeFunction<_c_PySequence_Fast>>('PySequence_Fast');
  late final _dart_PySequence_Fast _PySequence_Fast =
      _PySequence_Fast_ptr.asFunction<_dart_PySequence_Fast>();

  int PySequence_Count(
    ffi.Pointer<PyObject> o,
    ffi.Pointer<PyObject> value,
  ) {
    return _PySequence_Count(
      o,
      value,
    );
  }

  late final _PySequence_Count_ptr =
      _lookup<ffi.NativeFunction<_c_PySequence_Count>>('PySequence_Count');
  late final _dart_PySequence_Count _PySequence_Count =
      _PySequence_Count_ptr.asFunction<_dart_PySequence_Count>();

  int PySequence_Contains(
    ffi.Pointer<PyObject> seq,
    ffi.Pointer<PyObject> ob,
  ) {
    return _PySequence_Contains(
      seq,
      ob,
    );
  }

  late final _PySequence_Contains_ptr =
      _lookup<ffi.NativeFunction<_c_PySequence_Contains>>(
          'PySequence_Contains');
  late final _dart_PySequence_Contains _PySequence_Contains =
      _PySequence_Contains_ptr.asFunction<_dart_PySequence_Contains>();

  int PySequence_In(
    ffi.Pointer<PyObject> o,
    ffi.Pointer<PyObject> value,
  ) {
    return _PySequence_In(
      o,
      value,
    );
  }

  late final _PySequence_In_ptr =
      _lookup<ffi.NativeFunction<_c_PySequence_In>>('PySequence_In');
  late final _dart_PySequence_In _PySequence_In =
      _PySequence_In_ptr.asFunction<_dart_PySequence_In>();

  int PySequence_Index(
    ffi.Pointer<PyObject> o,
    ffi.Pointer<PyObject> value,
  ) {
    return _PySequence_Index(
      o,
      value,
    );
  }

  late final _PySequence_Index_ptr =
      _lookup<ffi.NativeFunction<_c_PySequence_Index>>('PySequence_Index');
  late final _dart_PySequence_Index _PySequence_Index =
      _PySequence_Index_ptr.asFunction<_dart_PySequence_Index>();

  ffi.Pointer<PyObject> PySequence_InPlaceConcat(
    ffi.Pointer<PyObject> o1,
    ffi.Pointer<PyObject> o2,
  ) {
    return _PySequence_InPlaceConcat(
      o1,
      o2,
    );
  }

  late final _PySequence_InPlaceConcat_ptr =
      _lookup<ffi.NativeFunction<_c_PySequence_InPlaceConcat>>(
          'PySequence_InPlaceConcat');
  late final _dart_PySequence_InPlaceConcat _PySequence_InPlaceConcat =
      _PySequence_InPlaceConcat_ptr.asFunction<
          _dart_PySequence_InPlaceConcat>();

  ffi.Pointer<PyObject> PySequence_InPlaceRepeat(
    ffi.Pointer<PyObject> o,
    int count,
  ) {
    return _PySequence_InPlaceRepeat(
      o,
      count,
    );
  }

  late final _PySequence_InPlaceRepeat_ptr =
      _lookup<ffi.NativeFunction<_c_PySequence_InPlaceRepeat>>(
          'PySequence_InPlaceRepeat');
  late final _dart_PySequence_InPlaceRepeat _PySequence_InPlaceRepeat =
      _PySequence_InPlaceRepeat_ptr.asFunction<
          _dart_PySequence_InPlaceRepeat>();

  int PyMapping_Check(
    ffi.Pointer<PyObject> o,
  ) {
    return _PyMapping_Check(
      o,
    );
  }

  late final _PyMapping_Check_ptr =
      _lookup<ffi.NativeFunction<_c_PyMapping_Check>>('PyMapping_Check');
  late final _dart_PyMapping_Check _PyMapping_Check =
      _PyMapping_Check_ptr.asFunction<_dart_PyMapping_Check>();

  int PyMapping_Size(
    ffi.Pointer<PyObject> o,
  ) {
    return _PyMapping_Size(
      o,
    );
  }

  late final _PyMapping_Size_ptr =
      _lookup<ffi.NativeFunction<_c_PyMapping_Size>>('PyMapping_Size');
  late final _dart_PyMapping_Size _PyMapping_Size =
      _PyMapping_Size_ptr.asFunction<_dart_PyMapping_Size>();

  int PyMapping_Length(
    ffi.Pointer<PyObject> o,
  ) {
    return _PyMapping_Length(
      o,
    );
  }

  late final _PyMapping_Length_ptr =
      _lookup<ffi.NativeFunction<_c_PyMapping_Length>>('PyMapping_Length');
  late final _dart_PyMapping_Length _PyMapping_Length =
      _PyMapping_Length_ptr.asFunction<_dart_PyMapping_Length>();

  int PyMapping_HasKeyString(
    ffi.Pointer<PyObject> o,
    ffi.Pointer<ffi.Int8> key,
  ) {
    return _PyMapping_HasKeyString(
      o,
      key,
    );
  }

  late final _PyMapping_HasKeyString_ptr =
      _lookup<ffi.NativeFunction<_c_PyMapping_HasKeyString>>(
          'PyMapping_HasKeyString');
  late final _dart_PyMapping_HasKeyString _PyMapping_HasKeyString =
      _PyMapping_HasKeyString_ptr.asFunction<_dart_PyMapping_HasKeyString>();

  int PyMapping_HasKey(
    ffi.Pointer<PyObject> o,
    ffi.Pointer<PyObject> key,
  ) {
    return _PyMapping_HasKey(
      o,
      key,
    );
  }

  late final _PyMapping_HasKey_ptr =
      _lookup<ffi.NativeFunction<_c_PyMapping_HasKey>>('PyMapping_HasKey');
  late final _dart_PyMapping_HasKey _PyMapping_HasKey =
      _PyMapping_HasKey_ptr.asFunction<_dart_PyMapping_HasKey>();

  ffi.Pointer<PyObject> PyMapping_Keys(
    ffi.Pointer<PyObject> o,
  ) {
    return _PyMapping_Keys(
      o,
    );
  }

  late final _PyMapping_Keys_ptr =
      _lookup<ffi.NativeFunction<_c_PyMapping_Keys>>('PyMapping_Keys');
  late final _dart_PyMapping_Keys _PyMapping_Keys =
      _PyMapping_Keys_ptr.asFunction<_dart_PyMapping_Keys>();

  ffi.Pointer<PyObject> PyMapping_Values(
    ffi.Pointer<PyObject> o,
  ) {
    return _PyMapping_Values(
      o,
    );
  }

  late final _PyMapping_Values_ptr =
      _lookup<ffi.NativeFunction<_c_PyMapping_Values>>('PyMapping_Values');
  late final _dart_PyMapping_Values _PyMapping_Values =
      _PyMapping_Values_ptr.asFunction<_dart_PyMapping_Values>();

  ffi.Pointer<PyObject> PyMapping_Items(
    ffi.Pointer<PyObject> o,
  ) {
    return _PyMapping_Items(
      o,
    );
  }

  late final _PyMapping_Items_ptr =
      _lookup<ffi.NativeFunction<_c_PyMapping_Items>>('PyMapping_Items');
  late final _dart_PyMapping_Items _PyMapping_Items =
      _PyMapping_Items_ptr.asFunction<_dart_PyMapping_Items>();

  ffi.Pointer<PyObject> PyMapping_GetItemString(
    ffi.Pointer<PyObject> o,
    ffi.Pointer<ffi.Int8> key,
  ) {
    return _PyMapping_GetItemString(
      o,
      key,
    );
  }

  late final _PyMapping_GetItemString_ptr =
      _lookup<ffi.NativeFunction<_c_PyMapping_GetItemString>>(
          'PyMapping_GetItemString');
  late final _dart_PyMapping_GetItemString _PyMapping_GetItemString =
      _PyMapping_GetItemString_ptr.asFunction<_dart_PyMapping_GetItemString>();

  int PyMapping_SetItemString(
    ffi.Pointer<PyObject> o,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<PyObject> value,
  ) {
    return _PyMapping_SetItemString(
      o,
      key,
      value,
    );
  }

  late final _PyMapping_SetItemString_ptr =
      _lookup<ffi.NativeFunction<_c_PyMapping_SetItemString>>(
          'PyMapping_SetItemString');
  late final _dart_PyMapping_SetItemString _PyMapping_SetItemString =
      _PyMapping_SetItemString_ptr.asFunction<_dart_PyMapping_SetItemString>();

  int PyObject_IsInstance(
    ffi.Pointer<PyObject> object,
    ffi.Pointer<PyObject> typeorclass,
  ) {
    return _PyObject_IsInstance(
      object,
      typeorclass,
    );
  }

  late final _PyObject_IsInstance_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_IsInstance>>(
          'PyObject_IsInstance');
  late final _dart_PyObject_IsInstance _PyObject_IsInstance =
      _PyObject_IsInstance_ptr.asFunction<_dart_PyObject_IsInstance>();

  int PyObject_IsSubclass(
    ffi.Pointer<PyObject> object,
    ffi.Pointer<PyObject> typeorclass,
  ) {
    return _PyObject_IsSubclass(
      object,
      typeorclass,
    );
  }

  late final _PyObject_IsSubclass_ptr =
      _lookup<ffi.NativeFunction<_c_PyObject_IsSubclass>>(
          'PyObject_IsSubclass');
  late final _dart_PyObject_IsSubclass _PyObject_IsSubclass =
      _PyObject_IsSubclass_ptr.asFunction<_dart_PyObject_IsSubclass>();

  late final ffi.Pointer<_typeobject> _PyFilter_Type =
      _lookup<_typeobject>('PyFilter_Type');

  _typeobject get PyFilter_Type => _PyFilter_Type.ref;

  late final ffi.Pointer<_typeobject> _PyMap_Type =
      _lookup<_typeobject>('PyMap_Type');

  _typeobject get PyMap_Type => _PyMap_Type.ref;

  late final ffi.Pointer<_typeobject> _PyZip_Type =
      _lookup<_typeobject>('PyZip_Type');

  _typeobject get PyZip_Type => _PyZip_Type.ref;

  ffi.Pointer<PyObject> PyEval_EvalCode(
    ffi.Pointer<PyObject> arg0,
    ffi.Pointer<PyObject> arg1,
    ffi.Pointer<PyObject> arg2,
  ) {
    return _PyEval_EvalCode(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyEval_EvalCode_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_EvalCode>>('PyEval_EvalCode');
  late final _dart_PyEval_EvalCode _PyEval_EvalCode =
      _PyEval_EvalCode_ptr.asFunction<_dart_PyEval_EvalCode>();

  ffi.Pointer<PyObject> PyEval_EvalCodeEx(
    ffi.Pointer<PyObject> co,
    ffi.Pointer<PyObject> globals,
    ffi.Pointer<PyObject> locals,
    ffi.Pointer<ffi.Pointer<PyObject>> args,
    int argc,
    ffi.Pointer<ffi.Pointer<PyObject>> kwds,
    int kwdc,
    ffi.Pointer<ffi.Pointer<PyObject>> defs,
    int defc,
    ffi.Pointer<PyObject> kwdefs,
    ffi.Pointer<PyObject> closure,
  ) {
    return _PyEval_EvalCodeEx(
      co,
      globals,
      locals,
      args,
      argc,
      kwds,
      kwdc,
      defs,
      defc,
      kwdefs,
      closure,
    );
  }

  late final _PyEval_EvalCodeEx_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_EvalCodeEx>>('PyEval_EvalCodeEx');
  late final _dart_PyEval_EvalCodeEx _PyEval_EvalCodeEx =
      _PyEval_EvalCodeEx_ptr.asFunction<_dart_PyEval_EvalCodeEx>();

  ffi.Pointer<PyObject> PyEval_EvalCodeWithName(
    ffi.Pointer<PyObject> co,
    ffi.Pointer<PyObject> globals,
    ffi.Pointer<PyObject> locals,
    ffi.Pointer<ffi.Pointer<PyObject>> args,
    int argcount,
    ffi.Pointer<ffi.Pointer<PyObject>> kwnames,
    ffi.Pointer<ffi.Pointer<PyObject>> kwargs,
    int kwcount,
    int kwstep,
    ffi.Pointer<ffi.Pointer<PyObject>> defs,
    int defcount,
    ffi.Pointer<PyObject> kwdefs,
    ffi.Pointer<PyObject> closure,
    ffi.Pointer<PyObject> name,
    ffi.Pointer<PyObject> qualname,
  ) {
    return _PyEval_EvalCodeWithName(
      co,
      globals,
      locals,
      args,
      argcount,
      kwnames,
      kwargs,
      kwcount,
      kwstep,
      defs,
      defcount,
      kwdefs,
      closure,
      name,
      qualname,
    );
  }

  late final _PyEval_EvalCodeWithName_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_EvalCodeWithName>>(
          '_PyEval_EvalCodeWithName');
  late final _dart_PyEval_EvalCodeWithName _PyEval_EvalCodeWithName =
      _PyEval_EvalCodeWithName_ptr.asFunction<_dart_PyEval_EvalCodeWithName>();

  ffi.Pointer<PyObject> PyEval_CallTracing(
    ffi.Pointer<PyObject> func,
    ffi.Pointer<PyObject> args,
  ) {
    return _PyEval_CallTracing(
      func,
      args,
    );
  }

  late final _PyEval_CallTracing_ptr =
      _lookup<ffi.NativeFunction<_c_PyEval_CallTracing>>('_PyEval_CallTracing');
  late final _dart_PyEval_CallTracing _PyEval_CallTracing =
      _PyEval_CallTracing_ptr.asFunction<_dart_PyEval_CallTracing>();

  late final ffi.Pointer<ffi.Pointer<ffi.Uint32>> _Py_ctype_table =
      _lookup<ffi.Pointer<ffi.Uint32>>('_Py_ctype_table');

  ffi.Pointer<ffi.Uint32> get Py_ctype_table => _Py_ctype_table.value;

  set Py_ctype_table(ffi.Pointer<ffi.Uint32> value) =>
      _Py_ctype_table.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Uint8>> _Py_ctype_tolower =
      _lookup<ffi.Pointer<ffi.Uint8>>('_Py_ctype_tolower');

  ffi.Pointer<ffi.Uint8> get Py_ctype_tolower => _Py_ctype_tolower.value;

  set Py_ctype_tolower(ffi.Pointer<ffi.Uint8> value) =>
      _Py_ctype_tolower.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Uint8>> _Py_ctype_toupper =
      _lookup<ffi.Pointer<ffi.Uint8>>('_Py_ctype_toupper');

  ffi.Pointer<ffi.Uint8> get Py_ctype_toupper => _Py_ctype_toupper.value;

  set Py_ctype_toupper(ffi.Pointer<ffi.Uint8> value) =>
      _Py_ctype_toupper.value = value;

  double PyOS_string_to_double(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> endptr,
    ffi.Pointer<PyObject> overflow_exception,
  ) {
    return _PyOS_string_to_double(
      str,
      endptr,
      overflow_exception,
    );
  }

  late final _PyOS_string_to_double_ptr =
      _lookup<ffi.NativeFunction<_c_PyOS_string_to_double>>(
          'PyOS_string_to_double');
  late final _dart_PyOS_string_to_double _PyOS_string_to_double =
      _PyOS_string_to_double_ptr.asFunction<_dart_PyOS_string_to_double>();

  ffi.Pointer<ffi.Int8> PyOS_double_to_string(
    double val,
    int format_code,
    int precision,
    int flags,
    ffi.Pointer<ffi.Int32> type,
  ) {
    return _PyOS_double_to_string(
      val,
      format_code,
      precision,
      flags,
      type,
    );
  }

  late final _PyOS_double_to_string_ptr =
      _lookup<ffi.NativeFunction<_c_PyOS_double_to_string>>(
          'PyOS_double_to_string');
  late final _dart_PyOS_double_to_string _PyOS_double_to_string =
      _PyOS_double_to_string_ptr.asFunction<_dart_PyOS_double_to_string>();

  ffi.Pointer<PyObject> Py_string_to_number_with_underscores(
    ffi.Pointer<ffi.Int8> str,
    int len,
    ffi.Pointer<ffi.Int8> what,
    ffi.Pointer<PyObject> obj,
    ffi.Pointer<ffi.Void> arg,
    ffi.Pointer<ffi.NativeFunction<_typedefC_12>> innerfunc,
  ) {
    return _Py_string_to_number_with_underscores(
      str,
      len,
      what,
      obj,
      arg,
      innerfunc,
    );
  }

  late final _Py_string_to_number_with_underscores_ptr =
      _lookup<ffi.NativeFunction<_c_Py_string_to_number_with_underscores>>(
          '_Py_string_to_number_with_underscores');
  late final _dart_Py_string_to_number_with_underscores
      _Py_string_to_number_with_underscores =
      _Py_string_to_number_with_underscores_ptr.asFunction<
          _dart_Py_string_to_number_with_underscores>();

  double Py_parse_inf_or_nan(
    ffi.Pointer<ffi.Int8> p,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> endptr,
  ) {
    return _Py_parse_inf_or_nan(
      p,
      endptr,
    );
  }

  late final _Py_parse_inf_or_nan_ptr =
      _lookup<ffi.NativeFunction<_c_Py_parse_inf_or_nan>>(
          '_Py_parse_inf_or_nan');
  late final _dart_Py_parse_inf_or_nan _Py_parse_inf_or_nan =
      _Py_parse_inf_or_nan_ptr.asFunction<_dart_Py_parse_inf_or_nan>();

  int PyOS_mystrnicmp(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _PyOS_mystrnicmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyOS_mystrnicmp_ptr =
      _lookup<ffi.NativeFunction<_c_PyOS_mystrnicmp>>('PyOS_mystrnicmp');
  late final _dart_PyOS_mystrnicmp _PyOS_mystrnicmp =
      _PyOS_mystrnicmp_ptr.asFunction<_dart_PyOS_mystrnicmp>();

  int PyOS_mystricmp(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _PyOS_mystricmp(
      arg0,
      arg1,
    );
  }

  late final _PyOS_mystricmp_ptr =
      _lookup<ffi.NativeFunction<_c_PyOS_mystricmp>>('PyOS_mystricmp');
  late final _dart_PyOS_mystricmp _PyOS_mystricmp =
      _PyOS_mystricmp_ptr.asFunction<_dart_PyOS_mystricmp>();

  double Py_dg_strtod(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> ptr,
  ) {
    return _Py_dg_strtod(
      str,
      ptr,
    );
  }

  late final _Py_dg_strtod_ptr =
      _lookup<ffi.NativeFunction<_c_Py_dg_strtod>>('_Py_dg_strtod');
  late final _dart_Py_dg_strtod _Py_dg_strtod =
      _Py_dg_strtod_ptr.asFunction<_dart_Py_dg_strtod>();

  ffi.Pointer<ffi.Int8> Py_dg_dtoa(
    double d,
    int mode,
    int ndigits,
    ffi.Pointer<ffi.Int32> decpt,
    ffi.Pointer<ffi.Int32> sign,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> rve,
  ) {
    return _Py_dg_dtoa(
      d,
      mode,
      ndigits,
      decpt,
      sign,
      rve,
    );
  }

  late final _Py_dg_dtoa_ptr =
      _lookup<ffi.NativeFunction<_c_Py_dg_dtoa>>('_Py_dg_dtoa');
  late final _dart_Py_dg_dtoa _Py_dg_dtoa =
      _Py_dg_dtoa_ptr.asFunction<_dart_Py_dg_dtoa>();

  void Py_dg_freedtoa(
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _Py_dg_freedtoa(
      s,
    );
  }

  late final _Py_dg_freedtoa_ptr =
      _lookup<ffi.NativeFunction<_c_Py_dg_freedtoa>>('_Py_dg_freedtoa');
  late final _dart_Py_dg_freedtoa _Py_dg_freedtoa =
      _Py_dg_freedtoa_ptr.asFunction<_dart_Py_dg_freedtoa>();

  double Py_dg_stdnan(
    int sign,
  ) {
    return _Py_dg_stdnan(
      sign,
    );
  }

  late final _Py_dg_stdnan_ptr =
      _lookup<ffi.NativeFunction<_c_Py_dg_stdnan>>('_Py_dg_stdnan');
  late final _dart_Py_dg_stdnan _Py_dg_stdnan =
      _Py_dg_stdnan_ptr.asFunction<_dart_Py_dg_stdnan>();

  double Py_dg_infinity(
    int sign,
  ) {
    return _Py_dg_infinity(
      sign,
    );
  }

  late final _Py_dg_infinity_ptr =
      _lookup<ffi.NativeFunction<_c_Py_dg_infinity>>('_Py_dg_infinity');
  late final _dart_Py_dg_infinity _Py_dg_infinity =
      _Py_dg_infinity_ptr.asFunction<_dart_Py_dg_infinity>();

  ffi.Pointer<ffi.Int32> Py_DecodeLocale(
    ffi.Pointer<ffi.Int8> arg,
    ffi.Pointer<ffi.Uint64> size,
  ) {
    return _Py_DecodeLocale(
      arg,
      size,
    );
  }

  late final _Py_DecodeLocale_ptr =
      _lookup<ffi.NativeFunction<_c_Py_DecodeLocale>>('Py_DecodeLocale');
  late final _dart_Py_DecodeLocale _Py_DecodeLocale =
      _Py_DecodeLocale_ptr.asFunction<_dart_Py_DecodeLocale>();

  ffi.Pointer<ffi.Int8> Py_EncodeLocale(
    ffi.Pointer<ffi.Int32> text,
    ffi.Pointer<ffi.Uint64> error_pos,
  ) {
    return _Py_EncodeLocale(
      text,
      error_pos,
    );
  }

  late final _Py_EncodeLocale_ptr =
      _lookup<ffi.NativeFunction<_c_Py_EncodeLocale>>('Py_EncodeLocale');
  late final _dart_Py_EncodeLocale _Py_EncodeLocale =
      _Py_EncodeLocale_ptr.asFunction<_dart_Py_EncodeLocale>();

  ffi.Pointer<ffi.Int8> Py_EncodeLocaleRaw(
    ffi.Pointer<ffi.Int32> text,
    ffi.Pointer<ffi.Uint64> error_pos,
  ) {
    return _Py_EncodeLocaleRaw(
      text,
      error_pos,
    );
  }

  late final _Py_EncodeLocaleRaw_ptr =
      _lookup<ffi.NativeFunction<_c_Py_EncodeLocaleRaw>>('_Py_EncodeLocaleRaw');
  late final _dart_Py_EncodeLocaleRaw _Py_EncodeLocaleRaw =
      _Py_EncodeLocaleRaw_ptr.asFunction<_dart_Py_EncodeLocaleRaw>();

  int Py_GetErrorHandler(
    ffi.Pointer<ffi.Int8> errors,
  ) {
    return _Py_GetErrorHandler(
      errors,
    );
  }

  late final _Py_GetErrorHandler_ptr =
      _lookup<ffi.NativeFunction<_c_Py_GetErrorHandler>>('_Py_GetErrorHandler');
  late final _dart_Py_GetErrorHandler _Py_GetErrorHandler =
      _Py_GetErrorHandler_ptr.asFunction<_dart_Py_GetErrorHandler>();

  int Py_DecodeLocaleEx(
    ffi.Pointer<ffi.Int8> arg,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> wstr,
    ffi.Pointer<ffi.Uint64> wlen,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> reason,
    int current_locale,
    int errors,
  ) {
    return _Py_DecodeLocaleEx(
      arg,
      wstr,
      wlen,
      reason,
      current_locale,
      errors,
    );
  }

  late final _Py_DecodeLocaleEx_ptr =
      _lookup<ffi.NativeFunction<_c_Py_DecodeLocaleEx>>('_Py_DecodeLocaleEx');
  late final _dart_Py_DecodeLocaleEx _Py_DecodeLocaleEx =
      _Py_DecodeLocaleEx_ptr.asFunction<_dart_Py_DecodeLocaleEx>();

  int Py_EncodeLocaleEx(
    ffi.Pointer<ffi.Int32> text,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> str,
    ffi.Pointer<ffi.Uint64> error_pos,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> reason,
    int current_locale,
    int errors,
  ) {
    return _Py_EncodeLocaleEx(
      text,
      str,
      error_pos,
      reason,
      current_locale,
      errors,
    );
  }

  late final _Py_EncodeLocaleEx_ptr =
      _lookup<ffi.NativeFunction<_c_Py_EncodeLocaleEx>>('_Py_EncodeLocaleEx');
  late final _dart_Py_EncodeLocaleEx _Py_EncodeLocaleEx =
      _Py_EncodeLocaleEx_ptr.asFunction<_dart_Py_EncodeLocaleEx>();

  ffi.Pointer<PyObject> Py_device_encoding(
    int arg0,
  ) {
    return _Py_device_encoding(
      arg0,
    );
  }

  late final _Py_device_encoding_ptr =
      _lookup<ffi.NativeFunction<_c_Py_device_encoding>>('_Py_device_encoding');
  late final _dart_Py_device_encoding _Py_device_encoding =
      _Py_device_encoding_ptr.asFunction<_dart_Py_device_encoding>();

  int Py_fstat(
    int fd,
    ffi.Pointer<stat> status,
  ) {
    return _Py_fstat(
      fd,
      status,
    );
  }

  late final _Py_fstat_ptr =
      _lookup<ffi.NativeFunction<_c_Py_fstat>>('_Py_fstat');
  late final _dart_Py_fstat _Py_fstat =
      _Py_fstat_ptr.asFunction<_dart_Py_fstat>();

  int Py_fstat_noraise(
    int fd,
    ffi.Pointer<stat> status,
  ) {
    return _Py_fstat_noraise(
      fd,
      status,
    );
  }

  late final _Py_fstat_noraise_ptr =
      _lookup<ffi.NativeFunction<_c_Py_fstat_noraise>>('_Py_fstat_noraise');
  late final _dart_Py_fstat_noraise _Py_fstat_noraise =
      _Py_fstat_noraise_ptr.asFunction<_dart_Py_fstat_noraise>();

  int Py_stat(
    ffi.Pointer<PyObject> path,
    ffi.Pointer<stat> status,
  ) {
    return _Py_stat(
      path,
      status,
    );
  }

  late final _Py_stat_ptr = _lookup<ffi.NativeFunction<_c_Py_stat>>('_Py_stat');
  late final _dart_Py_stat _Py_stat = _Py_stat_ptr.asFunction<_dart_Py_stat>();

  int Py_open(
    ffi.Pointer<ffi.Int8> pathname,
    int flags,
  ) {
    return _Py_open(
      pathname,
      flags,
    );
  }

  late final _Py_open_ptr = _lookup<ffi.NativeFunction<_c_Py_open>>('_Py_open');
  late final _dart_Py_open _Py_open = _Py_open_ptr.asFunction<_dart_Py_open>();

  int Py_open_noraise(
    ffi.Pointer<ffi.Int8> pathname,
    int flags,
  ) {
    return _Py_open_noraise(
      pathname,
      flags,
    );
  }

  late final _Py_open_noraise_ptr =
      _lookup<ffi.NativeFunction<_c_Py_open_noraise>>('_Py_open_noraise');
  late final _dart_Py_open_noraise _Py_open_noraise =
      _Py_open_noraise_ptr.asFunction<_dart_Py_open_noraise>();

  ffi.Pointer<FILE> Py_wfopen(
    ffi.Pointer<ffi.Int32> path,
    ffi.Pointer<ffi.Int32> mode,
  ) {
    return _Py_wfopen(
      path,
      mode,
    );
  }

  late final _Py_wfopen_ptr =
      _lookup<ffi.NativeFunction<_c_Py_wfopen>>('_Py_wfopen');
  late final _dart_Py_wfopen _Py_wfopen =
      _Py_wfopen_ptr.asFunction<_dart_Py_wfopen>();

  ffi.Pointer<FILE> Py_fopen(
    ffi.Pointer<ffi.Int8> pathname,
    ffi.Pointer<ffi.Int8> mode,
  ) {
    return _Py_fopen(
      pathname,
      mode,
    );
  }

  late final _Py_fopen_ptr =
      _lookup<ffi.NativeFunction<_c_Py_fopen>>('_Py_fopen');
  late final _dart_Py_fopen _Py_fopen =
      _Py_fopen_ptr.asFunction<_dart_Py_fopen>();

  ffi.Pointer<FILE> Py_fopen_obj(
    ffi.Pointer<PyObject> path,
    ffi.Pointer<ffi.Int8> mode,
  ) {
    return _Py_fopen_obj(
      path,
      mode,
    );
  }

  late final _Py_fopen_obj_ptr =
      _lookup<ffi.NativeFunction<_c_Py_fopen_obj>>('_Py_fopen_obj');
  late final _dart_Py_fopen_obj _Py_fopen_obj =
      _Py_fopen_obj_ptr.asFunction<_dart_Py_fopen_obj>();

  int Py_read(
    int fd,
    ffi.Pointer<ffi.Void> buf,
    int count,
  ) {
    return _Py_read(
      fd,
      buf,
      count,
    );
  }

  late final _Py_read_ptr = _lookup<ffi.NativeFunction<_c_Py_read>>('_Py_read');
  late final _dart_Py_read _Py_read = _Py_read_ptr.asFunction<_dart_Py_read>();

  int Py_write(
    int fd,
    ffi.Pointer<ffi.Void> buf,
    int count,
  ) {
    return _Py_write(
      fd,
      buf,
      count,
    );
  }

  late final _Py_write_ptr =
      _lookup<ffi.NativeFunction<_c_Py_write>>('_Py_write');
  late final _dart_Py_write _Py_write =
      _Py_write_ptr.asFunction<_dart_Py_write>();

  int Py_write_noraise(
    int fd,
    ffi.Pointer<ffi.Void> buf,
    int count,
  ) {
    return _Py_write_noraise(
      fd,
      buf,
      count,
    );
  }

  late final _Py_write_noraise_ptr =
      _lookup<ffi.NativeFunction<_c_Py_write_noraise>>('_Py_write_noraise');
  late final _dart_Py_write_noraise _Py_write_noraise =
      _Py_write_noraise_ptr.asFunction<_dart_Py_write_noraise>();

  int Py_wreadlink(
    ffi.Pointer<ffi.Int32> path,
    ffi.Pointer<ffi.Int32> buf,
    int buflen,
  ) {
    return _Py_wreadlink(
      path,
      buf,
      buflen,
    );
  }

  late final _Py_wreadlink_ptr =
      _lookup<ffi.NativeFunction<_c_Py_wreadlink>>('_Py_wreadlink');
  late final _dart_Py_wreadlink _Py_wreadlink =
      _Py_wreadlink_ptr.asFunction<_dart_Py_wreadlink>();

  ffi.Pointer<ffi.Int32> Py_wrealpath(
    ffi.Pointer<ffi.Int32> path,
    ffi.Pointer<ffi.Int32> resolved_path,
    int resolved_path_len,
  ) {
    return _Py_wrealpath(
      path,
      resolved_path,
      resolved_path_len,
    );
  }

  late final _Py_wrealpath_ptr =
      _lookup<ffi.NativeFunction<_c_Py_wrealpath>>('_Py_wrealpath');
  late final _dart_Py_wrealpath _Py_wrealpath =
      _Py_wrealpath_ptr.asFunction<_dart_Py_wrealpath>();

  ffi.Pointer<ffi.Int32> Py_wgetcwd(
    ffi.Pointer<ffi.Int32> buf,
    int buflen,
  ) {
    return _Py_wgetcwd(
      buf,
      buflen,
    );
  }

  late final _Py_wgetcwd_ptr =
      _lookup<ffi.NativeFunction<_c_Py_wgetcwd>>('_Py_wgetcwd');
  late final _dart_Py_wgetcwd _Py_wgetcwd =
      _Py_wgetcwd_ptr.asFunction<_dart_Py_wgetcwd>();

  int Py_get_inheritable(
    int fd,
  ) {
    return _Py_get_inheritable(
      fd,
    );
  }

  late final _Py_get_inheritable_ptr =
      _lookup<ffi.NativeFunction<_c_Py_get_inheritable>>('_Py_get_inheritable');
  late final _dart_Py_get_inheritable _Py_get_inheritable =
      _Py_get_inheritable_ptr.asFunction<_dart_Py_get_inheritable>();

  int Py_set_inheritable(
    int fd,
    int inheritable,
    ffi.Pointer<ffi.Int32> atomic_flag_works,
  ) {
    return _Py_set_inheritable(
      fd,
      inheritable,
      atomic_flag_works,
    );
  }

  late final _Py_set_inheritable_ptr =
      _lookup<ffi.NativeFunction<_c_Py_set_inheritable>>('_Py_set_inheritable');
  late final _dart_Py_set_inheritable _Py_set_inheritable =
      _Py_set_inheritable_ptr.asFunction<_dart_Py_set_inheritable>();

  int Py_set_inheritable_async_safe(
    int fd,
    int inheritable,
    ffi.Pointer<ffi.Int32> atomic_flag_works,
  ) {
    return _Py_set_inheritable_async_safe(
      fd,
      inheritable,
      atomic_flag_works,
    );
  }

  late final _Py_set_inheritable_async_safe_ptr =
      _lookup<ffi.NativeFunction<_c_Py_set_inheritable_async_safe>>(
          '_Py_set_inheritable_async_safe');
  late final _dart_Py_set_inheritable_async_safe
      _Py_set_inheritable_async_safe = _Py_set_inheritable_async_safe_ptr
          .asFunction<_dart_Py_set_inheritable_async_safe>();

  int Py_dup(
    int fd,
  ) {
    return _Py_dup(
      fd,
    );
  }

  late final _Py_dup_ptr = _lookup<ffi.NativeFunction<_c_Py_dup>>('_Py_dup');
  late final _dart_Py_dup _Py_dup = _Py_dup_ptr.asFunction<_dart_Py_dup>();

  int Py_get_blocking(
    int fd,
  ) {
    return _Py_get_blocking(
      fd,
    );
  }

  late final _Py_get_blocking_ptr =
      _lookup<ffi.NativeFunction<_c_Py_get_blocking>>('_Py_get_blocking');
  late final _dart_Py_get_blocking _Py_get_blocking =
      _Py_get_blocking_ptr.asFunction<_dart_Py_get_blocking>();

  int Py_set_blocking(
    int fd,
    int blocking,
  ) {
    return _Py_set_blocking(
      fd,
      blocking,
    );
  }

  late final _Py_set_blocking_ptr =
      _lookup<ffi.NativeFunction<_c_Py_set_blocking>>('_Py_set_blocking');
  late final _dart_Py_set_blocking _Py_set_blocking =
      _Py_set_blocking_ptr.asFunction<_dart_Py_set_blocking>();

  int PyTraceMalloc_Track(
    int domain,
    int ptr,
    int size,
  ) {
    return _PyTraceMalloc_Track(
      domain,
      ptr,
      size,
    );
  }

  late final _PyTraceMalloc_Track_ptr =
      _lookup<ffi.NativeFunction<_c_PyTraceMalloc_Track>>(
          'PyTraceMalloc_Track');
  late final _dart_PyTraceMalloc_Track _PyTraceMalloc_Track =
      _PyTraceMalloc_Track_ptr.asFunction<_dart_PyTraceMalloc_Track>();

  int PyTraceMalloc_Untrack(
    int domain,
    int ptr,
  ) {
    return _PyTraceMalloc_Untrack(
      domain,
      ptr,
    );
  }

  late final _PyTraceMalloc_Untrack_ptr =
      _lookup<ffi.NativeFunction<_c_PyTraceMalloc_Untrack>>(
          'PyTraceMalloc_Untrack');
  late final _dart_PyTraceMalloc_Untrack _PyTraceMalloc_Untrack =
      _PyTraceMalloc_Untrack_ptr.asFunction<_dart_PyTraceMalloc_Untrack>();

  ffi.Pointer<PyObject> PyTraceMalloc_GetTraceback(
    int domain,
    int ptr,
  ) {
    return _PyTraceMalloc_GetTraceback(
      domain,
      ptr,
    );
  }

  late final _PyTraceMalloc_GetTraceback_ptr =
      _lookup<ffi.NativeFunction<_c_PyTraceMalloc_GetTraceback>>(
          '_PyTraceMalloc_GetTraceback');
  late final _dart_PyTraceMalloc_GetTraceback _PyTraceMalloc_GetTraceback =
      _PyTraceMalloc_GetTraceback_ptr.asFunction<
          _dart_PyTraceMalloc_GetTraceback>();
}

class _PyTraceMalloc_Config extends ffi.Struct {
  @ffi.Int32()
  external int initialized;

  @ffi.Int32()
  external int tracing;

  @ffi.Int32()
  external int max_nframe;

  @ffi.Int32()
  external int use_domain;
}

class PyVarObject extends ffi.Struct {
  external PyObject ob_base;

  @ffi.Int64()
  external int ob_size;
}

class PyAsyncMethods extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<unaryfunc>> am_await;

  external ffi.Pointer<ffi.NativeFunction<unaryfunc>> am_aiter;

  external ffi.Pointer<ffi.NativeFunction<unaryfunc>> am_anext;
}

class PyNumberMethods extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> nb_add;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> nb_subtract;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> nb_multiply;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> nb_remainder;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> nb_divmod;

  external ffi.Pointer<ffi.NativeFunction<ternaryfunc>> nb_power;

  external ffi.Pointer<ffi.NativeFunction<unaryfunc>> nb_negative;

  external ffi.Pointer<ffi.NativeFunction<unaryfunc>> nb_positive;

  external ffi.Pointer<ffi.NativeFunction<unaryfunc>> nb_absolute;

  external ffi.Pointer<ffi.NativeFunction<inquiry>> nb_bool;

  external ffi.Pointer<ffi.NativeFunction<unaryfunc>> nb_invert;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> nb_lshift;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> nb_rshift;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> nb_and;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> nb_xor;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> nb_or;

  external ffi.Pointer<ffi.NativeFunction<unaryfunc>> nb_int;

  external ffi.Pointer<ffi.Void> nb_reserved;

  external ffi.Pointer<ffi.NativeFunction<unaryfunc>> nb_float;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> nb_inplace_add;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> nb_inplace_subtract;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> nb_inplace_multiply;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> nb_inplace_remainder;

  external ffi.Pointer<ffi.NativeFunction<ternaryfunc>> nb_inplace_power;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> nb_inplace_lshift;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> nb_inplace_rshift;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> nb_inplace_and;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> nb_inplace_xor;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> nb_inplace_or;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> nb_floor_divide;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> nb_true_divide;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> nb_inplace_floor_divide;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> nb_inplace_true_divide;

  external ffi.Pointer<ffi.NativeFunction<unaryfunc>> nb_index;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> nb_matrix_multiply;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>>
      nb_inplace_matrix_multiply;
}

class PySequenceMethods extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<lenfunc>> sq_length;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> sq_concat;

  external ffi.Pointer<ffi.NativeFunction<ssizeargfunc>> sq_repeat;

  external ffi.Pointer<ffi.NativeFunction<ssizeargfunc>> sq_item;

  external ffi.Pointer<ffi.Void> was_sq_slice;

  external ffi.Pointer<ffi.NativeFunction<ssizeobjargproc>> sq_ass_item;

  external ffi.Pointer<ffi.Void> was_sq_ass_slice;

  external ffi.Pointer<ffi.NativeFunction<objobjproc>> sq_contains;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> sq_inplace_concat;

  external ffi.Pointer<ffi.NativeFunction<ssizeargfunc>> sq_inplace_repeat;
}

class PyMappingMethods extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<lenfunc>> mp_length;

  external ffi.Pointer<ffi.NativeFunction<binaryfunc>> mp_subscript;

  external ffi.Pointer<ffi.NativeFunction<objobjargproc>> mp_ass_subscript;
}

class Py_buffer extends ffi.Struct {
  external ffi.Pointer<ffi.Void> buf;

  external ffi.Pointer<PyObject> obj;

  @ffi.Int64()
  external int len;

  @ffi.Int64()
  external int itemsize;

  @ffi.Int32()
  external int readonly;

  @ffi.Int32()
  external int ndim;

  external ffi.Pointer<ffi.Int8> format;

  external ffi.Pointer<ffi.Int64> shape;

  external ffi.Pointer<ffi.Int64> strides;

  external ffi.Pointer<ffi.Int64> suboffsets;

  external ffi.Pointer<ffi.Void> internal;
}

class PyBufferProcs extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<getbufferproc>> bf_getbuffer;

  external ffi.Pointer<ffi.NativeFunction<releasebufferproc>> bf_releasebuffer;
}

class PyMethodDef extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> ml_name;

  external ffi.Pointer<ffi.NativeFunction<PyCFunction>> ml_meth;

  @ffi.Int32()
  external int ml_flags;

  external ffi.Pointer<ffi.Int8> ml_doc;
}

class PyMemberDef extends ffi.Opaque {}

class PyGetSetDef extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.NativeFunction<getter>> get_1;

  external ffi.Pointer<ffi.NativeFunction<setter>> set_1;

  external ffi.Pointer<ffi.Int8> doc;

  external ffi.Pointer<ffi.Void> closure;
}

class _IO_marker extends ffi.Struct {
  external ffi.Pointer<_IO_marker> _next;

  external ffi.Pointer<FILE> _sbuf;

  @ffi.Int32()
  external int _pos;
}

class FILE extends ffi.Struct {
  @ffi.Int32()
  external int _flags;

  external ffi.Pointer<ffi.Int8> _IO_read_ptr;

  external ffi.Pointer<ffi.Int8> _IO_read_end;

  external ffi.Pointer<ffi.Int8> _IO_read_base;

  external ffi.Pointer<ffi.Int8> _IO_write_base;

  external ffi.Pointer<ffi.Int8> _IO_write_ptr;

  external ffi.Pointer<ffi.Int8> _IO_write_end;

  external ffi.Pointer<ffi.Int8> _IO_buf_base;

  external ffi.Pointer<ffi.Int8> _IO_buf_end;

  external ffi.Pointer<ffi.Int8> _IO_save_base;

  external ffi.Pointer<ffi.Int8> _IO_backup_base;

  external ffi.Pointer<ffi.Int8> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<FILE> _chain;

  @ffi.Int32()
  external int _fileno;

  @ffi.Int32()
  external int _flags2;

  @ffi.Int64()
  external int _old_offset;

  @ffi.Uint16()
  external int _cur_column;

  @ffi.Int8()
  external int _vtable_offset;

  @ffi.Int8()
  external int _unique__shortbuf_item_0;

  /// Helper for array `_shortbuf`.
  ArrayHelper_FILE__shortbuf_level0 get _shortbuf =>
      ArrayHelper_FILE__shortbuf_level0(this, [1], 0, 0);
  external ffi.Pointer<ffi.Void> _lock;

  @ffi.Int64()
  external int _offset;

  external ffi.Pointer<ffi.Void> __pad1;

  external ffi.Pointer<ffi.Void> __pad2;

  external ffi.Pointer<ffi.Void> __pad3;

  external ffi.Pointer<ffi.Void> __pad4;

  @ffi.Uint64()
  external int __pad5;

  @ffi.Int32()
  external int _mode;

  @ffi.Int8()
  external int _unique__unused2_item_0;
  @ffi.Int8()
  external int _unique__unused2_item_1;
  @ffi.Int8()
  external int _unique__unused2_item_2;
  @ffi.Int8()
  external int _unique__unused2_item_3;
  @ffi.Int8()
  external int _unique__unused2_item_4;
  @ffi.Int8()
  external int _unique__unused2_item_5;
  @ffi.Int8()
  external int _unique__unused2_item_6;
  @ffi.Int8()
  external int _unique__unused2_item_7;
  @ffi.Int8()
  external int _unique__unused2_item_8;
  @ffi.Int8()
  external int _unique__unused2_item_9;
  @ffi.Int8()
  external int _unique__unused2_item_10;
  @ffi.Int8()
  external int _unique__unused2_item_11;
  @ffi.Int8()
  external int _unique__unused2_item_12;
  @ffi.Int8()
  external int _unique__unused2_item_13;
  @ffi.Int8()
  external int _unique__unused2_item_14;
  @ffi.Int8()
  external int _unique__unused2_item_15;
  @ffi.Int8()
  external int _unique__unused2_item_16;
  @ffi.Int8()
  external int _unique__unused2_item_17;
  @ffi.Int8()
  external int _unique__unused2_item_18;
  @ffi.Int8()
  external int _unique__unused2_item_19;

  /// Helper for array `_unused2`.
  ArrayHelper_FILE__unused2_level0 get _unused2 =>
      ArrayHelper_FILE__unused2_level0(this, [20], 0, 0);
}

/// Helper for array `_shortbuf` in struct `FILE`.
class ArrayHelper_FILE__shortbuf_level0 {
  final FILE _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_FILE__shortbuf_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__shortbuf_item_0;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__shortbuf_item_0 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// Helper for array `_unused2` in struct `FILE`.
class ArrayHelper_FILE__unused2_level0 {
  final FILE _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_FILE__unused2_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__unused2_item_0;
      case 1:
        return _struct._unique__unused2_item_1;
      case 2:
        return _struct._unique__unused2_item_2;
      case 3:
        return _struct._unique__unused2_item_3;
      case 4:
        return _struct._unique__unused2_item_4;
      case 5:
        return _struct._unique__unused2_item_5;
      case 6:
        return _struct._unique__unused2_item_6;
      case 7:
        return _struct._unique__unused2_item_7;
      case 8:
        return _struct._unique__unused2_item_8;
      case 9:
        return _struct._unique__unused2_item_9;
      case 10:
        return _struct._unique__unused2_item_10;
      case 11:
        return _struct._unique__unused2_item_11;
      case 12:
        return _struct._unique__unused2_item_12;
      case 13:
        return _struct._unique__unused2_item_13;
      case 14:
        return _struct._unique__unused2_item_14;
      case 15:
        return _struct._unique__unused2_item_15;
      case 16:
        return _struct._unique__unused2_item_16;
      case 17:
        return _struct._unique__unused2_item_17;
      case 18:
        return _struct._unique__unused2_item_18;
      case 19:
        return _struct._unique__unused2_item_19;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__unused2_item_0 = value;
        break;
      case 1:
        _struct._unique__unused2_item_1 = value;
        break;
      case 2:
        _struct._unique__unused2_item_2 = value;
        break;
      case 3:
        _struct._unique__unused2_item_3 = value;
        break;
      case 4:
        _struct._unique__unused2_item_4 = value;
        break;
      case 5:
        _struct._unique__unused2_item_5 = value;
        break;
      case 6:
        _struct._unique__unused2_item_6 = value;
        break;
      case 7:
        _struct._unique__unused2_item_7 = value;
        break;
      case 8:
        _struct._unique__unused2_item_8 = value;
        break;
      case 9:
        _struct._unique__unused2_item_9 = value;
        break;
      case 10:
        _struct._unique__unused2_item_10 = value;
        break;
      case 11:
        _struct._unique__unused2_item_11 = value;
        break;
      case 12:
        _struct._unique__unused2_item_12 = value;
        break;
      case 13:
        _struct._unique__unused2_item_13 = value;
        break;
      case 14:
        _struct._unique__unused2_item_14 = value;
        break;
      case 15:
        _struct._unique__unused2_item_15 = value;
        break;
      case 16:
        _struct._unique__unused2_item_16 = value;
        break;
      case 17:
        _struct._unique__unused2_item_17 = value;
        break;
      case 18:
        _struct._unique__unused2_item_18 = value;
        break;
      case 19:
        _struct._unique__unused2_item_19 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class _typeobject extends ffi.Struct {
  external PyVarObject ob_base;

  external ffi.Pointer<ffi.Int8> tp_name;

  @ffi.Int64()
  external int tp_basicsize;

  @ffi.Int64()
  external int tp_itemsize;

  external ffi.Pointer<ffi.NativeFunction<destructor>> tp_dealloc;

  @ffi.Int64()
  external int tp_vectorcall_offset;

  external ffi.Pointer<ffi.NativeFunction<getattrfunc>> tp_getattr;

  external ffi.Pointer<ffi.NativeFunction<setattrfunc>> tp_setattr;

  external ffi.Pointer<PyAsyncMethods> tp_as_async;

  external ffi.Pointer<ffi.NativeFunction<reprfunc>> tp_repr;

  external ffi.Pointer<PyNumberMethods> tp_as_number;

  external ffi.Pointer<PySequenceMethods> tp_as_sequence;

  external ffi.Pointer<PyMappingMethods> tp_as_mapping;

  external ffi.Pointer<ffi.NativeFunction<hashfunc>> tp_hash;

  external ffi.Pointer<ffi.NativeFunction<ternaryfunc>> tp_call;

  external ffi.Pointer<ffi.NativeFunction<reprfunc>> tp_str;

  external ffi.Pointer<ffi.NativeFunction<getattrofunc>> tp_getattro;

  external ffi.Pointer<ffi.NativeFunction<setattrofunc>> tp_setattro;

  external ffi.Pointer<PyBufferProcs> tp_as_buffer;

  @ffi.Uint64()
  external int tp_flags;

  external ffi.Pointer<ffi.Int8> tp_doc;

  external ffi.Pointer<ffi.NativeFunction<traverseproc>> tp_traverse;

  external ffi.Pointer<ffi.NativeFunction<inquiry>> tp_clear;

  external ffi.Pointer<ffi.NativeFunction<richcmpfunc>> tp_richcompare;

  @ffi.Int64()
  external int tp_weaklistoffset;

  external ffi.Pointer<ffi.NativeFunction<getiterfunc>> tp_iter;

  external ffi.Pointer<ffi.NativeFunction<iternextfunc>> tp_iternext;

  external ffi.Pointer<PyMethodDef> tp_methods;

  external ffi.Pointer<PyMemberDef> tp_members;

  external ffi.Pointer<PyGetSetDef> tp_getset;

  external ffi.Pointer<_typeobject> tp_base;

  external ffi.Pointer<PyObject> tp_dict;

  external ffi.Pointer<ffi.NativeFunction<descrgetfunc>> tp_descr_get;

  external ffi.Pointer<ffi.NativeFunction<descrsetfunc>> tp_descr_set;

  @ffi.Int64()
  external int tp_dictoffset;

  external ffi.Pointer<ffi.NativeFunction<initproc>> tp_init;

  external ffi.Pointer<ffi.NativeFunction<allocfunc>> tp_alloc;

  external ffi.Pointer<ffi.NativeFunction<newfunc>> tp_new;

  external ffi.Pointer<ffi.NativeFunction<freefunc>> tp_free;

  external ffi.Pointer<ffi.NativeFunction<inquiry>> tp_is_gc;

  external ffi.Pointer<PyObject> tp_bases;

  external ffi.Pointer<PyObject> tp_mro;

  external ffi.Pointer<PyObject> tp_cache;

  external ffi.Pointer<PyObject> tp_subclasses;

  external ffi.Pointer<PyObject> tp_weaklist;

  external ffi.Pointer<ffi.NativeFunction<destructor>> tp_del;

  @ffi.Uint32()
  external int tp_version_tag;

  external ffi.Pointer<ffi.NativeFunction<destructor>> tp_finalize;

  external ffi.Pointer<ffi.NativeFunction<vectorcallfunc>> tp_vectorcall;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_1>> tp_print;
}

class PyObject extends ffi.Struct {
  @ffi.Int64()
  external int ob_refcnt;

  external ffi.Pointer<_typeobject> ob_type;
}

class PyType_Slot extends ffi.Struct {
  @ffi.Int32()
  external int slot;

  external ffi.Pointer<ffi.Void> pfunc;
}

class PyType_Spec extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @ffi.Int32()
  external int basicsize;

  @ffi.Int32()
  external int itemsize;

  @ffi.Uint32()
  external int flags;

  external ffi.Pointer<PyType_Slot> slots;
}

abstract class PyTime_round_t {
  static const int PyTime_ROUND_FLOOR = 0;
  static const int PyTime_ROUND_CEILING = 1;
  static const int PyTime_ROUND_HALF_EVEN = 2;
  static const int PyTime_ROUND_UP = 3;
  static const int PyTime_ROUND_TIMEOUT = 3;
}

class timeval extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int64()
  external int tv_usec;
}

class timespec extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int64()
  external int tv_nsec;
}

class _Py_clock_info_t extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> implementation;

  @ffi.Int32()
  external int monotonic;

  @ffi.Int32()
  external int adjustable;

  @ffi.Double()
  external double resolution;
}

class tm extends ffi.Struct {
  @ffi.Int32()
  external int tm_sec;

  @ffi.Int32()
  external int tm_min;

  @ffi.Int32()
  external int tm_hour;

  @ffi.Int32()
  external int tm_mday;

  @ffi.Int32()
  external int tm_mon;

  @ffi.Int32()
  external int tm_year;

  @ffi.Int32()
  external int tm_wday;

  @ffi.Int32()
  external int tm_yday;

  @ffi.Int32()
  external int tm_isdst;

  @ffi.Int64()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Int8> tm_zone;
}

class PyHash_FuncDef extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_2>> hash;

  external ffi.Pointer<ffi.Int8> name;

  @ffi.Int32()
  external int hash_bits;

  @ffi.Int32()
  external int seed_bits;
}

class PyByteArrayObject extends ffi.Struct {
  external PyVarObject ob_base;

  @ffi.Int64()
  external int ob_alloc;

  external ffi.Pointer<ffi.Int8> ob_bytes;

  external ffi.Pointer<ffi.Int8> ob_start;

  @ffi.Int32()
  external int ob_exports;
}

class PyBytesObject extends ffi.Struct {
  external PyVarObject ob_base;

  @ffi.Int64()
  external int ob_shash;

  @ffi.Int8()
  external int _unique_ob_sval_item_0;

  /// Helper for array `ob_sval`.
  ArrayHelper_PyBytesObject_ob_sval_level0 get ob_sval =>
      ArrayHelper_PyBytesObject_ob_sval_level0(this, [1], 0, 0);
}

/// Helper for array `ob_sval` in struct `PyBytesObject`.
class ArrayHelper_PyBytesObject_ob_sval_level0 {
  final PyBytesObject _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_PyBytesObject_ob_sval_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_ob_sval_item_0;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_ob_sval_item_0 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class __va_list_tag extends ffi.Struct {
  @ffi.Uint32()
  external int gp_offset;

  @ffi.Uint32()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

class _PyBytesWriter extends ffi.Struct {
  external ffi.Pointer<PyObject> buffer;

  @ffi.Int64()
  external int allocated;

  @ffi.Int64()
  external int min_size;

  @ffi.Int32()
  external int use_bytearray;

  @ffi.Int32()
  external int overallocate;

  @ffi.Int32()
  external int use_small_buffer;

  @ffi.Int8()
  external int _unique_small_buffer_item_0;
  @ffi.Int8()
  external int _unique_small_buffer_item_1;
  @ffi.Int8()
  external int _unique_small_buffer_item_2;
  @ffi.Int8()
  external int _unique_small_buffer_item_3;
  @ffi.Int8()
  external int _unique_small_buffer_item_4;
  @ffi.Int8()
  external int _unique_small_buffer_item_5;
  @ffi.Int8()
  external int _unique_small_buffer_item_6;
  @ffi.Int8()
  external int _unique_small_buffer_item_7;
  @ffi.Int8()
  external int _unique_small_buffer_item_8;
  @ffi.Int8()
  external int _unique_small_buffer_item_9;
  @ffi.Int8()
  external int _unique_small_buffer_item_10;
  @ffi.Int8()
  external int _unique_small_buffer_item_11;
  @ffi.Int8()
  external int _unique_small_buffer_item_12;
  @ffi.Int8()
  external int _unique_small_buffer_item_13;
  @ffi.Int8()
  external int _unique_small_buffer_item_14;
  @ffi.Int8()
  external int _unique_small_buffer_item_15;
  @ffi.Int8()
  external int _unique_small_buffer_item_16;
  @ffi.Int8()
  external int _unique_small_buffer_item_17;
  @ffi.Int8()
  external int _unique_small_buffer_item_18;
  @ffi.Int8()
  external int _unique_small_buffer_item_19;
  @ffi.Int8()
  external int _unique_small_buffer_item_20;
  @ffi.Int8()
  external int _unique_small_buffer_item_21;
  @ffi.Int8()
  external int _unique_small_buffer_item_22;
  @ffi.Int8()
  external int _unique_small_buffer_item_23;
  @ffi.Int8()
  external int _unique_small_buffer_item_24;
  @ffi.Int8()
  external int _unique_small_buffer_item_25;
  @ffi.Int8()
  external int _unique_small_buffer_item_26;
  @ffi.Int8()
  external int _unique_small_buffer_item_27;
  @ffi.Int8()
  external int _unique_small_buffer_item_28;
  @ffi.Int8()
  external int _unique_small_buffer_item_29;
  @ffi.Int8()
  external int _unique_small_buffer_item_30;
  @ffi.Int8()
  external int _unique_small_buffer_item_31;
  @ffi.Int8()
  external int _unique_small_buffer_item_32;
  @ffi.Int8()
  external int _unique_small_buffer_item_33;
  @ffi.Int8()
  external int _unique_small_buffer_item_34;
  @ffi.Int8()
  external int _unique_small_buffer_item_35;
  @ffi.Int8()
  external int _unique_small_buffer_item_36;
  @ffi.Int8()
  external int _unique_small_buffer_item_37;
  @ffi.Int8()
  external int _unique_small_buffer_item_38;
  @ffi.Int8()
  external int _unique_small_buffer_item_39;
  @ffi.Int8()
  external int _unique_small_buffer_item_40;
  @ffi.Int8()
  external int _unique_small_buffer_item_41;
  @ffi.Int8()
  external int _unique_small_buffer_item_42;
  @ffi.Int8()
  external int _unique_small_buffer_item_43;
  @ffi.Int8()
  external int _unique_small_buffer_item_44;
  @ffi.Int8()
  external int _unique_small_buffer_item_45;
  @ffi.Int8()
  external int _unique_small_buffer_item_46;
  @ffi.Int8()
  external int _unique_small_buffer_item_47;
  @ffi.Int8()
  external int _unique_small_buffer_item_48;
  @ffi.Int8()
  external int _unique_small_buffer_item_49;
  @ffi.Int8()
  external int _unique_small_buffer_item_50;
  @ffi.Int8()
  external int _unique_small_buffer_item_51;
  @ffi.Int8()
  external int _unique_small_buffer_item_52;
  @ffi.Int8()
  external int _unique_small_buffer_item_53;
  @ffi.Int8()
  external int _unique_small_buffer_item_54;
  @ffi.Int8()
  external int _unique_small_buffer_item_55;
  @ffi.Int8()
  external int _unique_small_buffer_item_56;
  @ffi.Int8()
  external int _unique_small_buffer_item_57;
  @ffi.Int8()
  external int _unique_small_buffer_item_58;
  @ffi.Int8()
  external int _unique_small_buffer_item_59;
  @ffi.Int8()
  external int _unique_small_buffer_item_60;
  @ffi.Int8()
  external int _unique_small_buffer_item_61;
  @ffi.Int8()
  external int _unique_small_buffer_item_62;
  @ffi.Int8()
  external int _unique_small_buffer_item_63;
  @ffi.Int8()
  external int _unique_small_buffer_item_64;
  @ffi.Int8()
  external int _unique_small_buffer_item_65;
  @ffi.Int8()
  external int _unique_small_buffer_item_66;
  @ffi.Int8()
  external int _unique_small_buffer_item_67;
  @ffi.Int8()
  external int _unique_small_buffer_item_68;
  @ffi.Int8()
  external int _unique_small_buffer_item_69;
  @ffi.Int8()
  external int _unique_small_buffer_item_70;
  @ffi.Int8()
  external int _unique_small_buffer_item_71;
  @ffi.Int8()
  external int _unique_small_buffer_item_72;
  @ffi.Int8()
  external int _unique_small_buffer_item_73;
  @ffi.Int8()
  external int _unique_small_buffer_item_74;
  @ffi.Int8()
  external int _unique_small_buffer_item_75;
  @ffi.Int8()
  external int _unique_small_buffer_item_76;
  @ffi.Int8()
  external int _unique_small_buffer_item_77;
  @ffi.Int8()
  external int _unique_small_buffer_item_78;
  @ffi.Int8()
  external int _unique_small_buffer_item_79;
  @ffi.Int8()
  external int _unique_small_buffer_item_80;
  @ffi.Int8()
  external int _unique_small_buffer_item_81;
  @ffi.Int8()
  external int _unique_small_buffer_item_82;
  @ffi.Int8()
  external int _unique_small_buffer_item_83;
  @ffi.Int8()
  external int _unique_small_buffer_item_84;
  @ffi.Int8()
  external int _unique_small_buffer_item_85;
  @ffi.Int8()
  external int _unique_small_buffer_item_86;
  @ffi.Int8()
  external int _unique_small_buffer_item_87;
  @ffi.Int8()
  external int _unique_small_buffer_item_88;
  @ffi.Int8()
  external int _unique_small_buffer_item_89;
  @ffi.Int8()
  external int _unique_small_buffer_item_90;
  @ffi.Int8()
  external int _unique_small_buffer_item_91;
  @ffi.Int8()
  external int _unique_small_buffer_item_92;
  @ffi.Int8()
  external int _unique_small_buffer_item_93;
  @ffi.Int8()
  external int _unique_small_buffer_item_94;
  @ffi.Int8()
  external int _unique_small_buffer_item_95;
  @ffi.Int8()
  external int _unique_small_buffer_item_96;
  @ffi.Int8()
  external int _unique_small_buffer_item_97;
  @ffi.Int8()
  external int _unique_small_buffer_item_98;
  @ffi.Int8()
  external int _unique_small_buffer_item_99;
  @ffi.Int8()
  external int _unique_small_buffer_item_100;
  @ffi.Int8()
  external int _unique_small_buffer_item_101;
  @ffi.Int8()
  external int _unique_small_buffer_item_102;
  @ffi.Int8()
  external int _unique_small_buffer_item_103;
  @ffi.Int8()
  external int _unique_small_buffer_item_104;
  @ffi.Int8()
  external int _unique_small_buffer_item_105;
  @ffi.Int8()
  external int _unique_small_buffer_item_106;
  @ffi.Int8()
  external int _unique_small_buffer_item_107;
  @ffi.Int8()
  external int _unique_small_buffer_item_108;
  @ffi.Int8()
  external int _unique_small_buffer_item_109;
  @ffi.Int8()
  external int _unique_small_buffer_item_110;
  @ffi.Int8()
  external int _unique_small_buffer_item_111;
  @ffi.Int8()
  external int _unique_small_buffer_item_112;
  @ffi.Int8()
  external int _unique_small_buffer_item_113;
  @ffi.Int8()
  external int _unique_small_buffer_item_114;
  @ffi.Int8()
  external int _unique_small_buffer_item_115;
  @ffi.Int8()
  external int _unique_small_buffer_item_116;
  @ffi.Int8()
  external int _unique_small_buffer_item_117;
  @ffi.Int8()
  external int _unique_small_buffer_item_118;
  @ffi.Int8()
  external int _unique_small_buffer_item_119;
  @ffi.Int8()
  external int _unique_small_buffer_item_120;
  @ffi.Int8()
  external int _unique_small_buffer_item_121;
  @ffi.Int8()
  external int _unique_small_buffer_item_122;
  @ffi.Int8()
  external int _unique_small_buffer_item_123;
  @ffi.Int8()
  external int _unique_small_buffer_item_124;
  @ffi.Int8()
  external int _unique_small_buffer_item_125;
  @ffi.Int8()
  external int _unique_small_buffer_item_126;
  @ffi.Int8()
  external int _unique_small_buffer_item_127;
  @ffi.Int8()
  external int _unique_small_buffer_item_128;
  @ffi.Int8()
  external int _unique_small_buffer_item_129;
  @ffi.Int8()
  external int _unique_small_buffer_item_130;
  @ffi.Int8()
  external int _unique_small_buffer_item_131;
  @ffi.Int8()
  external int _unique_small_buffer_item_132;
  @ffi.Int8()
  external int _unique_small_buffer_item_133;
  @ffi.Int8()
  external int _unique_small_buffer_item_134;
  @ffi.Int8()
  external int _unique_small_buffer_item_135;
  @ffi.Int8()
  external int _unique_small_buffer_item_136;
  @ffi.Int8()
  external int _unique_small_buffer_item_137;
  @ffi.Int8()
  external int _unique_small_buffer_item_138;
  @ffi.Int8()
  external int _unique_small_buffer_item_139;
  @ffi.Int8()
  external int _unique_small_buffer_item_140;
  @ffi.Int8()
  external int _unique_small_buffer_item_141;
  @ffi.Int8()
  external int _unique_small_buffer_item_142;
  @ffi.Int8()
  external int _unique_small_buffer_item_143;
  @ffi.Int8()
  external int _unique_small_buffer_item_144;
  @ffi.Int8()
  external int _unique_small_buffer_item_145;
  @ffi.Int8()
  external int _unique_small_buffer_item_146;
  @ffi.Int8()
  external int _unique_small_buffer_item_147;
  @ffi.Int8()
  external int _unique_small_buffer_item_148;
  @ffi.Int8()
  external int _unique_small_buffer_item_149;
  @ffi.Int8()
  external int _unique_small_buffer_item_150;
  @ffi.Int8()
  external int _unique_small_buffer_item_151;
  @ffi.Int8()
  external int _unique_small_buffer_item_152;
  @ffi.Int8()
  external int _unique_small_buffer_item_153;
  @ffi.Int8()
  external int _unique_small_buffer_item_154;
  @ffi.Int8()
  external int _unique_small_buffer_item_155;
  @ffi.Int8()
  external int _unique_small_buffer_item_156;
  @ffi.Int8()
  external int _unique_small_buffer_item_157;
  @ffi.Int8()
  external int _unique_small_buffer_item_158;
  @ffi.Int8()
  external int _unique_small_buffer_item_159;
  @ffi.Int8()
  external int _unique_small_buffer_item_160;
  @ffi.Int8()
  external int _unique_small_buffer_item_161;
  @ffi.Int8()
  external int _unique_small_buffer_item_162;
  @ffi.Int8()
  external int _unique_small_buffer_item_163;
  @ffi.Int8()
  external int _unique_small_buffer_item_164;
  @ffi.Int8()
  external int _unique_small_buffer_item_165;
  @ffi.Int8()
  external int _unique_small_buffer_item_166;
  @ffi.Int8()
  external int _unique_small_buffer_item_167;
  @ffi.Int8()
  external int _unique_small_buffer_item_168;
  @ffi.Int8()
  external int _unique_small_buffer_item_169;
  @ffi.Int8()
  external int _unique_small_buffer_item_170;
  @ffi.Int8()
  external int _unique_small_buffer_item_171;
  @ffi.Int8()
  external int _unique_small_buffer_item_172;
  @ffi.Int8()
  external int _unique_small_buffer_item_173;
  @ffi.Int8()
  external int _unique_small_buffer_item_174;
  @ffi.Int8()
  external int _unique_small_buffer_item_175;
  @ffi.Int8()
  external int _unique_small_buffer_item_176;
  @ffi.Int8()
  external int _unique_small_buffer_item_177;
  @ffi.Int8()
  external int _unique_small_buffer_item_178;
  @ffi.Int8()
  external int _unique_small_buffer_item_179;
  @ffi.Int8()
  external int _unique_small_buffer_item_180;
  @ffi.Int8()
  external int _unique_small_buffer_item_181;
  @ffi.Int8()
  external int _unique_small_buffer_item_182;
  @ffi.Int8()
  external int _unique_small_buffer_item_183;
  @ffi.Int8()
  external int _unique_small_buffer_item_184;
  @ffi.Int8()
  external int _unique_small_buffer_item_185;
  @ffi.Int8()
  external int _unique_small_buffer_item_186;
  @ffi.Int8()
  external int _unique_small_buffer_item_187;
  @ffi.Int8()
  external int _unique_small_buffer_item_188;
  @ffi.Int8()
  external int _unique_small_buffer_item_189;
  @ffi.Int8()
  external int _unique_small_buffer_item_190;
  @ffi.Int8()
  external int _unique_small_buffer_item_191;
  @ffi.Int8()
  external int _unique_small_buffer_item_192;
  @ffi.Int8()
  external int _unique_small_buffer_item_193;
  @ffi.Int8()
  external int _unique_small_buffer_item_194;
  @ffi.Int8()
  external int _unique_small_buffer_item_195;
  @ffi.Int8()
  external int _unique_small_buffer_item_196;
  @ffi.Int8()
  external int _unique_small_buffer_item_197;
  @ffi.Int8()
  external int _unique_small_buffer_item_198;
  @ffi.Int8()
  external int _unique_small_buffer_item_199;
  @ffi.Int8()
  external int _unique_small_buffer_item_200;
  @ffi.Int8()
  external int _unique_small_buffer_item_201;
  @ffi.Int8()
  external int _unique_small_buffer_item_202;
  @ffi.Int8()
  external int _unique_small_buffer_item_203;
  @ffi.Int8()
  external int _unique_small_buffer_item_204;
  @ffi.Int8()
  external int _unique_small_buffer_item_205;
  @ffi.Int8()
  external int _unique_small_buffer_item_206;
  @ffi.Int8()
  external int _unique_small_buffer_item_207;
  @ffi.Int8()
  external int _unique_small_buffer_item_208;
  @ffi.Int8()
  external int _unique_small_buffer_item_209;
  @ffi.Int8()
  external int _unique_small_buffer_item_210;
  @ffi.Int8()
  external int _unique_small_buffer_item_211;
  @ffi.Int8()
  external int _unique_small_buffer_item_212;
  @ffi.Int8()
  external int _unique_small_buffer_item_213;
  @ffi.Int8()
  external int _unique_small_buffer_item_214;
  @ffi.Int8()
  external int _unique_small_buffer_item_215;
  @ffi.Int8()
  external int _unique_small_buffer_item_216;
  @ffi.Int8()
  external int _unique_small_buffer_item_217;
  @ffi.Int8()
  external int _unique_small_buffer_item_218;
  @ffi.Int8()
  external int _unique_small_buffer_item_219;
  @ffi.Int8()
  external int _unique_small_buffer_item_220;
  @ffi.Int8()
  external int _unique_small_buffer_item_221;
  @ffi.Int8()
  external int _unique_small_buffer_item_222;
  @ffi.Int8()
  external int _unique_small_buffer_item_223;
  @ffi.Int8()
  external int _unique_small_buffer_item_224;
  @ffi.Int8()
  external int _unique_small_buffer_item_225;
  @ffi.Int8()
  external int _unique_small_buffer_item_226;
  @ffi.Int8()
  external int _unique_small_buffer_item_227;
  @ffi.Int8()
  external int _unique_small_buffer_item_228;
  @ffi.Int8()
  external int _unique_small_buffer_item_229;
  @ffi.Int8()
  external int _unique_small_buffer_item_230;
  @ffi.Int8()
  external int _unique_small_buffer_item_231;
  @ffi.Int8()
  external int _unique_small_buffer_item_232;
  @ffi.Int8()
  external int _unique_small_buffer_item_233;
  @ffi.Int8()
  external int _unique_small_buffer_item_234;
  @ffi.Int8()
  external int _unique_small_buffer_item_235;
  @ffi.Int8()
  external int _unique_small_buffer_item_236;
  @ffi.Int8()
  external int _unique_small_buffer_item_237;
  @ffi.Int8()
  external int _unique_small_buffer_item_238;
  @ffi.Int8()
  external int _unique_small_buffer_item_239;
  @ffi.Int8()
  external int _unique_small_buffer_item_240;
  @ffi.Int8()
  external int _unique_small_buffer_item_241;
  @ffi.Int8()
  external int _unique_small_buffer_item_242;
  @ffi.Int8()
  external int _unique_small_buffer_item_243;
  @ffi.Int8()
  external int _unique_small_buffer_item_244;
  @ffi.Int8()
  external int _unique_small_buffer_item_245;
  @ffi.Int8()
  external int _unique_small_buffer_item_246;
  @ffi.Int8()
  external int _unique_small_buffer_item_247;
  @ffi.Int8()
  external int _unique_small_buffer_item_248;
  @ffi.Int8()
  external int _unique_small_buffer_item_249;
  @ffi.Int8()
  external int _unique_small_buffer_item_250;
  @ffi.Int8()
  external int _unique_small_buffer_item_251;
  @ffi.Int8()
  external int _unique_small_buffer_item_252;
  @ffi.Int8()
  external int _unique_small_buffer_item_253;
  @ffi.Int8()
  external int _unique_small_buffer_item_254;
  @ffi.Int8()
  external int _unique_small_buffer_item_255;
  @ffi.Int8()
  external int _unique_small_buffer_item_256;
  @ffi.Int8()
  external int _unique_small_buffer_item_257;
  @ffi.Int8()
  external int _unique_small_buffer_item_258;
  @ffi.Int8()
  external int _unique_small_buffer_item_259;
  @ffi.Int8()
  external int _unique_small_buffer_item_260;
  @ffi.Int8()
  external int _unique_small_buffer_item_261;
  @ffi.Int8()
  external int _unique_small_buffer_item_262;
  @ffi.Int8()
  external int _unique_small_buffer_item_263;
  @ffi.Int8()
  external int _unique_small_buffer_item_264;
  @ffi.Int8()
  external int _unique_small_buffer_item_265;
  @ffi.Int8()
  external int _unique_small_buffer_item_266;
  @ffi.Int8()
  external int _unique_small_buffer_item_267;
  @ffi.Int8()
  external int _unique_small_buffer_item_268;
  @ffi.Int8()
  external int _unique_small_buffer_item_269;
  @ffi.Int8()
  external int _unique_small_buffer_item_270;
  @ffi.Int8()
  external int _unique_small_buffer_item_271;
  @ffi.Int8()
  external int _unique_small_buffer_item_272;
  @ffi.Int8()
  external int _unique_small_buffer_item_273;
  @ffi.Int8()
  external int _unique_small_buffer_item_274;
  @ffi.Int8()
  external int _unique_small_buffer_item_275;
  @ffi.Int8()
  external int _unique_small_buffer_item_276;
  @ffi.Int8()
  external int _unique_small_buffer_item_277;
  @ffi.Int8()
  external int _unique_small_buffer_item_278;
  @ffi.Int8()
  external int _unique_small_buffer_item_279;
  @ffi.Int8()
  external int _unique_small_buffer_item_280;
  @ffi.Int8()
  external int _unique_small_buffer_item_281;
  @ffi.Int8()
  external int _unique_small_buffer_item_282;
  @ffi.Int8()
  external int _unique_small_buffer_item_283;
  @ffi.Int8()
  external int _unique_small_buffer_item_284;
  @ffi.Int8()
  external int _unique_small_buffer_item_285;
  @ffi.Int8()
  external int _unique_small_buffer_item_286;
  @ffi.Int8()
  external int _unique_small_buffer_item_287;
  @ffi.Int8()
  external int _unique_small_buffer_item_288;
  @ffi.Int8()
  external int _unique_small_buffer_item_289;
  @ffi.Int8()
  external int _unique_small_buffer_item_290;
  @ffi.Int8()
  external int _unique_small_buffer_item_291;
  @ffi.Int8()
  external int _unique_small_buffer_item_292;
  @ffi.Int8()
  external int _unique_small_buffer_item_293;
  @ffi.Int8()
  external int _unique_small_buffer_item_294;
  @ffi.Int8()
  external int _unique_small_buffer_item_295;
  @ffi.Int8()
  external int _unique_small_buffer_item_296;
  @ffi.Int8()
  external int _unique_small_buffer_item_297;
  @ffi.Int8()
  external int _unique_small_buffer_item_298;
  @ffi.Int8()
  external int _unique_small_buffer_item_299;
  @ffi.Int8()
  external int _unique_small_buffer_item_300;
  @ffi.Int8()
  external int _unique_small_buffer_item_301;
  @ffi.Int8()
  external int _unique_small_buffer_item_302;
  @ffi.Int8()
  external int _unique_small_buffer_item_303;
  @ffi.Int8()
  external int _unique_small_buffer_item_304;
  @ffi.Int8()
  external int _unique_small_buffer_item_305;
  @ffi.Int8()
  external int _unique_small_buffer_item_306;
  @ffi.Int8()
  external int _unique_small_buffer_item_307;
  @ffi.Int8()
  external int _unique_small_buffer_item_308;
  @ffi.Int8()
  external int _unique_small_buffer_item_309;
  @ffi.Int8()
  external int _unique_small_buffer_item_310;
  @ffi.Int8()
  external int _unique_small_buffer_item_311;
  @ffi.Int8()
  external int _unique_small_buffer_item_312;
  @ffi.Int8()
  external int _unique_small_buffer_item_313;
  @ffi.Int8()
  external int _unique_small_buffer_item_314;
  @ffi.Int8()
  external int _unique_small_buffer_item_315;
  @ffi.Int8()
  external int _unique_small_buffer_item_316;
  @ffi.Int8()
  external int _unique_small_buffer_item_317;
  @ffi.Int8()
  external int _unique_small_buffer_item_318;
  @ffi.Int8()
  external int _unique_small_buffer_item_319;
  @ffi.Int8()
  external int _unique_small_buffer_item_320;
  @ffi.Int8()
  external int _unique_small_buffer_item_321;
  @ffi.Int8()
  external int _unique_small_buffer_item_322;
  @ffi.Int8()
  external int _unique_small_buffer_item_323;
  @ffi.Int8()
  external int _unique_small_buffer_item_324;
  @ffi.Int8()
  external int _unique_small_buffer_item_325;
  @ffi.Int8()
  external int _unique_small_buffer_item_326;
  @ffi.Int8()
  external int _unique_small_buffer_item_327;
  @ffi.Int8()
  external int _unique_small_buffer_item_328;
  @ffi.Int8()
  external int _unique_small_buffer_item_329;
  @ffi.Int8()
  external int _unique_small_buffer_item_330;
  @ffi.Int8()
  external int _unique_small_buffer_item_331;
  @ffi.Int8()
  external int _unique_small_buffer_item_332;
  @ffi.Int8()
  external int _unique_small_buffer_item_333;
  @ffi.Int8()
  external int _unique_small_buffer_item_334;
  @ffi.Int8()
  external int _unique_small_buffer_item_335;
  @ffi.Int8()
  external int _unique_small_buffer_item_336;
  @ffi.Int8()
  external int _unique_small_buffer_item_337;
  @ffi.Int8()
  external int _unique_small_buffer_item_338;
  @ffi.Int8()
  external int _unique_small_buffer_item_339;
  @ffi.Int8()
  external int _unique_small_buffer_item_340;
  @ffi.Int8()
  external int _unique_small_buffer_item_341;
  @ffi.Int8()
  external int _unique_small_buffer_item_342;
  @ffi.Int8()
  external int _unique_small_buffer_item_343;
  @ffi.Int8()
  external int _unique_small_buffer_item_344;
  @ffi.Int8()
  external int _unique_small_buffer_item_345;
  @ffi.Int8()
  external int _unique_small_buffer_item_346;
  @ffi.Int8()
  external int _unique_small_buffer_item_347;
  @ffi.Int8()
  external int _unique_small_buffer_item_348;
  @ffi.Int8()
  external int _unique_small_buffer_item_349;
  @ffi.Int8()
  external int _unique_small_buffer_item_350;
  @ffi.Int8()
  external int _unique_small_buffer_item_351;
  @ffi.Int8()
  external int _unique_small_buffer_item_352;
  @ffi.Int8()
  external int _unique_small_buffer_item_353;
  @ffi.Int8()
  external int _unique_small_buffer_item_354;
  @ffi.Int8()
  external int _unique_small_buffer_item_355;
  @ffi.Int8()
  external int _unique_small_buffer_item_356;
  @ffi.Int8()
  external int _unique_small_buffer_item_357;
  @ffi.Int8()
  external int _unique_small_buffer_item_358;
  @ffi.Int8()
  external int _unique_small_buffer_item_359;
  @ffi.Int8()
  external int _unique_small_buffer_item_360;
  @ffi.Int8()
  external int _unique_small_buffer_item_361;
  @ffi.Int8()
  external int _unique_small_buffer_item_362;
  @ffi.Int8()
  external int _unique_small_buffer_item_363;
  @ffi.Int8()
  external int _unique_small_buffer_item_364;
  @ffi.Int8()
  external int _unique_small_buffer_item_365;
  @ffi.Int8()
  external int _unique_small_buffer_item_366;
  @ffi.Int8()
  external int _unique_small_buffer_item_367;
  @ffi.Int8()
  external int _unique_small_buffer_item_368;
  @ffi.Int8()
  external int _unique_small_buffer_item_369;
  @ffi.Int8()
  external int _unique_small_buffer_item_370;
  @ffi.Int8()
  external int _unique_small_buffer_item_371;
  @ffi.Int8()
  external int _unique_small_buffer_item_372;
  @ffi.Int8()
  external int _unique_small_buffer_item_373;
  @ffi.Int8()
  external int _unique_small_buffer_item_374;
  @ffi.Int8()
  external int _unique_small_buffer_item_375;
  @ffi.Int8()
  external int _unique_small_buffer_item_376;
  @ffi.Int8()
  external int _unique_small_buffer_item_377;
  @ffi.Int8()
  external int _unique_small_buffer_item_378;
  @ffi.Int8()
  external int _unique_small_buffer_item_379;
  @ffi.Int8()
  external int _unique_small_buffer_item_380;
  @ffi.Int8()
  external int _unique_small_buffer_item_381;
  @ffi.Int8()
  external int _unique_small_buffer_item_382;
  @ffi.Int8()
  external int _unique_small_buffer_item_383;
  @ffi.Int8()
  external int _unique_small_buffer_item_384;
  @ffi.Int8()
  external int _unique_small_buffer_item_385;
  @ffi.Int8()
  external int _unique_small_buffer_item_386;
  @ffi.Int8()
  external int _unique_small_buffer_item_387;
  @ffi.Int8()
  external int _unique_small_buffer_item_388;
  @ffi.Int8()
  external int _unique_small_buffer_item_389;
  @ffi.Int8()
  external int _unique_small_buffer_item_390;
  @ffi.Int8()
  external int _unique_small_buffer_item_391;
  @ffi.Int8()
  external int _unique_small_buffer_item_392;
  @ffi.Int8()
  external int _unique_small_buffer_item_393;
  @ffi.Int8()
  external int _unique_small_buffer_item_394;
  @ffi.Int8()
  external int _unique_small_buffer_item_395;
  @ffi.Int8()
  external int _unique_small_buffer_item_396;
  @ffi.Int8()
  external int _unique_small_buffer_item_397;
  @ffi.Int8()
  external int _unique_small_buffer_item_398;
  @ffi.Int8()
  external int _unique_small_buffer_item_399;
  @ffi.Int8()
  external int _unique_small_buffer_item_400;
  @ffi.Int8()
  external int _unique_small_buffer_item_401;
  @ffi.Int8()
  external int _unique_small_buffer_item_402;
  @ffi.Int8()
  external int _unique_small_buffer_item_403;
  @ffi.Int8()
  external int _unique_small_buffer_item_404;
  @ffi.Int8()
  external int _unique_small_buffer_item_405;
  @ffi.Int8()
  external int _unique_small_buffer_item_406;
  @ffi.Int8()
  external int _unique_small_buffer_item_407;
  @ffi.Int8()
  external int _unique_small_buffer_item_408;
  @ffi.Int8()
  external int _unique_small_buffer_item_409;
  @ffi.Int8()
  external int _unique_small_buffer_item_410;
  @ffi.Int8()
  external int _unique_small_buffer_item_411;
  @ffi.Int8()
  external int _unique_small_buffer_item_412;
  @ffi.Int8()
  external int _unique_small_buffer_item_413;
  @ffi.Int8()
  external int _unique_small_buffer_item_414;
  @ffi.Int8()
  external int _unique_small_buffer_item_415;
  @ffi.Int8()
  external int _unique_small_buffer_item_416;
  @ffi.Int8()
  external int _unique_small_buffer_item_417;
  @ffi.Int8()
  external int _unique_small_buffer_item_418;
  @ffi.Int8()
  external int _unique_small_buffer_item_419;
  @ffi.Int8()
  external int _unique_small_buffer_item_420;
  @ffi.Int8()
  external int _unique_small_buffer_item_421;
  @ffi.Int8()
  external int _unique_small_buffer_item_422;
  @ffi.Int8()
  external int _unique_small_buffer_item_423;
  @ffi.Int8()
  external int _unique_small_buffer_item_424;
  @ffi.Int8()
  external int _unique_small_buffer_item_425;
  @ffi.Int8()
  external int _unique_small_buffer_item_426;
  @ffi.Int8()
  external int _unique_small_buffer_item_427;
  @ffi.Int8()
  external int _unique_small_buffer_item_428;
  @ffi.Int8()
  external int _unique_small_buffer_item_429;
  @ffi.Int8()
  external int _unique_small_buffer_item_430;
  @ffi.Int8()
  external int _unique_small_buffer_item_431;
  @ffi.Int8()
  external int _unique_small_buffer_item_432;
  @ffi.Int8()
  external int _unique_small_buffer_item_433;
  @ffi.Int8()
  external int _unique_small_buffer_item_434;
  @ffi.Int8()
  external int _unique_small_buffer_item_435;
  @ffi.Int8()
  external int _unique_small_buffer_item_436;
  @ffi.Int8()
  external int _unique_small_buffer_item_437;
  @ffi.Int8()
  external int _unique_small_buffer_item_438;
  @ffi.Int8()
  external int _unique_small_buffer_item_439;
  @ffi.Int8()
  external int _unique_small_buffer_item_440;
  @ffi.Int8()
  external int _unique_small_buffer_item_441;
  @ffi.Int8()
  external int _unique_small_buffer_item_442;
  @ffi.Int8()
  external int _unique_small_buffer_item_443;
  @ffi.Int8()
  external int _unique_small_buffer_item_444;
  @ffi.Int8()
  external int _unique_small_buffer_item_445;
  @ffi.Int8()
  external int _unique_small_buffer_item_446;
  @ffi.Int8()
  external int _unique_small_buffer_item_447;
  @ffi.Int8()
  external int _unique_small_buffer_item_448;
  @ffi.Int8()
  external int _unique_small_buffer_item_449;
  @ffi.Int8()
  external int _unique_small_buffer_item_450;
  @ffi.Int8()
  external int _unique_small_buffer_item_451;
  @ffi.Int8()
  external int _unique_small_buffer_item_452;
  @ffi.Int8()
  external int _unique_small_buffer_item_453;
  @ffi.Int8()
  external int _unique_small_buffer_item_454;
  @ffi.Int8()
  external int _unique_small_buffer_item_455;
  @ffi.Int8()
  external int _unique_small_buffer_item_456;
  @ffi.Int8()
  external int _unique_small_buffer_item_457;
  @ffi.Int8()
  external int _unique_small_buffer_item_458;
  @ffi.Int8()
  external int _unique_small_buffer_item_459;
  @ffi.Int8()
  external int _unique_small_buffer_item_460;
  @ffi.Int8()
  external int _unique_small_buffer_item_461;
  @ffi.Int8()
  external int _unique_small_buffer_item_462;
  @ffi.Int8()
  external int _unique_small_buffer_item_463;
  @ffi.Int8()
  external int _unique_small_buffer_item_464;
  @ffi.Int8()
  external int _unique_small_buffer_item_465;
  @ffi.Int8()
  external int _unique_small_buffer_item_466;
  @ffi.Int8()
  external int _unique_small_buffer_item_467;
  @ffi.Int8()
  external int _unique_small_buffer_item_468;
  @ffi.Int8()
  external int _unique_small_buffer_item_469;
  @ffi.Int8()
  external int _unique_small_buffer_item_470;
  @ffi.Int8()
  external int _unique_small_buffer_item_471;
  @ffi.Int8()
  external int _unique_small_buffer_item_472;
  @ffi.Int8()
  external int _unique_small_buffer_item_473;
  @ffi.Int8()
  external int _unique_small_buffer_item_474;
  @ffi.Int8()
  external int _unique_small_buffer_item_475;
  @ffi.Int8()
  external int _unique_small_buffer_item_476;
  @ffi.Int8()
  external int _unique_small_buffer_item_477;
  @ffi.Int8()
  external int _unique_small_buffer_item_478;
  @ffi.Int8()
  external int _unique_small_buffer_item_479;
  @ffi.Int8()
  external int _unique_small_buffer_item_480;
  @ffi.Int8()
  external int _unique_small_buffer_item_481;
  @ffi.Int8()
  external int _unique_small_buffer_item_482;
  @ffi.Int8()
  external int _unique_small_buffer_item_483;
  @ffi.Int8()
  external int _unique_small_buffer_item_484;
  @ffi.Int8()
  external int _unique_small_buffer_item_485;
  @ffi.Int8()
  external int _unique_small_buffer_item_486;
  @ffi.Int8()
  external int _unique_small_buffer_item_487;
  @ffi.Int8()
  external int _unique_small_buffer_item_488;
  @ffi.Int8()
  external int _unique_small_buffer_item_489;
  @ffi.Int8()
  external int _unique_small_buffer_item_490;
  @ffi.Int8()
  external int _unique_small_buffer_item_491;
  @ffi.Int8()
  external int _unique_small_buffer_item_492;
  @ffi.Int8()
  external int _unique_small_buffer_item_493;
  @ffi.Int8()
  external int _unique_small_buffer_item_494;
  @ffi.Int8()
  external int _unique_small_buffer_item_495;
  @ffi.Int8()
  external int _unique_small_buffer_item_496;
  @ffi.Int8()
  external int _unique_small_buffer_item_497;
  @ffi.Int8()
  external int _unique_small_buffer_item_498;
  @ffi.Int8()
  external int _unique_small_buffer_item_499;
  @ffi.Int8()
  external int _unique_small_buffer_item_500;
  @ffi.Int8()
  external int _unique_small_buffer_item_501;
  @ffi.Int8()
  external int _unique_small_buffer_item_502;
  @ffi.Int8()
  external int _unique_small_buffer_item_503;
  @ffi.Int8()
  external int _unique_small_buffer_item_504;
  @ffi.Int8()
  external int _unique_small_buffer_item_505;
  @ffi.Int8()
  external int _unique_small_buffer_item_506;
  @ffi.Int8()
  external int _unique_small_buffer_item_507;
  @ffi.Int8()
  external int _unique_small_buffer_item_508;
  @ffi.Int8()
  external int _unique_small_buffer_item_509;
  @ffi.Int8()
  external int _unique_small_buffer_item_510;
  @ffi.Int8()
  external int _unique_small_buffer_item_511;

  /// Helper for array `small_buffer`.
  ArrayHelper__PyBytesWriter_small_buffer_level0 get small_buffer =>
      ArrayHelper__PyBytesWriter_small_buffer_level0(this, [512], 0, 0);
}

/// Helper for array `small_buffer` in struct `_PyBytesWriter`.
class ArrayHelper__PyBytesWriter_small_buffer_level0 {
  final _PyBytesWriter _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper__PyBytesWriter_small_buffer_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_small_buffer_item_0;
      case 1:
        return _struct._unique_small_buffer_item_1;
      case 2:
        return _struct._unique_small_buffer_item_2;
      case 3:
        return _struct._unique_small_buffer_item_3;
      case 4:
        return _struct._unique_small_buffer_item_4;
      case 5:
        return _struct._unique_small_buffer_item_5;
      case 6:
        return _struct._unique_small_buffer_item_6;
      case 7:
        return _struct._unique_small_buffer_item_7;
      case 8:
        return _struct._unique_small_buffer_item_8;
      case 9:
        return _struct._unique_small_buffer_item_9;
      case 10:
        return _struct._unique_small_buffer_item_10;
      case 11:
        return _struct._unique_small_buffer_item_11;
      case 12:
        return _struct._unique_small_buffer_item_12;
      case 13:
        return _struct._unique_small_buffer_item_13;
      case 14:
        return _struct._unique_small_buffer_item_14;
      case 15:
        return _struct._unique_small_buffer_item_15;
      case 16:
        return _struct._unique_small_buffer_item_16;
      case 17:
        return _struct._unique_small_buffer_item_17;
      case 18:
        return _struct._unique_small_buffer_item_18;
      case 19:
        return _struct._unique_small_buffer_item_19;
      case 20:
        return _struct._unique_small_buffer_item_20;
      case 21:
        return _struct._unique_small_buffer_item_21;
      case 22:
        return _struct._unique_small_buffer_item_22;
      case 23:
        return _struct._unique_small_buffer_item_23;
      case 24:
        return _struct._unique_small_buffer_item_24;
      case 25:
        return _struct._unique_small_buffer_item_25;
      case 26:
        return _struct._unique_small_buffer_item_26;
      case 27:
        return _struct._unique_small_buffer_item_27;
      case 28:
        return _struct._unique_small_buffer_item_28;
      case 29:
        return _struct._unique_small_buffer_item_29;
      case 30:
        return _struct._unique_small_buffer_item_30;
      case 31:
        return _struct._unique_small_buffer_item_31;
      case 32:
        return _struct._unique_small_buffer_item_32;
      case 33:
        return _struct._unique_small_buffer_item_33;
      case 34:
        return _struct._unique_small_buffer_item_34;
      case 35:
        return _struct._unique_small_buffer_item_35;
      case 36:
        return _struct._unique_small_buffer_item_36;
      case 37:
        return _struct._unique_small_buffer_item_37;
      case 38:
        return _struct._unique_small_buffer_item_38;
      case 39:
        return _struct._unique_small_buffer_item_39;
      case 40:
        return _struct._unique_small_buffer_item_40;
      case 41:
        return _struct._unique_small_buffer_item_41;
      case 42:
        return _struct._unique_small_buffer_item_42;
      case 43:
        return _struct._unique_small_buffer_item_43;
      case 44:
        return _struct._unique_small_buffer_item_44;
      case 45:
        return _struct._unique_small_buffer_item_45;
      case 46:
        return _struct._unique_small_buffer_item_46;
      case 47:
        return _struct._unique_small_buffer_item_47;
      case 48:
        return _struct._unique_small_buffer_item_48;
      case 49:
        return _struct._unique_small_buffer_item_49;
      case 50:
        return _struct._unique_small_buffer_item_50;
      case 51:
        return _struct._unique_small_buffer_item_51;
      case 52:
        return _struct._unique_small_buffer_item_52;
      case 53:
        return _struct._unique_small_buffer_item_53;
      case 54:
        return _struct._unique_small_buffer_item_54;
      case 55:
        return _struct._unique_small_buffer_item_55;
      case 56:
        return _struct._unique_small_buffer_item_56;
      case 57:
        return _struct._unique_small_buffer_item_57;
      case 58:
        return _struct._unique_small_buffer_item_58;
      case 59:
        return _struct._unique_small_buffer_item_59;
      case 60:
        return _struct._unique_small_buffer_item_60;
      case 61:
        return _struct._unique_small_buffer_item_61;
      case 62:
        return _struct._unique_small_buffer_item_62;
      case 63:
        return _struct._unique_small_buffer_item_63;
      case 64:
        return _struct._unique_small_buffer_item_64;
      case 65:
        return _struct._unique_small_buffer_item_65;
      case 66:
        return _struct._unique_small_buffer_item_66;
      case 67:
        return _struct._unique_small_buffer_item_67;
      case 68:
        return _struct._unique_small_buffer_item_68;
      case 69:
        return _struct._unique_small_buffer_item_69;
      case 70:
        return _struct._unique_small_buffer_item_70;
      case 71:
        return _struct._unique_small_buffer_item_71;
      case 72:
        return _struct._unique_small_buffer_item_72;
      case 73:
        return _struct._unique_small_buffer_item_73;
      case 74:
        return _struct._unique_small_buffer_item_74;
      case 75:
        return _struct._unique_small_buffer_item_75;
      case 76:
        return _struct._unique_small_buffer_item_76;
      case 77:
        return _struct._unique_small_buffer_item_77;
      case 78:
        return _struct._unique_small_buffer_item_78;
      case 79:
        return _struct._unique_small_buffer_item_79;
      case 80:
        return _struct._unique_small_buffer_item_80;
      case 81:
        return _struct._unique_small_buffer_item_81;
      case 82:
        return _struct._unique_small_buffer_item_82;
      case 83:
        return _struct._unique_small_buffer_item_83;
      case 84:
        return _struct._unique_small_buffer_item_84;
      case 85:
        return _struct._unique_small_buffer_item_85;
      case 86:
        return _struct._unique_small_buffer_item_86;
      case 87:
        return _struct._unique_small_buffer_item_87;
      case 88:
        return _struct._unique_small_buffer_item_88;
      case 89:
        return _struct._unique_small_buffer_item_89;
      case 90:
        return _struct._unique_small_buffer_item_90;
      case 91:
        return _struct._unique_small_buffer_item_91;
      case 92:
        return _struct._unique_small_buffer_item_92;
      case 93:
        return _struct._unique_small_buffer_item_93;
      case 94:
        return _struct._unique_small_buffer_item_94;
      case 95:
        return _struct._unique_small_buffer_item_95;
      case 96:
        return _struct._unique_small_buffer_item_96;
      case 97:
        return _struct._unique_small_buffer_item_97;
      case 98:
        return _struct._unique_small_buffer_item_98;
      case 99:
        return _struct._unique_small_buffer_item_99;
      case 100:
        return _struct._unique_small_buffer_item_100;
      case 101:
        return _struct._unique_small_buffer_item_101;
      case 102:
        return _struct._unique_small_buffer_item_102;
      case 103:
        return _struct._unique_small_buffer_item_103;
      case 104:
        return _struct._unique_small_buffer_item_104;
      case 105:
        return _struct._unique_small_buffer_item_105;
      case 106:
        return _struct._unique_small_buffer_item_106;
      case 107:
        return _struct._unique_small_buffer_item_107;
      case 108:
        return _struct._unique_small_buffer_item_108;
      case 109:
        return _struct._unique_small_buffer_item_109;
      case 110:
        return _struct._unique_small_buffer_item_110;
      case 111:
        return _struct._unique_small_buffer_item_111;
      case 112:
        return _struct._unique_small_buffer_item_112;
      case 113:
        return _struct._unique_small_buffer_item_113;
      case 114:
        return _struct._unique_small_buffer_item_114;
      case 115:
        return _struct._unique_small_buffer_item_115;
      case 116:
        return _struct._unique_small_buffer_item_116;
      case 117:
        return _struct._unique_small_buffer_item_117;
      case 118:
        return _struct._unique_small_buffer_item_118;
      case 119:
        return _struct._unique_small_buffer_item_119;
      case 120:
        return _struct._unique_small_buffer_item_120;
      case 121:
        return _struct._unique_small_buffer_item_121;
      case 122:
        return _struct._unique_small_buffer_item_122;
      case 123:
        return _struct._unique_small_buffer_item_123;
      case 124:
        return _struct._unique_small_buffer_item_124;
      case 125:
        return _struct._unique_small_buffer_item_125;
      case 126:
        return _struct._unique_small_buffer_item_126;
      case 127:
        return _struct._unique_small_buffer_item_127;
      case 128:
        return _struct._unique_small_buffer_item_128;
      case 129:
        return _struct._unique_small_buffer_item_129;
      case 130:
        return _struct._unique_small_buffer_item_130;
      case 131:
        return _struct._unique_small_buffer_item_131;
      case 132:
        return _struct._unique_small_buffer_item_132;
      case 133:
        return _struct._unique_small_buffer_item_133;
      case 134:
        return _struct._unique_small_buffer_item_134;
      case 135:
        return _struct._unique_small_buffer_item_135;
      case 136:
        return _struct._unique_small_buffer_item_136;
      case 137:
        return _struct._unique_small_buffer_item_137;
      case 138:
        return _struct._unique_small_buffer_item_138;
      case 139:
        return _struct._unique_small_buffer_item_139;
      case 140:
        return _struct._unique_small_buffer_item_140;
      case 141:
        return _struct._unique_small_buffer_item_141;
      case 142:
        return _struct._unique_small_buffer_item_142;
      case 143:
        return _struct._unique_small_buffer_item_143;
      case 144:
        return _struct._unique_small_buffer_item_144;
      case 145:
        return _struct._unique_small_buffer_item_145;
      case 146:
        return _struct._unique_small_buffer_item_146;
      case 147:
        return _struct._unique_small_buffer_item_147;
      case 148:
        return _struct._unique_small_buffer_item_148;
      case 149:
        return _struct._unique_small_buffer_item_149;
      case 150:
        return _struct._unique_small_buffer_item_150;
      case 151:
        return _struct._unique_small_buffer_item_151;
      case 152:
        return _struct._unique_small_buffer_item_152;
      case 153:
        return _struct._unique_small_buffer_item_153;
      case 154:
        return _struct._unique_small_buffer_item_154;
      case 155:
        return _struct._unique_small_buffer_item_155;
      case 156:
        return _struct._unique_small_buffer_item_156;
      case 157:
        return _struct._unique_small_buffer_item_157;
      case 158:
        return _struct._unique_small_buffer_item_158;
      case 159:
        return _struct._unique_small_buffer_item_159;
      case 160:
        return _struct._unique_small_buffer_item_160;
      case 161:
        return _struct._unique_small_buffer_item_161;
      case 162:
        return _struct._unique_small_buffer_item_162;
      case 163:
        return _struct._unique_small_buffer_item_163;
      case 164:
        return _struct._unique_small_buffer_item_164;
      case 165:
        return _struct._unique_small_buffer_item_165;
      case 166:
        return _struct._unique_small_buffer_item_166;
      case 167:
        return _struct._unique_small_buffer_item_167;
      case 168:
        return _struct._unique_small_buffer_item_168;
      case 169:
        return _struct._unique_small_buffer_item_169;
      case 170:
        return _struct._unique_small_buffer_item_170;
      case 171:
        return _struct._unique_small_buffer_item_171;
      case 172:
        return _struct._unique_small_buffer_item_172;
      case 173:
        return _struct._unique_small_buffer_item_173;
      case 174:
        return _struct._unique_small_buffer_item_174;
      case 175:
        return _struct._unique_small_buffer_item_175;
      case 176:
        return _struct._unique_small_buffer_item_176;
      case 177:
        return _struct._unique_small_buffer_item_177;
      case 178:
        return _struct._unique_small_buffer_item_178;
      case 179:
        return _struct._unique_small_buffer_item_179;
      case 180:
        return _struct._unique_small_buffer_item_180;
      case 181:
        return _struct._unique_small_buffer_item_181;
      case 182:
        return _struct._unique_small_buffer_item_182;
      case 183:
        return _struct._unique_small_buffer_item_183;
      case 184:
        return _struct._unique_small_buffer_item_184;
      case 185:
        return _struct._unique_small_buffer_item_185;
      case 186:
        return _struct._unique_small_buffer_item_186;
      case 187:
        return _struct._unique_small_buffer_item_187;
      case 188:
        return _struct._unique_small_buffer_item_188;
      case 189:
        return _struct._unique_small_buffer_item_189;
      case 190:
        return _struct._unique_small_buffer_item_190;
      case 191:
        return _struct._unique_small_buffer_item_191;
      case 192:
        return _struct._unique_small_buffer_item_192;
      case 193:
        return _struct._unique_small_buffer_item_193;
      case 194:
        return _struct._unique_small_buffer_item_194;
      case 195:
        return _struct._unique_small_buffer_item_195;
      case 196:
        return _struct._unique_small_buffer_item_196;
      case 197:
        return _struct._unique_small_buffer_item_197;
      case 198:
        return _struct._unique_small_buffer_item_198;
      case 199:
        return _struct._unique_small_buffer_item_199;
      case 200:
        return _struct._unique_small_buffer_item_200;
      case 201:
        return _struct._unique_small_buffer_item_201;
      case 202:
        return _struct._unique_small_buffer_item_202;
      case 203:
        return _struct._unique_small_buffer_item_203;
      case 204:
        return _struct._unique_small_buffer_item_204;
      case 205:
        return _struct._unique_small_buffer_item_205;
      case 206:
        return _struct._unique_small_buffer_item_206;
      case 207:
        return _struct._unique_small_buffer_item_207;
      case 208:
        return _struct._unique_small_buffer_item_208;
      case 209:
        return _struct._unique_small_buffer_item_209;
      case 210:
        return _struct._unique_small_buffer_item_210;
      case 211:
        return _struct._unique_small_buffer_item_211;
      case 212:
        return _struct._unique_small_buffer_item_212;
      case 213:
        return _struct._unique_small_buffer_item_213;
      case 214:
        return _struct._unique_small_buffer_item_214;
      case 215:
        return _struct._unique_small_buffer_item_215;
      case 216:
        return _struct._unique_small_buffer_item_216;
      case 217:
        return _struct._unique_small_buffer_item_217;
      case 218:
        return _struct._unique_small_buffer_item_218;
      case 219:
        return _struct._unique_small_buffer_item_219;
      case 220:
        return _struct._unique_small_buffer_item_220;
      case 221:
        return _struct._unique_small_buffer_item_221;
      case 222:
        return _struct._unique_small_buffer_item_222;
      case 223:
        return _struct._unique_small_buffer_item_223;
      case 224:
        return _struct._unique_small_buffer_item_224;
      case 225:
        return _struct._unique_small_buffer_item_225;
      case 226:
        return _struct._unique_small_buffer_item_226;
      case 227:
        return _struct._unique_small_buffer_item_227;
      case 228:
        return _struct._unique_small_buffer_item_228;
      case 229:
        return _struct._unique_small_buffer_item_229;
      case 230:
        return _struct._unique_small_buffer_item_230;
      case 231:
        return _struct._unique_small_buffer_item_231;
      case 232:
        return _struct._unique_small_buffer_item_232;
      case 233:
        return _struct._unique_small_buffer_item_233;
      case 234:
        return _struct._unique_small_buffer_item_234;
      case 235:
        return _struct._unique_small_buffer_item_235;
      case 236:
        return _struct._unique_small_buffer_item_236;
      case 237:
        return _struct._unique_small_buffer_item_237;
      case 238:
        return _struct._unique_small_buffer_item_238;
      case 239:
        return _struct._unique_small_buffer_item_239;
      case 240:
        return _struct._unique_small_buffer_item_240;
      case 241:
        return _struct._unique_small_buffer_item_241;
      case 242:
        return _struct._unique_small_buffer_item_242;
      case 243:
        return _struct._unique_small_buffer_item_243;
      case 244:
        return _struct._unique_small_buffer_item_244;
      case 245:
        return _struct._unique_small_buffer_item_245;
      case 246:
        return _struct._unique_small_buffer_item_246;
      case 247:
        return _struct._unique_small_buffer_item_247;
      case 248:
        return _struct._unique_small_buffer_item_248;
      case 249:
        return _struct._unique_small_buffer_item_249;
      case 250:
        return _struct._unique_small_buffer_item_250;
      case 251:
        return _struct._unique_small_buffer_item_251;
      case 252:
        return _struct._unique_small_buffer_item_252;
      case 253:
        return _struct._unique_small_buffer_item_253;
      case 254:
        return _struct._unique_small_buffer_item_254;
      case 255:
        return _struct._unique_small_buffer_item_255;
      case 256:
        return _struct._unique_small_buffer_item_256;
      case 257:
        return _struct._unique_small_buffer_item_257;
      case 258:
        return _struct._unique_small_buffer_item_258;
      case 259:
        return _struct._unique_small_buffer_item_259;
      case 260:
        return _struct._unique_small_buffer_item_260;
      case 261:
        return _struct._unique_small_buffer_item_261;
      case 262:
        return _struct._unique_small_buffer_item_262;
      case 263:
        return _struct._unique_small_buffer_item_263;
      case 264:
        return _struct._unique_small_buffer_item_264;
      case 265:
        return _struct._unique_small_buffer_item_265;
      case 266:
        return _struct._unique_small_buffer_item_266;
      case 267:
        return _struct._unique_small_buffer_item_267;
      case 268:
        return _struct._unique_small_buffer_item_268;
      case 269:
        return _struct._unique_small_buffer_item_269;
      case 270:
        return _struct._unique_small_buffer_item_270;
      case 271:
        return _struct._unique_small_buffer_item_271;
      case 272:
        return _struct._unique_small_buffer_item_272;
      case 273:
        return _struct._unique_small_buffer_item_273;
      case 274:
        return _struct._unique_small_buffer_item_274;
      case 275:
        return _struct._unique_small_buffer_item_275;
      case 276:
        return _struct._unique_small_buffer_item_276;
      case 277:
        return _struct._unique_small_buffer_item_277;
      case 278:
        return _struct._unique_small_buffer_item_278;
      case 279:
        return _struct._unique_small_buffer_item_279;
      case 280:
        return _struct._unique_small_buffer_item_280;
      case 281:
        return _struct._unique_small_buffer_item_281;
      case 282:
        return _struct._unique_small_buffer_item_282;
      case 283:
        return _struct._unique_small_buffer_item_283;
      case 284:
        return _struct._unique_small_buffer_item_284;
      case 285:
        return _struct._unique_small_buffer_item_285;
      case 286:
        return _struct._unique_small_buffer_item_286;
      case 287:
        return _struct._unique_small_buffer_item_287;
      case 288:
        return _struct._unique_small_buffer_item_288;
      case 289:
        return _struct._unique_small_buffer_item_289;
      case 290:
        return _struct._unique_small_buffer_item_290;
      case 291:
        return _struct._unique_small_buffer_item_291;
      case 292:
        return _struct._unique_small_buffer_item_292;
      case 293:
        return _struct._unique_small_buffer_item_293;
      case 294:
        return _struct._unique_small_buffer_item_294;
      case 295:
        return _struct._unique_small_buffer_item_295;
      case 296:
        return _struct._unique_small_buffer_item_296;
      case 297:
        return _struct._unique_small_buffer_item_297;
      case 298:
        return _struct._unique_small_buffer_item_298;
      case 299:
        return _struct._unique_small_buffer_item_299;
      case 300:
        return _struct._unique_small_buffer_item_300;
      case 301:
        return _struct._unique_small_buffer_item_301;
      case 302:
        return _struct._unique_small_buffer_item_302;
      case 303:
        return _struct._unique_small_buffer_item_303;
      case 304:
        return _struct._unique_small_buffer_item_304;
      case 305:
        return _struct._unique_small_buffer_item_305;
      case 306:
        return _struct._unique_small_buffer_item_306;
      case 307:
        return _struct._unique_small_buffer_item_307;
      case 308:
        return _struct._unique_small_buffer_item_308;
      case 309:
        return _struct._unique_small_buffer_item_309;
      case 310:
        return _struct._unique_small_buffer_item_310;
      case 311:
        return _struct._unique_small_buffer_item_311;
      case 312:
        return _struct._unique_small_buffer_item_312;
      case 313:
        return _struct._unique_small_buffer_item_313;
      case 314:
        return _struct._unique_small_buffer_item_314;
      case 315:
        return _struct._unique_small_buffer_item_315;
      case 316:
        return _struct._unique_small_buffer_item_316;
      case 317:
        return _struct._unique_small_buffer_item_317;
      case 318:
        return _struct._unique_small_buffer_item_318;
      case 319:
        return _struct._unique_small_buffer_item_319;
      case 320:
        return _struct._unique_small_buffer_item_320;
      case 321:
        return _struct._unique_small_buffer_item_321;
      case 322:
        return _struct._unique_small_buffer_item_322;
      case 323:
        return _struct._unique_small_buffer_item_323;
      case 324:
        return _struct._unique_small_buffer_item_324;
      case 325:
        return _struct._unique_small_buffer_item_325;
      case 326:
        return _struct._unique_small_buffer_item_326;
      case 327:
        return _struct._unique_small_buffer_item_327;
      case 328:
        return _struct._unique_small_buffer_item_328;
      case 329:
        return _struct._unique_small_buffer_item_329;
      case 330:
        return _struct._unique_small_buffer_item_330;
      case 331:
        return _struct._unique_small_buffer_item_331;
      case 332:
        return _struct._unique_small_buffer_item_332;
      case 333:
        return _struct._unique_small_buffer_item_333;
      case 334:
        return _struct._unique_small_buffer_item_334;
      case 335:
        return _struct._unique_small_buffer_item_335;
      case 336:
        return _struct._unique_small_buffer_item_336;
      case 337:
        return _struct._unique_small_buffer_item_337;
      case 338:
        return _struct._unique_small_buffer_item_338;
      case 339:
        return _struct._unique_small_buffer_item_339;
      case 340:
        return _struct._unique_small_buffer_item_340;
      case 341:
        return _struct._unique_small_buffer_item_341;
      case 342:
        return _struct._unique_small_buffer_item_342;
      case 343:
        return _struct._unique_small_buffer_item_343;
      case 344:
        return _struct._unique_small_buffer_item_344;
      case 345:
        return _struct._unique_small_buffer_item_345;
      case 346:
        return _struct._unique_small_buffer_item_346;
      case 347:
        return _struct._unique_small_buffer_item_347;
      case 348:
        return _struct._unique_small_buffer_item_348;
      case 349:
        return _struct._unique_small_buffer_item_349;
      case 350:
        return _struct._unique_small_buffer_item_350;
      case 351:
        return _struct._unique_small_buffer_item_351;
      case 352:
        return _struct._unique_small_buffer_item_352;
      case 353:
        return _struct._unique_small_buffer_item_353;
      case 354:
        return _struct._unique_small_buffer_item_354;
      case 355:
        return _struct._unique_small_buffer_item_355;
      case 356:
        return _struct._unique_small_buffer_item_356;
      case 357:
        return _struct._unique_small_buffer_item_357;
      case 358:
        return _struct._unique_small_buffer_item_358;
      case 359:
        return _struct._unique_small_buffer_item_359;
      case 360:
        return _struct._unique_small_buffer_item_360;
      case 361:
        return _struct._unique_small_buffer_item_361;
      case 362:
        return _struct._unique_small_buffer_item_362;
      case 363:
        return _struct._unique_small_buffer_item_363;
      case 364:
        return _struct._unique_small_buffer_item_364;
      case 365:
        return _struct._unique_small_buffer_item_365;
      case 366:
        return _struct._unique_small_buffer_item_366;
      case 367:
        return _struct._unique_small_buffer_item_367;
      case 368:
        return _struct._unique_small_buffer_item_368;
      case 369:
        return _struct._unique_small_buffer_item_369;
      case 370:
        return _struct._unique_small_buffer_item_370;
      case 371:
        return _struct._unique_small_buffer_item_371;
      case 372:
        return _struct._unique_small_buffer_item_372;
      case 373:
        return _struct._unique_small_buffer_item_373;
      case 374:
        return _struct._unique_small_buffer_item_374;
      case 375:
        return _struct._unique_small_buffer_item_375;
      case 376:
        return _struct._unique_small_buffer_item_376;
      case 377:
        return _struct._unique_small_buffer_item_377;
      case 378:
        return _struct._unique_small_buffer_item_378;
      case 379:
        return _struct._unique_small_buffer_item_379;
      case 380:
        return _struct._unique_small_buffer_item_380;
      case 381:
        return _struct._unique_small_buffer_item_381;
      case 382:
        return _struct._unique_small_buffer_item_382;
      case 383:
        return _struct._unique_small_buffer_item_383;
      case 384:
        return _struct._unique_small_buffer_item_384;
      case 385:
        return _struct._unique_small_buffer_item_385;
      case 386:
        return _struct._unique_small_buffer_item_386;
      case 387:
        return _struct._unique_small_buffer_item_387;
      case 388:
        return _struct._unique_small_buffer_item_388;
      case 389:
        return _struct._unique_small_buffer_item_389;
      case 390:
        return _struct._unique_small_buffer_item_390;
      case 391:
        return _struct._unique_small_buffer_item_391;
      case 392:
        return _struct._unique_small_buffer_item_392;
      case 393:
        return _struct._unique_small_buffer_item_393;
      case 394:
        return _struct._unique_small_buffer_item_394;
      case 395:
        return _struct._unique_small_buffer_item_395;
      case 396:
        return _struct._unique_small_buffer_item_396;
      case 397:
        return _struct._unique_small_buffer_item_397;
      case 398:
        return _struct._unique_small_buffer_item_398;
      case 399:
        return _struct._unique_small_buffer_item_399;
      case 400:
        return _struct._unique_small_buffer_item_400;
      case 401:
        return _struct._unique_small_buffer_item_401;
      case 402:
        return _struct._unique_small_buffer_item_402;
      case 403:
        return _struct._unique_small_buffer_item_403;
      case 404:
        return _struct._unique_small_buffer_item_404;
      case 405:
        return _struct._unique_small_buffer_item_405;
      case 406:
        return _struct._unique_small_buffer_item_406;
      case 407:
        return _struct._unique_small_buffer_item_407;
      case 408:
        return _struct._unique_small_buffer_item_408;
      case 409:
        return _struct._unique_small_buffer_item_409;
      case 410:
        return _struct._unique_small_buffer_item_410;
      case 411:
        return _struct._unique_small_buffer_item_411;
      case 412:
        return _struct._unique_small_buffer_item_412;
      case 413:
        return _struct._unique_small_buffer_item_413;
      case 414:
        return _struct._unique_small_buffer_item_414;
      case 415:
        return _struct._unique_small_buffer_item_415;
      case 416:
        return _struct._unique_small_buffer_item_416;
      case 417:
        return _struct._unique_small_buffer_item_417;
      case 418:
        return _struct._unique_small_buffer_item_418;
      case 419:
        return _struct._unique_small_buffer_item_419;
      case 420:
        return _struct._unique_small_buffer_item_420;
      case 421:
        return _struct._unique_small_buffer_item_421;
      case 422:
        return _struct._unique_small_buffer_item_422;
      case 423:
        return _struct._unique_small_buffer_item_423;
      case 424:
        return _struct._unique_small_buffer_item_424;
      case 425:
        return _struct._unique_small_buffer_item_425;
      case 426:
        return _struct._unique_small_buffer_item_426;
      case 427:
        return _struct._unique_small_buffer_item_427;
      case 428:
        return _struct._unique_small_buffer_item_428;
      case 429:
        return _struct._unique_small_buffer_item_429;
      case 430:
        return _struct._unique_small_buffer_item_430;
      case 431:
        return _struct._unique_small_buffer_item_431;
      case 432:
        return _struct._unique_small_buffer_item_432;
      case 433:
        return _struct._unique_small_buffer_item_433;
      case 434:
        return _struct._unique_small_buffer_item_434;
      case 435:
        return _struct._unique_small_buffer_item_435;
      case 436:
        return _struct._unique_small_buffer_item_436;
      case 437:
        return _struct._unique_small_buffer_item_437;
      case 438:
        return _struct._unique_small_buffer_item_438;
      case 439:
        return _struct._unique_small_buffer_item_439;
      case 440:
        return _struct._unique_small_buffer_item_440;
      case 441:
        return _struct._unique_small_buffer_item_441;
      case 442:
        return _struct._unique_small_buffer_item_442;
      case 443:
        return _struct._unique_small_buffer_item_443;
      case 444:
        return _struct._unique_small_buffer_item_444;
      case 445:
        return _struct._unique_small_buffer_item_445;
      case 446:
        return _struct._unique_small_buffer_item_446;
      case 447:
        return _struct._unique_small_buffer_item_447;
      case 448:
        return _struct._unique_small_buffer_item_448;
      case 449:
        return _struct._unique_small_buffer_item_449;
      case 450:
        return _struct._unique_small_buffer_item_450;
      case 451:
        return _struct._unique_small_buffer_item_451;
      case 452:
        return _struct._unique_small_buffer_item_452;
      case 453:
        return _struct._unique_small_buffer_item_453;
      case 454:
        return _struct._unique_small_buffer_item_454;
      case 455:
        return _struct._unique_small_buffer_item_455;
      case 456:
        return _struct._unique_small_buffer_item_456;
      case 457:
        return _struct._unique_small_buffer_item_457;
      case 458:
        return _struct._unique_small_buffer_item_458;
      case 459:
        return _struct._unique_small_buffer_item_459;
      case 460:
        return _struct._unique_small_buffer_item_460;
      case 461:
        return _struct._unique_small_buffer_item_461;
      case 462:
        return _struct._unique_small_buffer_item_462;
      case 463:
        return _struct._unique_small_buffer_item_463;
      case 464:
        return _struct._unique_small_buffer_item_464;
      case 465:
        return _struct._unique_small_buffer_item_465;
      case 466:
        return _struct._unique_small_buffer_item_466;
      case 467:
        return _struct._unique_small_buffer_item_467;
      case 468:
        return _struct._unique_small_buffer_item_468;
      case 469:
        return _struct._unique_small_buffer_item_469;
      case 470:
        return _struct._unique_small_buffer_item_470;
      case 471:
        return _struct._unique_small_buffer_item_471;
      case 472:
        return _struct._unique_small_buffer_item_472;
      case 473:
        return _struct._unique_small_buffer_item_473;
      case 474:
        return _struct._unique_small_buffer_item_474;
      case 475:
        return _struct._unique_small_buffer_item_475;
      case 476:
        return _struct._unique_small_buffer_item_476;
      case 477:
        return _struct._unique_small_buffer_item_477;
      case 478:
        return _struct._unique_small_buffer_item_478;
      case 479:
        return _struct._unique_small_buffer_item_479;
      case 480:
        return _struct._unique_small_buffer_item_480;
      case 481:
        return _struct._unique_small_buffer_item_481;
      case 482:
        return _struct._unique_small_buffer_item_482;
      case 483:
        return _struct._unique_small_buffer_item_483;
      case 484:
        return _struct._unique_small_buffer_item_484;
      case 485:
        return _struct._unique_small_buffer_item_485;
      case 486:
        return _struct._unique_small_buffer_item_486;
      case 487:
        return _struct._unique_small_buffer_item_487;
      case 488:
        return _struct._unique_small_buffer_item_488;
      case 489:
        return _struct._unique_small_buffer_item_489;
      case 490:
        return _struct._unique_small_buffer_item_490;
      case 491:
        return _struct._unique_small_buffer_item_491;
      case 492:
        return _struct._unique_small_buffer_item_492;
      case 493:
        return _struct._unique_small_buffer_item_493;
      case 494:
        return _struct._unique_small_buffer_item_494;
      case 495:
        return _struct._unique_small_buffer_item_495;
      case 496:
        return _struct._unique_small_buffer_item_496;
      case 497:
        return _struct._unique_small_buffer_item_497;
      case 498:
        return _struct._unique_small_buffer_item_498;
      case 499:
        return _struct._unique_small_buffer_item_499;
      case 500:
        return _struct._unique_small_buffer_item_500;
      case 501:
        return _struct._unique_small_buffer_item_501;
      case 502:
        return _struct._unique_small_buffer_item_502;
      case 503:
        return _struct._unique_small_buffer_item_503;
      case 504:
        return _struct._unique_small_buffer_item_504;
      case 505:
        return _struct._unique_small_buffer_item_505;
      case 506:
        return _struct._unique_small_buffer_item_506;
      case 507:
        return _struct._unique_small_buffer_item_507;
      case 508:
        return _struct._unique_small_buffer_item_508;
      case 509:
        return _struct._unique_small_buffer_item_509;
      case 510:
        return _struct._unique_small_buffer_item_510;
      case 511:
        return _struct._unique_small_buffer_item_511;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_small_buffer_item_0 = value;
        break;
      case 1:
        _struct._unique_small_buffer_item_1 = value;
        break;
      case 2:
        _struct._unique_small_buffer_item_2 = value;
        break;
      case 3:
        _struct._unique_small_buffer_item_3 = value;
        break;
      case 4:
        _struct._unique_small_buffer_item_4 = value;
        break;
      case 5:
        _struct._unique_small_buffer_item_5 = value;
        break;
      case 6:
        _struct._unique_small_buffer_item_6 = value;
        break;
      case 7:
        _struct._unique_small_buffer_item_7 = value;
        break;
      case 8:
        _struct._unique_small_buffer_item_8 = value;
        break;
      case 9:
        _struct._unique_small_buffer_item_9 = value;
        break;
      case 10:
        _struct._unique_small_buffer_item_10 = value;
        break;
      case 11:
        _struct._unique_small_buffer_item_11 = value;
        break;
      case 12:
        _struct._unique_small_buffer_item_12 = value;
        break;
      case 13:
        _struct._unique_small_buffer_item_13 = value;
        break;
      case 14:
        _struct._unique_small_buffer_item_14 = value;
        break;
      case 15:
        _struct._unique_small_buffer_item_15 = value;
        break;
      case 16:
        _struct._unique_small_buffer_item_16 = value;
        break;
      case 17:
        _struct._unique_small_buffer_item_17 = value;
        break;
      case 18:
        _struct._unique_small_buffer_item_18 = value;
        break;
      case 19:
        _struct._unique_small_buffer_item_19 = value;
        break;
      case 20:
        _struct._unique_small_buffer_item_20 = value;
        break;
      case 21:
        _struct._unique_small_buffer_item_21 = value;
        break;
      case 22:
        _struct._unique_small_buffer_item_22 = value;
        break;
      case 23:
        _struct._unique_small_buffer_item_23 = value;
        break;
      case 24:
        _struct._unique_small_buffer_item_24 = value;
        break;
      case 25:
        _struct._unique_small_buffer_item_25 = value;
        break;
      case 26:
        _struct._unique_small_buffer_item_26 = value;
        break;
      case 27:
        _struct._unique_small_buffer_item_27 = value;
        break;
      case 28:
        _struct._unique_small_buffer_item_28 = value;
        break;
      case 29:
        _struct._unique_small_buffer_item_29 = value;
        break;
      case 30:
        _struct._unique_small_buffer_item_30 = value;
        break;
      case 31:
        _struct._unique_small_buffer_item_31 = value;
        break;
      case 32:
        _struct._unique_small_buffer_item_32 = value;
        break;
      case 33:
        _struct._unique_small_buffer_item_33 = value;
        break;
      case 34:
        _struct._unique_small_buffer_item_34 = value;
        break;
      case 35:
        _struct._unique_small_buffer_item_35 = value;
        break;
      case 36:
        _struct._unique_small_buffer_item_36 = value;
        break;
      case 37:
        _struct._unique_small_buffer_item_37 = value;
        break;
      case 38:
        _struct._unique_small_buffer_item_38 = value;
        break;
      case 39:
        _struct._unique_small_buffer_item_39 = value;
        break;
      case 40:
        _struct._unique_small_buffer_item_40 = value;
        break;
      case 41:
        _struct._unique_small_buffer_item_41 = value;
        break;
      case 42:
        _struct._unique_small_buffer_item_42 = value;
        break;
      case 43:
        _struct._unique_small_buffer_item_43 = value;
        break;
      case 44:
        _struct._unique_small_buffer_item_44 = value;
        break;
      case 45:
        _struct._unique_small_buffer_item_45 = value;
        break;
      case 46:
        _struct._unique_small_buffer_item_46 = value;
        break;
      case 47:
        _struct._unique_small_buffer_item_47 = value;
        break;
      case 48:
        _struct._unique_small_buffer_item_48 = value;
        break;
      case 49:
        _struct._unique_small_buffer_item_49 = value;
        break;
      case 50:
        _struct._unique_small_buffer_item_50 = value;
        break;
      case 51:
        _struct._unique_small_buffer_item_51 = value;
        break;
      case 52:
        _struct._unique_small_buffer_item_52 = value;
        break;
      case 53:
        _struct._unique_small_buffer_item_53 = value;
        break;
      case 54:
        _struct._unique_small_buffer_item_54 = value;
        break;
      case 55:
        _struct._unique_small_buffer_item_55 = value;
        break;
      case 56:
        _struct._unique_small_buffer_item_56 = value;
        break;
      case 57:
        _struct._unique_small_buffer_item_57 = value;
        break;
      case 58:
        _struct._unique_small_buffer_item_58 = value;
        break;
      case 59:
        _struct._unique_small_buffer_item_59 = value;
        break;
      case 60:
        _struct._unique_small_buffer_item_60 = value;
        break;
      case 61:
        _struct._unique_small_buffer_item_61 = value;
        break;
      case 62:
        _struct._unique_small_buffer_item_62 = value;
        break;
      case 63:
        _struct._unique_small_buffer_item_63 = value;
        break;
      case 64:
        _struct._unique_small_buffer_item_64 = value;
        break;
      case 65:
        _struct._unique_small_buffer_item_65 = value;
        break;
      case 66:
        _struct._unique_small_buffer_item_66 = value;
        break;
      case 67:
        _struct._unique_small_buffer_item_67 = value;
        break;
      case 68:
        _struct._unique_small_buffer_item_68 = value;
        break;
      case 69:
        _struct._unique_small_buffer_item_69 = value;
        break;
      case 70:
        _struct._unique_small_buffer_item_70 = value;
        break;
      case 71:
        _struct._unique_small_buffer_item_71 = value;
        break;
      case 72:
        _struct._unique_small_buffer_item_72 = value;
        break;
      case 73:
        _struct._unique_small_buffer_item_73 = value;
        break;
      case 74:
        _struct._unique_small_buffer_item_74 = value;
        break;
      case 75:
        _struct._unique_small_buffer_item_75 = value;
        break;
      case 76:
        _struct._unique_small_buffer_item_76 = value;
        break;
      case 77:
        _struct._unique_small_buffer_item_77 = value;
        break;
      case 78:
        _struct._unique_small_buffer_item_78 = value;
        break;
      case 79:
        _struct._unique_small_buffer_item_79 = value;
        break;
      case 80:
        _struct._unique_small_buffer_item_80 = value;
        break;
      case 81:
        _struct._unique_small_buffer_item_81 = value;
        break;
      case 82:
        _struct._unique_small_buffer_item_82 = value;
        break;
      case 83:
        _struct._unique_small_buffer_item_83 = value;
        break;
      case 84:
        _struct._unique_small_buffer_item_84 = value;
        break;
      case 85:
        _struct._unique_small_buffer_item_85 = value;
        break;
      case 86:
        _struct._unique_small_buffer_item_86 = value;
        break;
      case 87:
        _struct._unique_small_buffer_item_87 = value;
        break;
      case 88:
        _struct._unique_small_buffer_item_88 = value;
        break;
      case 89:
        _struct._unique_small_buffer_item_89 = value;
        break;
      case 90:
        _struct._unique_small_buffer_item_90 = value;
        break;
      case 91:
        _struct._unique_small_buffer_item_91 = value;
        break;
      case 92:
        _struct._unique_small_buffer_item_92 = value;
        break;
      case 93:
        _struct._unique_small_buffer_item_93 = value;
        break;
      case 94:
        _struct._unique_small_buffer_item_94 = value;
        break;
      case 95:
        _struct._unique_small_buffer_item_95 = value;
        break;
      case 96:
        _struct._unique_small_buffer_item_96 = value;
        break;
      case 97:
        _struct._unique_small_buffer_item_97 = value;
        break;
      case 98:
        _struct._unique_small_buffer_item_98 = value;
        break;
      case 99:
        _struct._unique_small_buffer_item_99 = value;
        break;
      case 100:
        _struct._unique_small_buffer_item_100 = value;
        break;
      case 101:
        _struct._unique_small_buffer_item_101 = value;
        break;
      case 102:
        _struct._unique_small_buffer_item_102 = value;
        break;
      case 103:
        _struct._unique_small_buffer_item_103 = value;
        break;
      case 104:
        _struct._unique_small_buffer_item_104 = value;
        break;
      case 105:
        _struct._unique_small_buffer_item_105 = value;
        break;
      case 106:
        _struct._unique_small_buffer_item_106 = value;
        break;
      case 107:
        _struct._unique_small_buffer_item_107 = value;
        break;
      case 108:
        _struct._unique_small_buffer_item_108 = value;
        break;
      case 109:
        _struct._unique_small_buffer_item_109 = value;
        break;
      case 110:
        _struct._unique_small_buffer_item_110 = value;
        break;
      case 111:
        _struct._unique_small_buffer_item_111 = value;
        break;
      case 112:
        _struct._unique_small_buffer_item_112 = value;
        break;
      case 113:
        _struct._unique_small_buffer_item_113 = value;
        break;
      case 114:
        _struct._unique_small_buffer_item_114 = value;
        break;
      case 115:
        _struct._unique_small_buffer_item_115 = value;
        break;
      case 116:
        _struct._unique_small_buffer_item_116 = value;
        break;
      case 117:
        _struct._unique_small_buffer_item_117 = value;
        break;
      case 118:
        _struct._unique_small_buffer_item_118 = value;
        break;
      case 119:
        _struct._unique_small_buffer_item_119 = value;
        break;
      case 120:
        _struct._unique_small_buffer_item_120 = value;
        break;
      case 121:
        _struct._unique_small_buffer_item_121 = value;
        break;
      case 122:
        _struct._unique_small_buffer_item_122 = value;
        break;
      case 123:
        _struct._unique_small_buffer_item_123 = value;
        break;
      case 124:
        _struct._unique_small_buffer_item_124 = value;
        break;
      case 125:
        _struct._unique_small_buffer_item_125 = value;
        break;
      case 126:
        _struct._unique_small_buffer_item_126 = value;
        break;
      case 127:
        _struct._unique_small_buffer_item_127 = value;
        break;
      case 128:
        _struct._unique_small_buffer_item_128 = value;
        break;
      case 129:
        _struct._unique_small_buffer_item_129 = value;
        break;
      case 130:
        _struct._unique_small_buffer_item_130 = value;
        break;
      case 131:
        _struct._unique_small_buffer_item_131 = value;
        break;
      case 132:
        _struct._unique_small_buffer_item_132 = value;
        break;
      case 133:
        _struct._unique_small_buffer_item_133 = value;
        break;
      case 134:
        _struct._unique_small_buffer_item_134 = value;
        break;
      case 135:
        _struct._unique_small_buffer_item_135 = value;
        break;
      case 136:
        _struct._unique_small_buffer_item_136 = value;
        break;
      case 137:
        _struct._unique_small_buffer_item_137 = value;
        break;
      case 138:
        _struct._unique_small_buffer_item_138 = value;
        break;
      case 139:
        _struct._unique_small_buffer_item_139 = value;
        break;
      case 140:
        _struct._unique_small_buffer_item_140 = value;
        break;
      case 141:
        _struct._unique_small_buffer_item_141 = value;
        break;
      case 142:
        _struct._unique_small_buffer_item_142 = value;
        break;
      case 143:
        _struct._unique_small_buffer_item_143 = value;
        break;
      case 144:
        _struct._unique_small_buffer_item_144 = value;
        break;
      case 145:
        _struct._unique_small_buffer_item_145 = value;
        break;
      case 146:
        _struct._unique_small_buffer_item_146 = value;
        break;
      case 147:
        _struct._unique_small_buffer_item_147 = value;
        break;
      case 148:
        _struct._unique_small_buffer_item_148 = value;
        break;
      case 149:
        _struct._unique_small_buffer_item_149 = value;
        break;
      case 150:
        _struct._unique_small_buffer_item_150 = value;
        break;
      case 151:
        _struct._unique_small_buffer_item_151 = value;
        break;
      case 152:
        _struct._unique_small_buffer_item_152 = value;
        break;
      case 153:
        _struct._unique_small_buffer_item_153 = value;
        break;
      case 154:
        _struct._unique_small_buffer_item_154 = value;
        break;
      case 155:
        _struct._unique_small_buffer_item_155 = value;
        break;
      case 156:
        _struct._unique_small_buffer_item_156 = value;
        break;
      case 157:
        _struct._unique_small_buffer_item_157 = value;
        break;
      case 158:
        _struct._unique_small_buffer_item_158 = value;
        break;
      case 159:
        _struct._unique_small_buffer_item_159 = value;
        break;
      case 160:
        _struct._unique_small_buffer_item_160 = value;
        break;
      case 161:
        _struct._unique_small_buffer_item_161 = value;
        break;
      case 162:
        _struct._unique_small_buffer_item_162 = value;
        break;
      case 163:
        _struct._unique_small_buffer_item_163 = value;
        break;
      case 164:
        _struct._unique_small_buffer_item_164 = value;
        break;
      case 165:
        _struct._unique_small_buffer_item_165 = value;
        break;
      case 166:
        _struct._unique_small_buffer_item_166 = value;
        break;
      case 167:
        _struct._unique_small_buffer_item_167 = value;
        break;
      case 168:
        _struct._unique_small_buffer_item_168 = value;
        break;
      case 169:
        _struct._unique_small_buffer_item_169 = value;
        break;
      case 170:
        _struct._unique_small_buffer_item_170 = value;
        break;
      case 171:
        _struct._unique_small_buffer_item_171 = value;
        break;
      case 172:
        _struct._unique_small_buffer_item_172 = value;
        break;
      case 173:
        _struct._unique_small_buffer_item_173 = value;
        break;
      case 174:
        _struct._unique_small_buffer_item_174 = value;
        break;
      case 175:
        _struct._unique_small_buffer_item_175 = value;
        break;
      case 176:
        _struct._unique_small_buffer_item_176 = value;
        break;
      case 177:
        _struct._unique_small_buffer_item_177 = value;
        break;
      case 178:
        _struct._unique_small_buffer_item_178 = value;
        break;
      case 179:
        _struct._unique_small_buffer_item_179 = value;
        break;
      case 180:
        _struct._unique_small_buffer_item_180 = value;
        break;
      case 181:
        _struct._unique_small_buffer_item_181 = value;
        break;
      case 182:
        _struct._unique_small_buffer_item_182 = value;
        break;
      case 183:
        _struct._unique_small_buffer_item_183 = value;
        break;
      case 184:
        _struct._unique_small_buffer_item_184 = value;
        break;
      case 185:
        _struct._unique_small_buffer_item_185 = value;
        break;
      case 186:
        _struct._unique_small_buffer_item_186 = value;
        break;
      case 187:
        _struct._unique_small_buffer_item_187 = value;
        break;
      case 188:
        _struct._unique_small_buffer_item_188 = value;
        break;
      case 189:
        _struct._unique_small_buffer_item_189 = value;
        break;
      case 190:
        _struct._unique_small_buffer_item_190 = value;
        break;
      case 191:
        _struct._unique_small_buffer_item_191 = value;
        break;
      case 192:
        _struct._unique_small_buffer_item_192 = value;
        break;
      case 193:
        _struct._unique_small_buffer_item_193 = value;
        break;
      case 194:
        _struct._unique_small_buffer_item_194 = value;
        break;
      case 195:
        _struct._unique_small_buffer_item_195 = value;
        break;
      case 196:
        _struct._unique_small_buffer_item_196 = value;
        break;
      case 197:
        _struct._unique_small_buffer_item_197 = value;
        break;
      case 198:
        _struct._unique_small_buffer_item_198 = value;
        break;
      case 199:
        _struct._unique_small_buffer_item_199 = value;
        break;
      case 200:
        _struct._unique_small_buffer_item_200 = value;
        break;
      case 201:
        _struct._unique_small_buffer_item_201 = value;
        break;
      case 202:
        _struct._unique_small_buffer_item_202 = value;
        break;
      case 203:
        _struct._unique_small_buffer_item_203 = value;
        break;
      case 204:
        _struct._unique_small_buffer_item_204 = value;
        break;
      case 205:
        _struct._unique_small_buffer_item_205 = value;
        break;
      case 206:
        _struct._unique_small_buffer_item_206 = value;
        break;
      case 207:
        _struct._unique_small_buffer_item_207 = value;
        break;
      case 208:
        _struct._unique_small_buffer_item_208 = value;
        break;
      case 209:
        _struct._unique_small_buffer_item_209 = value;
        break;
      case 210:
        _struct._unique_small_buffer_item_210 = value;
        break;
      case 211:
        _struct._unique_small_buffer_item_211 = value;
        break;
      case 212:
        _struct._unique_small_buffer_item_212 = value;
        break;
      case 213:
        _struct._unique_small_buffer_item_213 = value;
        break;
      case 214:
        _struct._unique_small_buffer_item_214 = value;
        break;
      case 215:
        _struct._unique_small_buffer_item_215 = value;
        break;
      case 216:
        _struct._unique_small_buffer_item_216 = value;
        break;
      case 217:
        _struct._unique_small_buffer_item_217 = value;
        break;
      case 218:
        _struct._unique_small_buffer_item_218 = value;
        break;
      case 219:
        _struct._unique_small_buffer_item_219 = value;
        break;
      case 220:
        _struct._unique_small_buffer_item_220 = value;
        break;
      case 221:
        _struct._unique_small_buffer_item_221 = value;
        break;
      case 222:
        _struct._unique_small_buffer_item_222 = value;
        break;
      case 223:
        _struct._unique_small_buffer_item_223 = value;
        break;
      case 224:
        _struct._unique_small_buffer_item_224 = value;
        break;
      case 225:
        _struct._unique_small_buffer_item_225 = value;
        break;
      case 226:
        _struct._unique_small_buffer_item_226 = value;
        break;
      case 227:
        _struct._unique_small_buffer_item_227 = value;
        break;
      case 228:
        _struct._unique_small_buffer_item_228 = value;
        break;
      case 229:
        _struct._unique_small_buffer_item_229 = value;
        break;
      case 230:
        _struct._unique_small_buffer_item_230 = value;
        break;
      case 231:
        _struct._unique_small_buffer_item_231 = value;
        break;
      case 232:
        _struct._unique_small_buffer_item_232 = value;
        break;
      case 233:
        _struct._unique_small_buffer_item_233 = value;
        break;
      case 234:
        _struct._unique_small_buffer_item_234 = value;
        break;
      case 235:
        _struct._unique_small_buffer_item_235 = value;
        break;
      case 236:
        _struct._unique_small_buffer_item_236 = value;
        break;
      case 237:
        _struct._unique_small_buffer_item_237 = value;
        break;
      case 238:
        _struct._unique_small_buffer_item_238 = value;
        break;
      case 239:
        _struct._unique_small_buffer_item_239 = value;
        break;
      case 240:
        _struct._unique_small_buffer_item_240 = value;
        break;
      case 241:
        _struct._unique_small_buffer_item_241 = value;
        break;
      case 242:
        _struct._unique_small_buffer_item_242 = value;
        break;
      case 243:
        _struct._unique_small_buffer_item_243 = value;
        break;
      case 244:
        _struct._unique_small_buffer_item_244 = value;
        break;
      case 245:
        _struct._unique_small_buffer_item_245 = value;
        break;
      case 246:
        _struct._unique_small_buffer_item_246 = value;
        break;
      case 247:
        _struct._unique_small_buffer_item_247 = value;
        break;
      case 248:
        _struct._unique_small_buffer_item_248 = value;
        break;
      case 249:
        _struct._unique_small_buffer_item_249 = value;
        break;
      case 250:
        _struct._unique_small_buffer_item_250 = value;
        break;
      case 251:
        _struct._unique_small_buffer_item_251 = value;
        break;
      case 252:
        _struct._unique_small_buffer_item_252 = value;
        break;
      case 253:
        _struct._unique_small_buffer_item_253 = value;
        break;
      case 254:
        _struct._unique_small_buffer_item_254 = value;
        break;
      case 255:
        _struct._unique_small_buffer_item_255 = value;
        break;
      case 256:
        _struct._unique_small_buffer_item_256 = value;
        break;
      case 257:
        _struct._unique_small_buffer_item_257 = value;
        break;
      case 258:
        _struct._unique_small_buffer_item_258 = value;
        break;
      case 259:
        _struct._unique_small_buffer_item_259 = value;
        break;
      case 260:
        _struct._unique_small_buffer_item_260 = value;
        break;
      case 261:
        _struct._unique_small_buffer_item_261 = value;
        break;
      case 262:
        _struct._unique_small_buffer_item_262 = value;
        break;
      case 263:
        _struct._unique_small_buffer_item_263 = value;
        break;
      case 264:
        _struct._unique_small_buffer_item_264 = value;
        break;
      case 265:
        _struct._unique_small_buffer_item_265 = value;
        break;
      case 266:
        _struct._unique_small_buffer_item_266 = value;
        break;
      case 267:
        _struct._unique_small_buffer_item_267 = value;
        break;
      case 268:
        _struct._unique_small_buffer_item_268 = value;
        break;
      case 269:
        _struct._unique_small_buffer_item_269 = value;
        break;
      case 270:
        _struct._unique_small_buffer_item_270 = value;
        break;
      case 271:
        _struct._unique_small_buffer_item_271 = value;
        break;
      case 272:
        _struct._unique_small_buffer_item_272 = value;
        break;
      case 273:
        _struct._unique_small_buffer_item_273 = value;
        break;
      case 274:
        _struct._unique_small_buffer_item_274 = value;
        break;
      case 275:
        _struct._unique_small_buffer_item_275 = value;
        break;
      case 276:
        _struct._unique_small_buffer_item_276 = value;
        break;
      case 277:
        _struct._unique_small_buffer_item_277 = value;
        break;
      case 278:
        _struct._unique_small_buffer_item_278 = value;
        break;
      case 279:
        _struct._unique_small_buffer_item_279 = value;
        break;
      case 280:
        _struct._unique_small_buffer_item_280 = value;
        break;
      case 281:
        _struct._unique_small_buffer_item_281 = value;
        break;
      case 282:
        _struct._unique_small_buffer_item_282 = value;
        break;
      case 283:
        _struct._unique_small_buffer_item_283 = value;
        break;
      case 284:
        _struct._unique_small_buffer_item_284 = value;
        break;
      case 285:
        _struct._unique_small_buffer_item_285 = value;
        break;
      case 286:
        _struct._unique_small_buffer_item_286 = value;
        break;
      case 287:
        _struct._unique_small_buffer_item_287 = value;
        break;
      case 288:
        _struct._unique_small_buffer_item_288 = value;
        break;
      case 289:
        _struct._unique_small_buffer_item_289 = value;
        break;
      case 290:
        _struct._unique_small_buffer_item_290 = value;
        break;
      case 291:
        _struct._unique_small_buffer_item_291 = value;
        break;
      case 292:
        _struct._unique_small_buffer_item_292 = value;
        break;
      case 293:
        _struct._unique_small_buffer_item_293 = value;
        break;
      case 294:
        _struct._unique_small_buffer_item_294 = value;
        break;
      case 295:
        _struct._unique_small_buffer_item_295 = value;
        break;
      case 296:
        _struct._unique_small_buffer_item_296 = value;
        break;
      case 297:
        _struct._unique_small_buffer_item_297 = value;
        break;
      case 298:
        _struct._unique_small_buffer_item_298 = value;
        break;
      case 299:
        _struct._unique_small_buffer_item_299 = value;
        break;
      case 300:
        _struct._unique_small_buffer_item_300 = value;
        break;
      case 301:
        _struct._unique_small_buffer_item_301 = value;
        break;
      case 302:
        _struct._unique_small_buffer_item_302 = value;
        break;
      case 303:
        _struct._unique_small_buffer_item_303 = value;
        break;
      case 304:
        _struct._unique_small_buffer_item_304 = value;
        break;
      case 305:
        _struct._unique_small_buffer_item_305 = value;
        break;
      case 306:
        _struct._unique_small_buffer_item_306 = value;
        break;
      case 307:
        _struct._unique_small_buffer_item_307 = value;
        break;
      case 308:
        _struct._unique_small_buffer_item_308 = value;
        break;
      case 309:
        _struct._unique_small_buffer_item_309 = value;
        break;
      case 310:
        _struct._unique_small_buffer_item_310 = value;
        break;
      case 311:
        _struct._unique_small_buffer_item_311 = value;
        break;
      case 312:
        _struct._unique_small_buffer_item_312 = value;
        break;
      case 313:
        _struct._unique_small_buffer_item_313 = value;
        break;
      case 314:
        _struct._unique_small_buffer_item_314 = value;
        break;
      case 315:
        _struct._unique_small_buffer_item_315 = value;
        break;
      case 316:
        _struct._unique_small_buffer_item_316 = value;
        break;
      case 317:
        _struct._unique_small_buffer_item_317 = value;
        break;
      case 318:
        _struct._unique_small_buffer_item_318 = value;
        break;
      case 319:
        _struct._unique_small_buffer_item_319 = value;
        break;
      case 320:
        _struct._unique_small_buffer_item_320 = value;
        break;
      case 321:
        _struct._unique_small_buffer_item_321 = value;
        break;
      case 322:
        _struct._unique_small_buffer_item_322 = value;
        break;
      case 323:
        _struct._unique_small_buffer_item_323 = value;
        break;
      case 324:
        _struct._unique_small_buffer_item_324 = value;
        break;
      case 325:
        _struct._unique_small_buffer_item_325 = value;
        break;
      case 326:
        _struct._unique_small_buffer_item_326 = value;
        break;
      case 327:
        _struct._unique_small_buffer_item_327 = value;
        break;
      case 328:
        _struct._unique_small_buffer_item_328 = value;
        break;
      case 329:
        _struct._unique_small_buffer_item_329 = value;
        break;
      case 330:
        _struct._unique_small_buffer_item_330 = value;
        break;
      case 331:
        _struct._unique_small_buffer_item_331 = value;
        break;
      case 332:
        _struct._unique_small_buffer_item_332 = value;
        break;
      case 333:
        _struct._unique_small_buffer_item_333 = value;
        break;
      case 334:
        _struct._unique_small_buffer_item_334 = value;
        break;
      case 335:
        _struct._unique_small_buffer_item_335 = value;
        break;
      case 336:
        _struct._unique_small_buffer_item_336 = value;
        break;
      case 337:
        _struct._unique_small_buffer_item_337 = value;
        break;
      case 338:
        _struct._unique_small_buffer_item_338 = value;
        break;
      case 339:
        _struct._unique_small_buffer_item_339 = value;
        break;
      case 340:
        _struct._unique_small_buffer_item_340 = value;
        break;
      case 341:
        _struct._unique_small_buffer_item_341 = value;
        break;
      case 342:
        _struct._unique_small_buffer_item_342 = value;
        break;
      case 343:
        _struct._unique_small_buffer_item_343 = value;
        break;
      case 344:
        _struct._unique_small_buffer_item_344 = value;
        break;
      case 345:
        _struct._unique_small_buffer_item_345 = value;
        break;
      case 346:
        _struct._unique_small_buffer_item_346 = value;
        break;
      case 347:
        _struct._unique_small_buffer_item_347 = value;
        break;
      case 348:
        _struct._unique_small_buffer_item_348 = value;
        break;
      case 349:
        _struct._unique_small_buffer_item_349 = value;
        break;
      case 350:
        _struct._unique_small_buffer_item_350 = value;
        break;
      case 351:
        _struct._unique_small_buffer_item_351 = value;
        break;
      case 352:
        _struct._unique_small_buffer_item_352 = value;
        break;
      case 353:
        _struct._unique_small_buffer_item_353 = value;
        break;
      case 354:
        _struct._unique_small_buffer_item_354 = value;
        break;
      case 355:
        _struct._unique_small_buffer_item_355 = value;
        break;
      case 356:
        _struct._unique_small_buffer_item_356 = value;
        break;
      case 357:
        _struct._unique_small_buffer_item_357 = value;
        break;
      case 358:
        _struct._unique_small_buffer_item_358 = value;
        break;
      case 359:
        _struct._unique_small_buffer_item_359 = value;
        break;
      case 360:
        _struct._unique_small_buffer_item_360 = value;
        break;
      case 361:
        _struct._unique_small_buffer_item_361 = value;
        break;
      case 362:
        _struct._unique_small_buffer_item_362 = value;
        break;
      case 363:
        _struct._unique_small_buffer_item_363 = value;
        break;
      case 364:
        _struct._unique_small_buffer_item_364 = value;
        break;
      case 365:
        _struct._unique_small_buffer_item_365 = value;
        break;
      case 366:
        _struct._unique_small_buffer_item_366 = value;
        break;
      case 367:
        _struct._unique_small_buffer_item_367 = value;
        break;
      case 368:
        _struct._unique_small_buffer_item_368 = value;
        break;
      case 369:
        _struct._unique_small_buffer_item_369 = value;
        break;
      case 370:
        _struct._unique_small_buffer_item_370 = value;
        break;
      case 371:
        _struct._unique_small_buffer_item_371 = value;
        break;
      case 372:
        _struct._unique_small_buffer_item_372 = value;
        break;
      case 373:
        _struct._unique_small_buffer_item_373 = value;
        break;
      case 374:
        _struct._unique_small_buffer_item_374 = value;
        break;
      case 375:
        _struct._unique_small_buffer_item_375 = value;
        break;
      case 376:
        _struct._unique_small_buffer_item_376 = value;
        break;
      case 377:
        _struct._unique_small_buffer_item_377 = value;
        break;
      case 378:
        _struct._unique_small_buffer_item_378 = value;
        break;
      case 379:
        _struct._unique_small_buffer_item_379 = value;
        break;
      case 380:
        _struct._unique_small_buffer_item_380 = value;
        break;
      case 381:
        _struct._unique_small_buffer_item_381 = value;
        break;
      case 382:
        _struct._unique_small_buffer_item_382 = value;
        break;
      case 383:
        _struct._unique_small_buffer_item_383 = value;
        break;
      case 384:
        _struct._unique_small_buffer_item_384 = value;
        break;
      case 385:
        _struct._unique_small_buffer_item_385 = value;
        break;
      case 386:
        _struct._unique_small_buffer_item_386 = value;
        break;
      case 387:
        _struct._unique_small_buffer_item_387 = value;
        break;
      case 388:
        _struct._unique_small_buffer_item_388 = value;
        break;
      case 389:
        _struct._unique_small_buffer_item_389 = value;
        break;
      case 390:
        _struct._unique_small_buffer_item_390 = value;
        break;
      case 391:
        _struct._unique_small_buffer_item_391 = value;
        break;
      case 392:
        _struct._unique_small_buffer_item_392 = value;
        break;
      case 393:
        _struct._unique_small_buffer_item_393 = value;
        break;
      case 394:
        _struct._unique_small_buffer_item_394 = value;
        break;
      case 395:
        _struct._unique_small_buffer_item_395 = value;
        break;
      case 396:
        _struct._unique_small_buffer_item_396 = value;
        break;
      case 397:
        _struct._unique_small_buffer_item_397 = value;
        break;
      case 398:
        _struct._unique_small_buffer_item_398 = value;
        break;
      case 399:
        _struct._unique_small_buffer_item_399 = value;
        break;
      case 400:
        _struct._unique_small_buffer_item_400 = value;
        break;
      case 401:
        _struct._unique_small_buffer_item_401 = value;
        break;
      case 402:
        _struct._unique_small_buffer_item_402 = value;
        break;
      case 403:
        _struct._unique_small_buffer_item_403 = value;
        break;
      case 404:
        _struct._unique_small_buffer_item_404 = value;
        break;
      case 405:
        _struct._unique_small_buffer_item_405 = value;
        break;
      case 406:
        _struct._unique_small_buffer_item_406 = value;
        break;
      case 407:
        _struct._unique_small_buffer_item_407 = value;
        break;
      case 408:
        _struct._unique_small_buffer_item_408 = value;
        break;
      case 409:
        _struct._unique_small_buffer_item_409 = value;
        break;
      case 410:
        _struct._unique_small_buffer_item_410 = value;
        break;
      case 411:
        _struct._unique_small_buffer_item_411 = value;
        break;
      case 412:
        _struct._unique_small_buffer_item_412 = value;
        break;
      case 413:
        _struct._unique_small_buffer_item_413 = value;
        break;
      case 414:
        _struct._unique_small_buffer_item_414 = value;
        break;
      case 415:
        _struct._unique_small_buffer_item_415 = value;
        break;
      case 416:
        _struct._unique_small_buffer_item_416 = value;
        break;
      case 417:
        _struct._unique_small_buffer_item_417 = value;
        break;
      case 418:
        _struct._unique_small_buffer_item_418 = value;
        break;
      case 419:
        _struct._unique_small_buffer_item_419 = value;
        break;
      case 420:
        _struct._unique_small_buffer_item_420 = value;
        break;
      case 421:
        _struct._unique_small_buffer_item_421 = value;
        break;
      case 422:
        _struct._unique_small_buffer_item_422 = value;
        break;
      case 423:
        _struct._unique_small_buffer_item_423 = value;
        break;
      case 424:
        _struct._unique_small_buffer_item_424 = value;
        break;
      case 425:
        _struct._unique_small_buffer_item_425 = value;
        break;
      case 426:
        _struct._unique_small_buffer_item_426 = value;
        break;
      case 427:
        _struct._unique_small_buffer_item_427 = value;
        break;
      case 428:
        _struct._unique_small_buffer_item_428 = value;
        break;
      case 429:
        _struct._unique_small_buffer_item_429 = value;
        break;
      case 430:
        _struct._unique_small_buffer_item_430 = value;
        break;
      case 431:
        _struct._unique_small_buffer_item_431 = value;
        break;
      case 432:
        _struct._unique_small_buffer_item_432 = value;
        break;
      case 433:
        _struct._unique_small_buffer_item_433 = value;
        break;
      case 434:
        _struct._unique_small_buffer_item_434 = value;
        break;
      case 435:
        _struct._unique_small_buffer_item_435 = value;
        break;
      case 436:
        _struct._unique_small_buffer_item_436 = value;
        break;
      case 437:
        _struct._unique_small_buffer_item_437 = value;
        break;
      case 438:
        _struct._unique_small_buffer_item_438 = value;
        break;
      case 439:
        _struct._unique_small_buffer_item_439 = value;
        break;
      case 440:
        _struct._unique_small_buffer_item_440 = value;
        break;
      case 441:
        _struct._unique_small_buffer_item_441 = value;
        break;
      case 442:
        _struct._unique_small_buffer_item_442 = value;
        break;
      case 443:
        _struct._unique_small_buffer_item_443 = value;
        break;
      case 444:
        _struct._unique_small_buffer_item_444 = value;
        break;
      case 445:
        _struct._unique_small_buffer_item_445 = value;
        break;
      case 446:
        _struct._unique_small_buffer_item_446 = value;
        break;
      case 447:
        _struct._unique_small_buffer_item_447 = value;
        break;
      case 448:
        _struct._unique_small_buffer_item_448 = value;
        break;
      case 449:
        _struct._unique_small_buffer_item_449 = value;
        break;
      case 450:
        _struct._unique_small_buffer_item_450 = value;
        break;
      case 451:
        _struct._unique_small_buffer_item_451 = value;
        break;
      case 452:
        _struct._unique_small_buffer_item_452 = value;
        break;
      case 453:
        _struct._unique_small_buffer_item_453 = value;
        break;
      case 454:
        _struct._unique_small_buffer_item_454 = value;
        break;
      case 455:
        _struct._unique_small_buffer_item_455 = value;
        break;
      case 456:
        _struct._unique_small_buffer_item_456 = value;
        break;
      case 457:
        _struct._unique_small_buffer_item_457 = value;
        break;
      case 458:
        _struct._unique_small_buffer_item_458 = value;
        break;
      case 459:
        _struct._unique_small_buffer_item_459 = value;
        break;
      case 460:
        _struct._unique_small_buffer_item_460 = value;
        break;
      case 461:
        _struct._unique_small_buffer_item_461 = value;
        break;
      case 462:
        _struct._unique_small_buffer_item_462 = value;
        break;
      case 463:
        _struct._unique_small_buffer_item_463 = value;
        break;
      case 464:
        _struct._unique_small_buffer_item_464 = value;
        break;
      case 465:
        _struct._unique_small_buffer_item_465 = value;
        break;
      case 466:
        _struct._unique_small_buffer_item_466 = value;
        break;
      case 467:
        _struct._unique_small_buffer_item_467 = value;
        break;
      case 468:
        _struct._unique_small_buffer_item_468 = value;
        break;
      case 469:
        _struct._unique_small_buffer_item_469 = value;
        break;
      case 470:
        _struct._unique_small_buffer_item_470 = value;
        break;
      case 471:
        _struct._unique_small_buffer_item_471 = value;
        break;
      case 472:
        _struct._unique_small_buffer_item_472 = value;
        break;
      case 473:
        _struct._unique_small_buffer_item_473 = value;
        break;
      case 474:
        _struct._unique_small_buffer_item_474 = value;
        break;
      case 475:
        _struct._unique_small_buffer_item_475 = value;
        break;
      case 476:
        _struct._unique_small_buffer_item_476 = value;
        break;
      case 477:
        _struct._unique_small_buffer_item_477 = value;
        break;
      case 478:
        _struct._unique_small_buffer_item_478 = value;
        break;
      case 479:
        _struct._unique_small_buffer_item_479 = value;
        break;
      case 480:
        _struct._unique_small_buffer_item_480 = value;
        break;
      case 481:
        _struct._unique_small_buffer_item_481 = value;
        break;
      case 482:
        _struct._unique_small_buffer_item_482 = value;
        break;
      case 483:
        _struct._unique_small_buffer_item_483 = value;
        break;
      case 484:
        _struct._unique_small_buffer_item_484 = value;
        break;
      case 485:
        _struct._unique_small_buffer_item_485 = value;
        break;
      case 486:
        _struct._unique_small_buffer_item_486 = value;
        break;
      case 487:
        _struct._unique_small_buffer_item_487 = value;
        break;
      case 488:
        _struct._unique_small_buffer_item_488 = value;
        break;
      case 489:
        _struct._unique_small_buffer_item_489 = value;
        break;
      case 490:
        _struct._unique_small_buffer_item_490 = value;
        break;
      case 491:
        _struct._unique_small_buffer_item_491 = value;
        break;
      case 492:
        _struct._unique_small_buffer_item_492 = value;
        break;
      case 493:
        _struct._unique_small_buffer_item_493 = value;
        break;
      case 494:
        _struct._unique_small_buffer_item_494 = value;
        break;
      case 495:
        _struct._unique_small_buffer_item_495 = value;
        break;
      case 496:
        _struct._unique_small_buffer_item_496 = value;
        break;
      case 497:
        _struct._unique_small_buffer_item_497 = value;
        break;
      case 498:
        _struct._unique_small_buffer_item_498 = value;
        break;
      case 499:
        _struct._unique_small_buffer_item_499 = value;
        break;
      case 500:
        _struct._unique_small_buffer_item_500 = value;
        break;
      case 501:
        _struct._unique_small_buffer_item_501 = value;
        break;
      case 502:
        _struct._unique_small_buffer_item_502 = value;
        break;
      case 503:
        _struct._unique_small_buffer_item_503 = value;
        break;
      case 504:
        _struct._unique_small_buffer_item_504 = value;
        break;
      case 505:
        _struct._unique_small_buffer_item_505 = value;
        break;
      case 506:
        _struct._unique_small_buffer_item_506 = value;
        break;
      case 507:
        _struct._unique_small_buffer_item_507 = value;
        break;
      case 508:
        _struct._unique_small_buffer_item_508 = value;
        break;
      case 509:
        _struct._unique_small_buffer_item_509 = value;
        break;
      case 510:
        _struct._unique_small_buffer_item_510 = value;
        break;
      case 511:
        _struct._unique_small_buffer_item_511 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class _longobject extends ffi.Struct {
  external PyVarObject ob_base;

  @ffi.Uint32()
  external int _unique_ob_digit_item_0;

  /// Helper for array `ob_digit`.
  ArrayHelper__longobject_ob_digit_level0 get ob_digit =>
      ArrayHelper__longobject_ob_digit_level0(this, [1], 0, 0);
}

/// Helper for array `ob_digit` in struct `_longobject`.
class ArrayHelper__longobject_ob_digit_level0 {
  final _longobject _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper__longobject_ob_digit_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_ob_digit_item_0;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_ob_digit_item_0 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class _PyUnicodeWriter extends ffi.Struct {
  external ffi.Pointer<PyObject> buffer;

  external ffi.Pointer<ffi.Void> data;

  @ffi.Int32()
  external int kind;

  @ffi.Uint32()
  external int maxchar;

  @ffi.Int64()
  external int size;

  @ffi.Int64()
  external int pos;

  @ffi.Int64()
  external int min_length;

  @ffi.Uint32()
  external int min_char;

  @ffi.Uint8()
  external int overallocate;

  @ffi.Uint8()
  external int readonly;
}

class PyFloatObject extends ffi.Struct {
  external PyObject ob_base;

  @ffi.Double()
  external double ob_fval;
}

class Py_complex extends ffi.Struct {
  @ffi.Double()
  external double real;

  @ffi.Double()
  external double imag;
}

class PyComplexObject extends ffi.Struct {
  external PyObject ob_base;

  external Py_complex cval;
}

class _PyManagedBufferObject extends ffi.Struct {
  external PyObject ob_base;

  @ffi.Int32()
  external int flags;

  @ffi.Int64()
  external int exports;

  external Py_buffer master;
}

class PyMemoryViewObject extends ffi.Struct {
  external PyVarObject ob_base;

  external ffi.Pointer<_PyManagedBufferObject> mbuf;

  @ffi.Int64()
  external int hash;

  @ffi.Int32()
  external int flags;

  @ffi.Int64()
  external int exports;

  external Py_buffer view;

  external ffi.Pointer<PyObject> weakreflist;

  @ffi.Int64()
  external int _unique_ob_array_item_0;

  /// Helper for array `ob_array`.
  ArrayHelper_PyMemoryViewObject_ob_array_level0 get ob_array =>
      ArrayHelper_PyMemoryViewObject_ob_array_level0(this, [1], 0, 0);
}

/// Helper for array `ob_array` in struct `PyMemoryViewObject`.
class ArrayHelper_PyMemoryViewObject_ob_array_level0 {
  final PyMemoryViewObject _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_PyMemoryViewObject_ob_array_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_ob_array_item_0;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_ob_array_item_0 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class PyListObject extends ffi.Struct {
  external PyVarObject ob_base;

  external ffi.Pointer<ffi.Pointer<PyObject>> ob_item;

  @ffi.Int64()
  external int allocated;
}

class _odictobject extends ffi.Opaque {}

class setentry extends ffi.Struct {
  external ffi.Pointer<PyObject> key;

  @ffi.Int64()
  external int hash;
}

class PySetObject extends ffi.Struct {
  external PyObject ob_base;

  @ffi.Int64()
  external int fill;

  @ffi.Int64()
  external int used;

  @ffi.Int64()
  external int mask;

  external ffi.Pointer<setentry> table;

  @ffi.Int64()
  external int hash;

  @ffi.Int64()
  external int finger;

  external setentry _unique_smalltable_item_0;
  external setentry _unique_smalltable_item_1;
  external setentry _unique_smalltable_item_2;
  external setentry _unique_smalltable_item_3;
  external setentry _unique_smalltable_item_4;
  external setentry _unique_smalltable_item_5;
  external setentry _unique_smalltable_item_6;
  external setentry _unique_smalltable_item_7;

  /// Helper for array `smalltable`.
  ArrayHelper_PySetObject_smalltable_level0 get smalltable =>
      ArrayHelper_PySetObject_smalltable_level0(this, [8], 0, 0);
  external ffi.Pointer<PyObject> weakreflist;
}

/// Helper for array `smalltable` in struct `PySetObject`.
class ArrayHelper_PySetObject_smalltable_level0 {
  final PySetObject _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_PySetObject_smalltable_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  setentry operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_smalltable_item_0;
      case 1:
        return _struct._unique_smalltable_item_1;
      case 2:
        return _struct._unique_smalltable_item_2;
      case 3:
        return _struct._unique_smalltable_item_3;
      case 4:
        return _struct._unique_smalltable_item_4;
      case 5:
        return _struct._unique_smalltable_item_5;
      case 6:
        return _struct._unique_smalltable_item_6;
      case 7:
        return _struct._unique_smalltable_item_7;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, setentry value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_smalltable_item_0 = value;
        break;
      case 1:
        _struct._unique_smalltable_item_1 = value;
        break;
      case 2:
        _struct._unique_smalltable_item_2 = value;
        break;
      case 3:
        _struct._unique_smalltable_item_3 = value;
        break;
      case 4:
        _struct._unique_smalltable_item_4 = value;
        break;
      case 5:
        _struct._unique_smalltable_item_5 = value;
        break;
      case 6:
        _struct._unique_smalltable_item_6 = value;
        break;
      case 7:
        _struct._unique_smalltable_item_7 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class PyCFunctionObject extends ffi.Struct {
  external PyObject ob_base;

  external ffi.Pointer<PyMethodDef> m_ml;

  external ffi.Pointer<PyObject> m_self;

  external ffi.Pointer<PyObject> m_module;

  external ffi.Pointer<PyObject> m_weakreflist;

  external ffi.Pointer<ffi.NativeFunction<vectorcallfunc>> vectorcall;
}

class PyModuleDef_Base extends ffi.Struct {
  external PyObject ob_base;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_3>> m_init;

  @ffi.Int64()
  external int m_index;

  external ffi.Pointer<PyObject> m_copy;
}

class PyModuleDef_Slot extends ffi.Struct {
  @ffi.Int32()
  external int slot;

  external ffi.Pointer<ffi.Void> value;
}

class PyModuleDef extends ffi.Struct {
  external PyModuleDef_Base m_base;

  external ffi.Pointer<ffi.Int8> m_name;

  external ffi.Pointer<ffi.Int8> m_doc;

  @ffi.Int64()
  external int m_size;

  external ffi.Pointer<PyMethodDef> m_methods;

  external ffi.Pointer<PyModuleDef_Slot> m_slots;

  external ffi.Pointer<ffi.NativeFunction<traverseproc>> m_traverse;

  external ffi.Pointer<ffi.NativeFunction<inquiry>> m_clear;

  external ffi.Pointer<ffi.NativeFunction<freefunc>> m_free;
}

class PyFunctionObject extends ffi.Struct {
  external PyObject ob_base;

  external ffi.Pointer<PyObject> func_code;

  external ffi.Pointer<PyObject> func_globals;

  external ffi.Pointer<PyObject> func_defaults;

  external ffi.Pointer<PyObject> func_kwdefaults;

  external ffi.Pointer<PyObject> func_closure;

  external ffi.Pointer<PyObject> func_doc;

  external ffi.Pointer<PyObject> func_name;

  external ffi.Pointer<PyObject> func_dict;

  external ffi.Pointer<PyObject> func_weakreflist;

  external ffi.Pointer<PyObject> func_module;

  external ffi.Pointer<PyObject> func_annotations;

  external ffi.Pointer<PyObject> func_qualname;

  external ffi.Pointer<ffi.NativeFunction<vectorcallfunc>> vectorcall;
}

class PyMethodObject extends ffi.Struct {
  external PyObject ob_base;

  external ffi.Pointer<PyObject> im_func;

  external ffi.Pointer<PyObject> im_self;

  external ffi.Pointer<PyObject> im_weakreflist;

  external ffi.Pointer<ffi.NativeFunction<vectorcallfunc>> vectorcall;
}

class PyInstanceMethodObject extends ffi.Struct {
  external PyObject ob_base;

  external ffi.Pointer<PyObject> func;
}

class _frame extends ffi.Opaque {}

class PySliceObject extends ffi.Struct {
  external PyObject ob_base;

  external ffi.Pointer<PyObject> start;

  external ffi.Pointer<PyObject> stop;

  external ffi.Pointer<PyObject> step;
}

class PyCellObject extends ffi.Struct {
  external PyObject ob_base;

  external ffi.Pointer<PyObject> ob_ref;
}

abstract class PyLockStatus {
  static const int PY_LOCK_FAILURE = 0;
  static const int PY_LOCK_ACQUIRED = 1;
  static const int PY_LOCK_INTR = 2;
}

class _Py_tss_t extends ffi.Struct {
  @ffi.Int32()
  external int _is_initialized;

  @ffi.Uint32()
  external int _key;
}

class _is extends ffi.Opaque {}

class _PyErr_StackItem extends ffi.Struct {
  external ffi.Pointer<PyObject> exc_type;

  external ffi.Pointer<PyObject> exc_value;

  external ffi.Pointer<PyObject> exc_traceback;

  external ffi.Pointer<_PyErr_StackItem> previous_item;
}

class _ts extends ffi.Struct {
  external ffi.Pointer<_ts> prev;

  external ffi.Pointer<_ts> next;

  external ffi.Pointer<_is> interp;

  external ffi.Pointer<_frame> frame;

  @ffi.Int32()
  external int recursion_depth;

  @ffi.Int8()
  external int overflowed;

  @ffi.Int8()
  external int recursion_critical;

  @ffi.Int32()
  external int stackcheck_counter;

  @ffi.Int32()
  external int tracing;

  @ffi.Int32()
  external int use_tracing;

  external ffi.Pointer<ffi.NativeFunction<Py_tracefunc>> c_profilefunc;

  external ffi.Pointer<ffi.NativeFunction<Py_tracefunc>> c_tracefunc;

  external ffi.Pointer<PyObject> c_profileobj;

  external ffi.Pointer<PyObject> c_traceobj;

  external ffi.Pointer<PyObject> curexc_type;

  external ffi.Pointer<PyObject> curexc_value;

  external ffi.Pointer<PyObject> curexc_traceback;

  external _PyErr_StackItem exc_state;

  external ffi.Pointer<_PyErr_StackItem> exc_info;

  external ffi.Pointer<PyObject> dict;

  @ffi.Int32()
  external int gilstate_counter;

  external ffi.Pointer<PyObject> async_exc;

  @ffi.Uint64()
  external int thread_id;

  @ffi.Int32()
  external int trash_delete_nesting;

  external ffi.Pointer<PyObject> trash_delete_later;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_5>> on_delete;

  external ffi.Pointer<ffi.Void> on_delete_data;

  @ffi.Int32()
  external int coroutine_origin_tracking_depth;

  external ffi.Pointer<PyObject> async_gen_firstiter;

  external ffi.Pointer<PyObject> async_gen_finalizer;

  external ffi.Pointer<PyObject> context;

  @ffi.Uint64()
  external int context_ver;

  @ffi.Uint64()
  external int id;
}

abstract class PyGILState_STATE {
  static const int PyGILState_LOCKED = 0;
  static const int PyGILState_UNLOCKED = 1;
}

class PyGenObject extends ffi.Struct {
  external PyObject ob_base;

  external ffi.Pointer<_frame> gi_frame;

  @ffi.Int8()
  external int gi_running;

  external ffi.Pointer<PyObject> gi_code;

  external ffi.Pointer<PyObject> gi_weakreflist;

  external ffi.Pointer<PyObject> gi_name;

  external ffi.Pointer<PyObject> gi_qualname;

  external _PyErr_StackItem gi_exc_state;
}

class PyCoroObject extends ffi.Struct {
  external PyObject ob_base;

  external ffi.Pointer<_frame> cr_frame;

  @ffi.Int8()
  external int cr_running;

  external ffi.Pointer<PyObject> cr_code;

  external ffi.Pointer<PyObject> cr_weakreflist;

  external ffi.Pointer<PyObject> cr_name;

  external ffi.Pointer<PyObject> cr_qualname;

  external _PyErr_StackItem cr_exc_state;

  external ffi.Pointer<PyObject> cr_origin;
}

class PyAsyncGenObject extends ffi.Struct {
  external PyObject ob_base;

  external ffi.Pointer<_frame> ag_frame;

  @ffi.Int8()
  external int ag_running;

  external ffi.Pointer<PyObject> ag_code;

  external ffi.Pointer<PyObject> ag_weakreflist;

  external ffi.Pointer<PyObject> ag_name;

  external ffi.Pointer<PyObject> ag_qualname;

  external _PyErr_StackItem ag_exc_state;

  external ffi.Pointer<PyObject> ag_finalizer;

  @ffi.Int32()
  external int ag_hooks_inited;

  @ffi.Int32()
  external int ag_closed;

  @ffi.Int32()
  external int ag_running_async;
}

class wrapperbase extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @ffi.Int32()
  external int offset;

  external ffi.Pointer<ffi.Void> function;

  external ffi.Pointer<ffi.NativeFunction<wrapperfunc>> wrapper;

  external ffi.Pointer<ffi.Int8> doc;

  @ffi.Int32()
  external int flags;

  external ffi.Pointer<PyObject> name_strobj;
}

class PyDescrObject extends ffi.Struct {
  external PyObject ob_base;

  external ffi.Pointer<_typeobject> d_type;

  external ffi.Pointer<PyObject> d_name;

  external ffi.Pointer<PyObject> d_qualname;
}

class PyMethodDescrObject extends ffi.Struct {
  external PyDescrObject d_common;

  external ffi.Pointer<PyMethodDef> d_method;

  external ffi.Pointer<ffi.NativeFunction<vectorcallfunc>> vectorcall;
}

class PyMemberDescrObject extends ffi.Struct {
  external PyDescrObject d_common;

  external ffi.Pointer<PyMemberDef> d_member;
}

class PyGetSetDescrObject extends ffi.Struct {
  external PyDescrObject d_common;

  external ffi.Pointer<PyGetSetDef> d_getset;
}

class PyWrapperDescrObject extends ffi.Struct {
  external PyDescrObject d_common;

  external ffi.Pointer<wrapperbase> d_base;

  external ffi.Pointer<ffi.Void> d_wrapped;
}

class _PyWeakReference extends ffi.Struct {
  external PyObject ob_base;

  external ffi.Pointer<PyObject> wr_object;

  external ffi.Pointer<PyObject> wr_callback;

  @ffi.Int64()
  external int hash;

  external ffi.Pointer<_PyWeakReference> wr_prev;

  external ffi.Pointer<_PyWeakReference> wr_next;
}

class PyStructSequence_Field extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> doc;
}

class PyStructSequence_Desc extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> doc;

  external ffi.Pointer<PyStructSequence_Field> fields;

  @ffi.Int32()
  external int n_in_sequence;
}

class _pycontextobject extends ffi.Opaque {}

class _pycontextvarobject extends ffi.Opaque {}

class _pycontexttokenobject extends ffi.Opaque {}

class _arena extends ffi.Opaque {}

class _PyArg_Parser extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> format;

  external ffi.Pointer<ffi.Pointer<ffi.Int8>> keywords;

  external ffi.Pointer<ffi.Int8> fname;

  external ffi.Pointer<ffi.Int8> custom_msg;

  @ffi.Int32()
  external int pos;

  @ffi.Int32()
  external int min;

  @ffi.Int32()
  external int max;

  external ffi.Pointer<PyObject> kwtuple;

  external ffi.Pointer<_PyArg_Parser> next;
}

class _PyOpcache extends ffi.Opaque {}

class PyCodeObject extends ffi.Struct {
  external PyObject ob_base;

  @ffi.Int32()
  external int co_argcount;

  @ffi.Int32()
  external int co_posonlyargcount;

  @ffi.Int32()
  external int co_kwonlyargcount;

  @ffi.Int32()
  external int co_nlocals;

  @ffi.Int32()
  external int co_stacksize;

  @ffi.Int32()
  external int co_flags;

  @ffi.Int32()
  external int co_firstlineno;

  external ffi.Pointer<PyObject> co_code;

  external ffi.Pointer<PyObject> co_consts;

  external ffi.Pointer<PyObject> co_names;

  external ffi.Pointer<PyObject> co_varnames;

  external ffi.Pointer<PyObject> co_freevars;

  external ffi.Pointer<PyObject> co_cellvars;

  external ffi.Pointer<ffi.Int64> co_cell2arg;

  external ffi.Pointer<PyObject> co_filename;

  external ffi.Pointer<PyObject> co_name;

  external ffi.Pointer<PyObject> co_lnotab;

  external ffi.Pointer<ffi.Void> co_zombieframe;

  external ffi.Pointer<PyObject> co_weakreflist;

  external ffi.Pointer<ffi.Void> co_extra;

  external ffi.Pointer<ffi.Uint8> co_opcache_map;

  external ffi.Pointer<_PyOpcache> co_opcache;

  @ffi.Int32()
  external int co_opcache_flag;

  @ffi.Uint8()
  external int co_opcache_size;
}

class PyAddrPair extends ffi.Struct {
  @ffi.Int32()
  external int ap_lower;

  @ffi.Int32()
  external int ap_upper;
}

class _node extends ffi.Opaque {}

class PyCompilerFlags extends ffi.Struct {
  @ffi.Int32()
  external int cf_flags;

  @ffi.Int32()
  external int cf_feature_version;
}

class PyFutureFeatures extends ffi.Struct {
  @ffi.Int32()
  external int ff_features;

  @ffi.Int32()
  external int ff_lineno;
}

class _mod extends ffi.Opaque {}

class symtable extends ffi.Opaque {}

class _Py_Identifier extends ffi.Struct {
  external ffi.Pointer<_Py_Identifier> next;

  external ffi.Pointer<ffi.Int8> string;

  external ffi.Pointer<PyObject> object;
}

class _inittab extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_10>> initfunc;
}

class _frozen extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Uint8> code;

  @ffi.Int32()
  external int size;
}

abstract class Py_error_handler {
  static const int Py_ERROR_UNKNOWN = 0;
  static const int Py_ERROR_STRICT = 1;
  static const int Py_ERROR_SURROGATEESCAPE = 2;
  static const int Py_ERROR_REPLACE = 3;
  static const int Py_ERROR_IGNORE = 4;
  static const int Py_ERROR_BACKSLASHREPLACE = 5;
  static const int Py_ERROR_SURROGATEPASS = 6;
  static const int Py_ERROR_XMLCHARREFREPLACE = 7;
  static const int Py_ERROR_OTHER = 8;
}

class stat extends ffi.Struct {
  @ffi.Uint64()
  external int st_dev;

  @ffi.Uint64()
  external int st_ino;

  @ffi.Uint64()
  external int st_nlink;

  @ffi.Uint32()
  external int st_mode;

  @ffi.Uint32()
  external int st_uid;

  @ffi.Uint32()
  external int st_gid;

  @ffi.Int32()
  external int __pad0;

  @ffi.Uint64()
  external int st_rdev;

  @ffi.Int64()
  external int st_size;

  @ffi.Int64()
  external int st_blksize;

  @ffi.Int64()
  external int st_blocks;

  external timespec st_atim;

  external timespec st_mtim;

  external timespec st_ctim;

  @ffi.Int64()
  external int _unique___glibc_reserved_item_0;
  @ffi.Int64()
  external int _unique___glibc_reserved_item_1;
  @ffi.Int64()
  external int _unique___glibc_reserved_item_2;

  /// Helper for array `__glibc_reserved`.
  ArrayHelper_stat___glibc_reserved_level0 get __glibc_reserved =>
      ArrayHelper_stat___glibc_reserved_level0(this, [3], 0, 0);
}

/// Helper for array `__glibc_reserved` in struct `stat`.
class ArrayHelper_stat___glibc_reserved_level0 {
  final stat _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_stat___glibc_reserved_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique___glibc_reserved_item_0;
      case 1:
        return _struct._unique___glibc_reserved_item_1;
      case 2:
        return _struct._unique___glibc_reserved_item_2;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique___glibc_reserved_item_0 = value;
        break;
      case 1:
        _struct._unique___glibc_reserved_item_1 = value;
        break;
      case 2:
        _struct._unique___glibc_reserved_item_2 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

const int PY_RELEASE_LEVEL_ALPHA = 10;

const int PY_RELEASE_LEVEL_BETA = 11;

const int PY_RELEASE_LEVEL_GAMMA = 12;

const int PY_RELEASE_LEVEL_FINAL = 15;

const int PY_MAJOR_VERSION = 3;

const int PY_MINOR_VERSION = 8;

const int PY_MICRO_VERSION = 0;

const int PY_RELEASE_LEVEL = 15;

const int PY_RELEASE_SERIAL = 0;

const String PY_VERSION = '3.8.0';

const int PY_VERSION_HEX = 50856176;

const int HAVE_LONG_LONG = 1;

const int PY_LLONG_MIN = -9223372036854775808;

const int PY_LLONG_MAX = 9223372036854775807;

const int PY_ULLONG_MAX = -1;

const int PYLONG_BITS_IN_DIGIT = 30;

const int SIZEOF_PY_HASH_T = 8;

const int SIZEOF_PY_UHASH_T = 8;

const int PY_SIZE_MAX = -1;

const int PY_SSIZE_T_MAX = 9223372036854775807;

const int PY_SSIZE_T_MIN = -9223372036854775808;

const int HAVE_PY_SET_53BIT_PRECISION = 1;

const int PY_BIG_ENDIAN = 0;

const int PY_LITTLE_ENDIAN = 1;

const int PY_DWORD_MAX = 4294967295;

const double Py_MATH_PIl = 3.141592653589793;

const double Py_MATH_PI = 3.141592653589793;

const double Py_MATH_El = 2.718281828459045;

const double Py_MATH_E = 2.718281828459045;

const double Py_MATH_TAU = 6.283185307179586;

const double Py_HUGE_VAL = double.infinity;

const double Py_NAN = double.nan;

const int Py_INVALID_SIZE = -1;

const int Py_PRINT_RAW = 1;

const int Py_TPFLAGS_HEAPTYPE = 512;

const int Py_TPFLAGS_BASETYPE = 1024;

const int _Py_TPFLAGS_HAVE_VECTORCALL = 2048;

const int Py_TPFLAGS_READY = 4096;

const int Py_TPFLAGS_READYING = 8192;

const int Py_TPFLAGS_HAVE_GC = 16384;

const int Py_TPFLAGS_HAVE_STACKLESS_EXTENSION = 0;

const int Py_TPFLAGS_METHOD_DESCRIPTOR = 131072;

const int Py_TPFLAGS_HAVE_VERSION_TAG = 262144;

const int Py_TPFLAGS_VALID_VERSION_TAG = 524288;

const int Py_TPFLAGS_IS_ABSTRACT = 1048576;

const int Py_TPFLAGS_LONG_SUBCLASS = 16777216;

const int Py_TPFLAGS_LIST_SUBCLASS = 33554432;

const int Py_TPFLAGS_TUPLE_SUBCLASS = 67108864;

const int Py_TPFLAGS_BYTES_SUBCLASS = 134217728;

const int Py_TPFLAGS_UNICODE_SUBCLASS = 268435456;

const int Py_TPFLAGS_DICT_SUBCLASS = 536870912;

const int Py_TPFLAGS_BASE_EXC_SUBCLASS = 1073741824;

const int Py_TPFLAGS_TYPE_SUBCLASS = 2147483648;

const int Py_TPFLAGS_DEFAULT = 262144;

const int Py_TPFLAGS_HAVE_FINALIZE = 1;

const int Py_LT = 0;

const int Py_LE = 1;

const int Py_EQ = 2;

const int Py_NE = 3;

const int Py_GT = 4;

const int Py_GE = 5;

const int PyTrash_UNWIND_LEVEL = 50;

const int _PyTime_MIN = -9223372036854775808;

const int _PyTime_MAX = 9223372036854775807;

const int Py_mp_ass_subscript = 3;

const int Py_mp_length = 4;

const int Py_mp_subscript = 5;

const int Py_nb_absolute = 6;

const int Py_nb_add = 7;

const int Py_nb_and = 8;

const int Py_nb_bool = 9;

const int Py_nb_divmod = 10;

const int Py_nb_float = 11;

const int Py_nb_floor_divide = 12;

const int Py_nb_index = 13;

const int Py_nb_inplace_add = 14;

const int Py_nb_inplace_and = 15;

const int Py_nb_inplace_floor_divide = 16;

const int Py_nb_inplace_lshift = 17;

const int Py_nb_inplace_multiply = 18;

const int Py_nb_inplace_or = 19;

const int Py_nb_inplace_power = 20;

const int Py_nb_inplace_remainder = 21;

const int Py_nb_inplace_rshift = 22;

const int Py_nb_inplace_subtract = 23;

const int Py_nb_inplace_true_divide = 24;

const int Py_nb_inplace_xor = 25;

const int Py_nb_int = 26;

const int Py_nb_invert = 27;

const int Py_nb_lshift = 28;

const int Py_nb_multiply = 29;

const int Py_nb_negative = 30;

const int Py_nb_or = 31;

const int Py_nb_positive = 32;

const int Py_nb_power = 33;

const int Py_nb_remainder = 34;

const int Py_nb_rshift = 35;

const int Py_nb_subtract = 36;

const int Py_nb_true_divide = 37;

const int Py_nb_xor = 38;

const int Py_sq_ass_item = 39;

const int Py_sq_concat = 40;

const int Py_sq_contains = 41;

const int Py_sq_inplace_concat = 42;

const int Py_sq_inplace_repeat = 43;

const int Py_sq_item = 44;

const int Py_sq_length = 45;

const int Py_sq_repeat = 46;

const int Py_tp_alloc = 47;

const int Py_tp_base = 48;

const int Py_tp_bases = 49;

const int Py_tp_call = 50;

const int Py_tp_clear = 51;

const int Py_tp_dealloc = 52;

const int Py_tp_del = 53;

const int Py_tp_descr_get = 54;

const int Py_tp_descr_set = 55;

const int Py_tp_doc = 56;

const int Py_tp_getattr = 57;

const int Py_tp_getattro = 58;

const int Py_tp_hash = 59;

const int Py_tp_init = 60;

const int Py_tp_is_gc = 61;

const int Py_tp_iter = 62;

const int Py_tp_iternext = 63;

const int Py_tp_methods = 64;

const int Py_tp_new = 65;

const int Py_tp_repr = 66;

const int Py_tp_richcompare = 67;

const int Py_tp_setattr = 68;

const int Py_tp_setattro = 69;

const int Py_tp_str = 70;

const int Py_tp_traverse = 71;

const int Py_tp_members = 72;

const int Py_tp_getset = 73;

const int Py_tp_free = 74;

const int Py_nb_matrix_multiply = 75;

const int Py_nb_inplace_matrix_multiply = 76;

const int Py_am_await = 77;

const int Py_am_aiter = 78;

const int Py_am_anext = 79;

const int Py_tp_finalize = 80;

const int _PyHASH_MULTIPLIER = 1000003;

const int _PyHASH_BITS = 61;

const int _PyHASH_MODULUS = 2305843009213693951;

const int _PyHASH_INF = 314159;

const int _PyHASH_NAN = 0;

const int _PyHASH_IMAG = 1000003;

const int Py_HASH_CUTOFF = 0;

const int Py_HASH_EXTERNAL = 0;

const int Py_HASH_SIPHASH24 = 1;

const int Py_HASH_FNV = 2;

const int Py_HASH_ALGORITHM = 1;

const int F_LJUST = 1;

const int F_SIGN = 2;

const int F_BLANK = 4;

const int F_ALT = 8;

const int F_ZERO = 16;

const int Py_UNICODE_SIZE = 4;

const int Py_UNICODE_REPLACEMENT_CHARACTER = 65533;

const String _Py_PARSE_PID = 'i';

const String _Py_PARSE_INTPTR = 'l';

const String _Py_PARSE_UINTPTR = 'k';

const int PyLong_SHIFT = 30;

const int _PyLong_DECIMAL_SHIFT = 9;

const int _PyLong_DECIMAL_BASE = 1000000000;

const int PyLong_BASE = 1073741824;

const int PyLong_MASK = 1073741823;

const int _Py_MANAGED_BUFFER_RELEASED = 1;

const int _Py_MANAGED_BUFFER_FREE_FORMAT = 2;

const int _Py_MEMORYVIEW_RELEASED = 1;

const int _Py_MEMORYVIEW_C = 2;

const int _Py_MEMORYVIEW_FORTRAN = 4;

const int _Py_MEMORYVIEW_SCALAR = 8;

const int _Py_MEMORYVIEW_PIL = 16;

const int PySet_MINSIZE = 8;

const int METH_VARARGS = 1;

const int METH_KEYWORDS = 2;

const int METH_NOARGS = 4;

const int METH_O = 8;

const int METH_CLASS = 16;

const int METH_STATIC = 32;

const int METH_COEXIST = 64;

const int METH_FASTCALL = 128;

const int METH_STACKLESS = 0;

const int Py_mod_create = 1;

const int Py_mod_exec = 2;

const int _Py_mod_LAST_SLOT = 2;

const String PY_STDIOTEXTMODE = 'b';

const int PYTHREAD_INVALID_THREAD_ID = -1;

const int WAIT_LOCK = 1;

const int NOWAIT_LOCK = 0;

const int PY_TIMEOUT_MAX = 9223372036854775;

const int MAX_CO_EXTRA_USERS = 255;

const int PyWrapperFlag_KEYWORDS = 1;

const int Py_CLEANUP_SUPPORTED = 131072;

const int PYTHON_API_VERSION = 1013;

const String PYTHON_API_STRING = '1013';

const int PYTHON_ABI_VERSION = 3;

const String PYTHON_ABI_STRING = '3';

const int CO_OPTIMIZED = 1;

const int CO_NEWLOCALS = 2;

const int CO_VARARGS = 4;

const int CO_VARKEYWORDS = 8;

const int CO_NESTED = 16;

const int CO_GENERATOR = 32;

const int CO_NOFREE = 64;

const int CO_COROUTINE = 128;

const int CO_ITERABLE_COROUTINE = 256;

const int CO_ASYNC_GENERATOR = 512;

const int CO_FUTURE_DIVISION = 8192;

const int CO_FUTURE_ABSOLUTE_IMPORT = 16384;

const int CO_FUTURE_WITH_STATEMENT = 32768;

const int CO_FUTURE_PRINT_FUNCTION = 65536;

const int CO_FUTURE_UNICODE_LITERALS = 131072;

const int CO_FUTURE_BARRY_AS_BDFL = 262144;

const int CO_FUTURE_GENERATOR_STOP = 524288;

const int CO_FUTURE_ANNOTATIONS = 1048576;

const int CO_CELL_NOT_AN_ARG = -1;

const int CO_MAXBLOCKS = 20;

const int PyCF_MASK = 2088960;

const int PyCF_MASK_OBSOLETE = 16;

const int PyCF_SOURCE_IS_UTF8 = 256;

const int PyCF_DONT_IMPLY_DEDENT = 512;

const int PyCF_ONLY_AST = 1024;

const int PyCF_IGNORE_COOKIE = 2048;

const int PyCF_TYPE_COMMENTS = 4096;

const int PyCF_ALLOW_TOP_LEVEL_AWAIT = 8192;

const String FUTURE_NESTED_SCOPES = 'nested_scopes';

const String FUTURE_GENERATORS = 'generators';

const String FUTURE_DIVISION = 'division';

const String FUTURE_ABSOLUTE_IMPORT = 'absolute_import';

const String FUTURE_WITH_STATEMENT = 'with_statement';

const String FUTURE_PRINT_FUNCTION = 'print_function';

const String FUTURE_UNICODE_LITERALS = 'unicode_literals';

const String FUTURE_BARRY_AS_BDFL = 'barry_as_FLUFL';

const String FUTURE_GENERATOR_STOP = 'generator_stop';

const String FUTURE_ANNOTATIONS = 'annotations';

const int PY_INVALID_STACK_EFFECT = 2147483647;

const int Py_single_input = 256;

const int Py_file_input = 257;

const int Py_eval_input = 258;

const int Py_func_type_input = 345;

const int PYOS_STACK_MARGIN = 2048;

const int FVC_MASK = 3;

const int FVC_NONE = 0;

const int FVC_STR = 1;

const int FVC_REPR = 2;

const int FVC_ASCII = 3;

const int FVS_MASK = 4;

const int FVS_HAVE_SPEC = 4;

const int PY_CTF_LOWER = 1;

const int PY_CTF_UPPER = 2;

const int PY_CTF_ALPHA = 3;

const int PY_CTF_DIGIT = 4;

const int PY_CTF_ALNUM = 7;

const int PY_CTF_SPACE = 8;

const int PY_CTF_XDIGIT = 16;

const int Py_DTSF_SIGN = 1;

const int Py_DTSF_ADD_DOT_0 = 2;

const int Py_DTSF_ALT = 4;

const int Py_DTST_FINITE = 0;

const int Py_DTST_INFINITE = 1;

const int Py_DTST_NAN = 2;

const int _PY_READ_MAX = 9223372036854775807;

const int _PY_WRITE_MAX = 9223372036854775807;

typedef _c_Py_get_387controlword = ffi.Uint16 Function();

typedef _dart_Py_get_387controlword = int Function();

typedef _c_Py_set_387controlword = ffi.Void Function(
  ffi.Uint16 arg0,
);

typedef _dart_Py_set_387controlword = void Function(
  int arg0,
);

typedef _c_PyMem_Malloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 size,
);

typedef _dart_PyMem_Malloc = ffi.Pointer<ffi.Void> Function(
  int size,
);

typedef _c_PyMem_Realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> ptr,
  ffi.Uint64 new_size,
);

typedef _dart_PyMem_Realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> ptr,
  int new_size,
);

typedef _c_PyMem_Free = ffi.Void Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_PyMem_Free = void Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _c_PyType_FromSpec = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyType_Spec> arg0,
);

typedef _dart_PyType_FromSpec = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyType_Spec> arg0,
);

typedef _c_PyType_FromSpecWithBases = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyType_Spec> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyType_FromSpecWithBases = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyType_Spec> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyType_GetSlot = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<_typeobject> arg0,
  ffi.Int32 arg1,
);

typedef _dart_PyType_GetSlot = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<_typeobject> arg0,
  int arg1,
);

typedef _c_PyType_IsSubtype = ffi.Int32 Function(
  ffi.Pointer<_typeobject> arg0,
  ffi.Pointer<_typeobject> arg1,
);

typedef _dart_PyType_IsSubtype = int Function(
  ffi.Pointer<_typeobject> arg0,
  ffi.Pointer<_typeobject> arg1,
);

typedef _c_PyType_GetFlags = ffi.Uint64 Function(
  ffi.Pointer<_typeobject> arg0,
);

typedef _dart_PyType_GetFlags = int Function(
  ffi.Pointer<_typeobject> arg0,
);

typedef _c_PyType_Ready = ffi.Int32 Function(
  ffi.Pointer<_typeobject> arg0,
);

typedef _dart_PyType_Ready = int Function(
  ffi.Pointer<_typeobject> arg0,
);

typedef _c_PyType_GenericAlloc = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_typeobject> arg0,
  ffi.Int64 arg1,
);

typedef _dart_PyType_GenericAlloc = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_typeobject> arg0,
  int arg1,
);

typedef _c_PyType_GenericNew = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_typeobject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _dart_PyType_GenericNew = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_typeobject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _c_PyType_ClearCache = ffi.Uint32 Function();

typedef _dart_PyType_ClearCache = int Function();

typedef _c_PyType_Modified = ffi.Void Function(
  ffi.Pointer<_typeobject> arg0,
);

typedef _dart_PyType_Modified = void Function(
  ffi.Pointer<_typeobject> arg0,
);

typedef _c_PyObject_Repr = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyObject_Repr = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyObject_Str = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyObject_Str = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyObject_ASCII = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyObject_ASCII = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyObject_Bytes = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyObject_Bytes = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyObject_RichCompare = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Int32 arg2,
);

typedef _dart_PyObject_RichCompare = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  int arg2,
);

typedef _c_PyObject_RichCompareBool = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Int32 arg2,
);

typedef _dart_PyObject_RichCompareBool = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  int arg2,
);

typedef _c_PyObject_GetAttrString = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_PyObject_GetAttrString = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_PyObject_SetAttrString = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _dart_PyObject_SetAttrString = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _c_PyObject_HasAttrString = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_PyObject_HasAttrString = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_PyObject_GetAttr = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyObject_GetAttr = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyObject_SetAttr = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _dart_PyObject_SetAttr = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _c_PyObject_HasAttr = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyObject_HasAttr = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyObject_SelfIter = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyObject_SelfIter = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyObject_GenericGetAttr = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyObject_GenericGetAttr = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyObject_GenericSetAttr = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _dart_PyObject_GenericSetAttr = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _c_PyObject_GenericSetDict = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<ffi.Void> arg2,
);

typedef _dart_PyObject_GenericSetDict = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<ffi.Void> arg2,
);

typedef _c_PyObject_Hash = ffi.Int64 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyObject_Hash = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyObject_HashNotImplemented = ffi.Int64 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyObject_HashNotImplemented = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyObject_IsTrue = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyObject_IsTrue = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyObject_Not = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyObject_Not = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyCallable_Check = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyCallable_Check = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyObject_ClearWeakRefs = ffi.Void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyObject_ClearWeakRefs = void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyObject_Dir = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyObject_Dir = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_Py_ReprEnter = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_Py_ReprEnter = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_Py_ReprLeave = ffi.Void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_Py_ReprLeave = void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyTraceMalloc_NewReference = ffi.Int32 Function(
  ffi.Pointer<PyObject> op,
);

typedef _dart_PyTraceMalloc_NewReference = int Function(
  ffi.Pointer<PyObject> op,
);

typedef _c_Py_Dealloc = ffi.Void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_Py_Dealloc = void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_Py_IncRef = ffi.Void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_Py_IncRef = void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_Py_DecRef = ffi.Void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_Py_DecRef = void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyTrash_thread_deposit_object = ffi.Void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyTrash_thread_deposit_object = void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyTrash_thread_destroy_chain = ffi.Void Function();

typedef _dart_PyTrash_thread_destroy_chain = void Function();

typedef _c_PyLong_FromTime_t = ffi.Pointer<PyObject> Function(
  ffi.Int64 sec,
);

typedef _dart_PyLong_FromTime_t = ffi.Pointer<PyObject> Function(
  int sec,
);

typedef _c_PyLong_AsTime_t = ffi.Int64 Function(
  ffi.Pointer<PyObject> obj,
);

typedef _dart_PyLong_AsTime_t = int Function(
  ffi.Pointer<PyObject> obj,
);

typedef _c_PyTime_ObjectToTime_t = ffi.Int32 Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<ffi.Int64> sec,
  ffi.Int32 arg2,
);

typedef _dart_PyTime_ObjectToTime_t = int Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<ffi.Int64> sec,
  int arg2,
);

typedef _c_PyTime_ObjectToTimeval = ffi.Int32 Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<ffi.Int64> sec,
  ffi.Pointer<ffi.Int64> usec,
  ffi.Int32 arg3,
);

typedef _dart_PyTime_ObjectToTimeval = int Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<ffi.Int64> sec,
  ffi.Pointer<ffi.Int64> usec,
  int arg3,
);

typedef _c_PyTime_ObjectToTimespec = ffi.Int32 Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<ffi.Int64> sec,
  ffi.Pointer<ffi.Int64> nsec,
  ffi.Int32 arg3,
);

typedef _dart_PyTime_ObjectToTimespec = int Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<ffi.Int64> sec,
  ffi.Pointer<ffi.Int64> nsec,
  int arg3,
);

typedef _c_PyTime_FromSeconds = ffi.Int64 Function(
  ffi.Int32 seconds,
);

typedef _dart_PyTime_FromSeconds = int Function(
  int seconds,
);

typedef _c_PyTime_FromNanoseconds = ffi.Int64 Function(
  ffi.Int64 ns,
);

typedef _dart_PyTime_FromNanoseconds = int Function(
  int ns,
);

typedef _c_PyTime_FromNanosecondsObject = ffi.Int32 Function(
  ffi.Pointer<ffi.Int64> t,
  ffi.Pointer<PyObject> obj,
);

typedef _dart_PyTime_FromNanosecondsObject = int Function(
  ffi.Pointer<ffi.Int64> t,
  ffi.Pointer<PyObject> obj,
);

typedef _c_PyTime_FromSecondsObject = ffi.Int32 Function(
  ffi.Pointer<ffi.Int64> t,
  ffi.Pointer<PyObject> obj,
  ffi.Int32 round,
);

typedef _dart_PyTime_FromSecondsObject = int Function(
  ffi.Pointer<ffi.Int64> t,
  ffi.Pointer<PyObject> obj,
  int round,
);

typedef _c_PyTime_FromMillisecondsObject = ffi.Int32 Function(
  ffi.Pointer<ffi.Int64> t,
  ffi.Pointer<PyObject> obj,
  ffi.Int32 round,
);

typedef _dart_PyTime_FromMillisecondsObject = int Function(
  ffi.Pointer<ffi.Int64> t,
  ffi.Pointer<PyObject> obj,
  int round,
);

typedef _c_PyTime_AsSecondsDouble = ffi.Double Function(
  ffi.Int64 t,
);

typedef _dart_PyTime_AsSecondsDouble = double Function(
  int t,
);

typedef _c_PyTime_AsMilliseconds = ffi.Int64 Function(
  ffi.Int64 t,
  ffi.Int32 round,
);

typedef _dart_PyTime_AsMilliseconds = int Function(
  int t,
  int round,
);

typedef _c_PyTime_AsMicroseconds = ffi.Int64 Function(
  ffi.Int64 t,
  ffi.Int32 round,
);

typedef _dart_PyTime_AsMicroseconds = int Function(
  int t,
  int round,
);

typedef _c_PyTime_AsNanosecondsObject = ffi.Pointer<PyObject> Function(
  ffi.Int64 t,
);

typedef _dart_PyTime_AsNanosecondsObject = ffi.Pointer<PyObject> Function(
  int t,
);

typedef _c_PyTime_FromTimeval = ffi.Int32 Function(
  ffi.Pointer<ffi.Int64> tp,
  ffi.Pointer<timeval> tv,
);

typedef _dart_PyTime_FromTimeval = int Function(
  ffi.Pointer<ffi.Int64> tp,
  ffi.Pointer<timeval> tv,
);

typedef _c_PyTime_AsTimeval = ffi.Int32 Function(
  ffi.Int64 t,
  ffi.Pointer<timeval> tv,
  ffi.Int32 round,
);

typedef _dart_PyTime_AsTimeval = int Function(
  int t,
  ffi.Pointer<timeval> tv,
  int round,
);

typedef _c_PyTime_AsTimeval_noraise = ffi.Int32 Function(
  ffi.Int64 t,
  ffi.Pointer<timeval> tv,
  ffi.Int32 round,
);

typedef _dart_PyTime_AsTimeval_noraise = int Function(
  int t,
  ffi.Pointer<timeval> tv,
  int round,
);

typedef _c_PyTime_AsTimevalTime_t = ffi.Int32 Function(
  ffi.Int64 t,
  ffi.Pointer<ffi.Int64> secs,
  ffi.Pointer<ffi.Int32> us,
  ffi.Int32 round,
);

typedef _dart_PyTime_AsTimevalTime_t = int Function(
  int t,
  ffi.Pointer<ffi.Int64> secs,
  ffi.Pointer<ffi.Int32> us,
  int round,
);

typedef _c_PyTime_FromTimespec = ffi.Int32 Function(
  ffi.Pointer<ffi.Int64> tp,
  ffi.Pointer<timespec> ts,
);

typedef _dart_PyTime_FromTimespec = int Function(
  ffi.Pointer<ffi.Int64> tp,
  ffi.Pointer<timespec> ts,
);

typedef _c_PyTime_AsTimespec = ffi.Int32 Function(
  ffi.Int64 t,
  ffi.Pointer<timespec> ts,
);

typedef _dart_PyTime_AsTimespec = int Function(
  int t,
  ffi.Pointer<timespec> ts,
);

typedef _c_PyTime_MulDiv = ffi.Int64 Function(
  ffi.Int64 ticks,
  ffi.Int64 mul,
  ffi.Int64 div,
);

typedef _dart_PyTime_MulDiv = int Function(
  int ticks,
  int mul,
  int div,
);

typedef _c_PyTime_GetSystemClock = ffi.Int64 Function();

typedef _dart_PyTime_GetSystemClock = int Function();

typedef _c_PyTime_GetMonotonicClock = ffi.Int64 Function();

typedef _dart_PyTime_GetMonotonicClock = int Function();

typedef _c_PyTime_GetSystemClockWithInfo = ffi.Int32 Function(
  ffi.Pointer<ffi.Int64> t,
  ffi.Pointer<_Py_clock_info_t> info,
);

typedef _dart_PyTime_GetSystemClockWithInfo = int Function(
  ffi.Pointer<ffi.Int64> t,
  ffi.Pointer<_Py_clock_info_t> info,
);

typedef _c_PyTime_GetMonotonicClockWithInfo = ffi.Int32 Function(
  ffi.Pointer<ffi.Int64> t,
  ffi.Pointer<_Py_clock_info_t> info,
);

typedef _dart_PyTime_GetMonotonicClockWithInfo = int Function(
  ffi.Pointer<ffi.Int64> t,
  ffi.Pointer<_Py_clock_info_t> info,
);

typedef _c_PyTime_Init = ffi.Int32 Function();

typedef _dart_PyTime_Init = int Function();

typedef _c_PyTime_localtime = ffi.Int32 Function(
  ffi.Int64 t,
  ffi.Pointer<tm> tm,
);

typedef _dart_PyTime_localtime = int Function(
  int t,
  ffi.Pointer<tm> tm,
);

typedef _c_PyTime_gmtime = ffi.Int32 Function(
  ffi.Int64 t,
  ffi.Pointer<tm> tm,
);

typedef _dart_PyTime_gmtime = int Function(
  int t,
  ffi.Pointer<tm> tm,
);

typedef _c_PyTime_GetPerfCounter = ffi.Int64 Function();

typedef _dart_PyTime_GetPerfCounter = int Function();

typedef _c_PyTime_GetPerfCounterWithInfo = ffi.Int32 Function(
  ffi.Pointer<ffi.Int64> t,
  ffi.Pointer<_Py_clock_info_t> info,
);

typedef _dart_PyTime_GetPerfCounterWithInfo = int Function(
  ffi.Pointer<ffi.Int64> t,
  ffi.Pointer<_Py_clock_info_t> info,
);

typedef _c_PyObject_Malloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 size,
);

typedef _dart_PyObject_Malloc = ffi.Pointer<ffi.Void> Function(
  int size,
);

typedef _c_PyObject_Calloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 nelem,
  ffi.Uint64 elsize,
);

typedef _dart_PyObject_Calloc = ffi.Pointer<ffi.Void> Function(
  int nelem,
  int elsize,
);

typedef _c_PyObject_Realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> ptr,
  ffi.Uint64 new_size,
);

typedef _dart_PyObject_Realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> ptr,
  int new_size,
);

typedef _c_PyObject_Free = ffi.Void Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_PyObject_Free = void Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _c_PyObject_Init = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<_typeobject> arg1,
);

typedef _dart_PyObject_Init = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<_typeobject> arg1,
);

typedef _c_PyObject_InitVar = ffi.Pointer<PyVarObject> Function(
  ffi.Pointer<PyVarObject> arg0,
  ffi.Pointer<_typeobject> arg1,
  ffi.Int64 arg2,
);

typedef _dart_PyObject_InitVar = ffi.Pointer<PyVarObject> Function(
  ffi.Pointer<PyVarObject> arg0,
  ffi.Pointer<_typeobject> arg1,
  int arg2,
);

typedef _c_PyObject_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_typeobject> arg0,
);

typedef _dart_PyObject_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_typeobject> arg0,
);

typedef _c_PyObject_NewVar = ffi.Pointer<PyVarObject> Function(
  ffi.Pointer<_typeobject> arg0,
  ffi.Int64 arg1,
);

typedef _dart_PyObject_NewVar = ffi.Pointer<PyVarObject> Function(
  ffi.Pointer<_typeobject> arg0,
  int arg1,
);

typedef _c_PyGC_Collect = ffi.Int64 Function();

typedef _dart_PyGC_Collect = int Function();

typedef _c_PyObject_GC_Resize = ffi.Pointer<PyVarObject> Function(
  ffi.Pointer<PyVarObject> arg0,
  ffi.Int64 arg1,
);

typedef _dart_PyObject_GC_Resize = ffi.Pointer<PyVarObject> Function(
  ffi.Pointer<PyVarObject> arg0,
  int arg1,
);

typedef _c_PyObject_GC_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_typeobject> arg0,
);

typedef _dart_PyObject_GC_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_typeobject> arg0,
);

typedef _c_PyObject_GC_NewVar = ffi.Pointer<PyVarObject> Function(
  ffi.Pointer<_typeobject> arg0,
  ffi.Int64 arg1,
);

typedef _dart_PyObject_GC_NewVar = ffi.Pointer<PyVarObject> Function(
  ffi.Pointer<_typeobject> arg0,
  int arg1,
);

typedef _c_PyObject_GC_Track = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_PyObject_GC_Track = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_PyObject_GC_UnTrack = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_PyObject_GC_UnTrack = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_PyObject_GC_Del = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_PyObject_GC_Del = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_Py_HashDouble = ffi.Int64 Function(
  ffi.Double arg0,
);

typedef _dart_Py_HashDouble = int Function(
  double arg0,
);

typedef _c_Py_HashPointer = ffi.Int64 Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_Py_HashPointer = int Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_Py_HashBytes = ffi.Int64 Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Int64 arg1,
);

typedef _dart_Py_HashBytes = int Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef _c_PyHash_GetFuncDef = ffi.Pointer<PyHash_FuncDef> Function();

typedef _dart_PyHash_GetFuncDef = ffi.Pointer<PyHash_FuncDef> Function();

typedef _c_PyByteArray_FromObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyByteArray_FromObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyByteArray_Concat = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyByteArray_Concat = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyByteArray_FromStringAndSize = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int64 arg1,
);

typedef _dart_PyByteArray_FromStringAndSize = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_PyByteArray_Size = ffi.Int64 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyByteArray_Size = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyByteArray_AsString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyByteArray_AsString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyByteArray_Resize = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Int64 arg1,
);

typedef _dart_PyByteArray_Resize = int Function(
  ffi.Pointer<PyObject> arg0,
  int arg1,
);

typedef _c_PyBytes_FromStringAndSize = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int64 arg1,
);

typedef _dart_PyBytes_FromStringAndSize = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_PyBytes_FromString = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_PyBytes_FromString = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_PyBytes_FromObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyBytes_FromObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyBytes_FromFormatV = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<__va_list_tag> arg1,
);

typedef _dart_PyBytes_FromFormatV = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<__va_list_tag> arg1,
);

typedef _c_PyBytes_FromFormat = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_PyBytes_FromFormat = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_PyBytes_Size = ffi.Int64 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyBytes_Size = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyBytes_AsString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyBytes_AsString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyBytes_Repr = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Int32 arg1,
);

typedef _dart_PyBytes_Repr = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  int arg1,
);

typedef _c_PyBytes_Concat = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<PyObject>> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyBytes_Concat = void Function(
  ffi.Pointer<ffi.Pointer<PyObject>> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyBytes_ConcatAndDel = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<PyObject>> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyBytes_ConcatAndDel = void Function(
  ffi.Pointer<ffi.Pointer<PyObject>> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyBytes_Resize = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<PyObject>> arg0,
  ffi.Int64 arg1,
);

typedef _dart_PyBytes_Resize = int Function(
  ffi.Pointer<ffi.Pointer<PyObject>> arg0,
  int arg1,
);

typedef _c_PyBytes_FormatEx = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> format,
  ffi.Int64 format_len,
  ffi.Pointer<PyObject> args,
  ffi.Int32 use_bytearray,
);

typedef _dart_PyBytes_FormatEx = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> format,
  int format_len,
  ffi.Pointer<PyObject> args,
  int use_bytearray,
);

typedef _c_PyBytes_FromHex = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> string,
  ffi.Int32 use_bytearray,
);

typedef _dart_PyBytes_FromHex = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> string,
  int use_bytearray,
);

typedef _c_PyBytes_DecodeEscape = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Int64 arg3,
  ffi.Pointer<ffi.Int8> arg4,
);

typedef _dart_PyBytes_DecodeEscape = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  int arg3,
  ffi.Pointer<ffi.Int8> arg4,
);

typedef _c_PyBytes_DecodeEscape_1 = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Int64 arg3,
  ffi.Pointer<ffi.Int8> arg4,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg5,
);

typedef _dart_PyBytes_DecodeEscape_1 = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  int arg3,
  ffi.Pointer<ffi.Int8> arg4,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg5,
);

typedef _c_PyBytes_Join = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> sep,
  ffi.Pointer<PyObject> x,
);

typedef _dart_PyBytes_Join = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> sep,
  ffi.Pointer<PyObject> x,
);

typedef _c_PyBytes_AsStringAndSize = ffi.Int32 Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> s,
  ffi.Pointer<ffi.Int64> len,
);

typedef _dart_PyBytes_AsStringAndSize = int Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> s,
  ffi.Pointer<ffi.Int64> len,
);

typedef _c_PyBytes_InsertThousandsGroupingLocale = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> buffer,
  ffi.Int64 n_buffer,
  ffi.Pointer<ffi.Int8> digits,
  ffi.Int64 n_digits,
  ffi.Int64 min_width,
);

typedef _dart_PyBytes_InsertThousandsGroupingLocale = int Function(
  ffi.Pointer<ffi.Int8> buffer,
  int n_buffer,
  ffi.Pointer<ffi.Int8> digits,
  int n_digits,
  int min_width,
);

typedef _c_PyBytes_InsertThousandsGrouping = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> buffer,
  ffi.Int64 n_buffer,
  ffi.Pointer<ffi.Int8> digits,
  ffi.Int64 n_digits,
  ffi.Int64 min_width,
  ffi.Pointer<ffi.Int8> grouping,
  ffi.Pointer<ffi.Int8> thousands_sep,
);

typedef _dart_PyBytes_InsertThousandsGrouping = int Function(
  ffi.Pointer<ffi.Int8> buffer,
  int n_buffer,
  ffi.Pointer<ffi.Int8> digits,
  int n_digits,
  int min_width,
  ffi.Pointer<ffi.Int8> grouping,
  ffi.Pointer<ffi.Int8> thousands_sep,
);

typedef _c_PyBytesWriter_Init = ffi.Void Function(
  ffi.Pointer<_PyBytesWriter> writer,
);

typedef _dart_PyBytesWriter_Init = void Function(
  ffi.Pointer<_PyBytesWriter> writer,
);

typedef _c_PyBytesWriter_Finish = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_PyBytesWriter> writer,
  ffi.Pointer<ffi.Void> str,
);

typedef _dart_PyBytesWriter_Finish = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_PyBytesWriter> writer,
  ffi.Pointer<ffi.Void> str,
);

typedef _c_PyBytesWriter_Dealloc = ffi.Void Function(
  ffi.Pointer<_PyBytesWriter> writer,
);

typedef _dart_PyBytesWriter_Dealloc = void Function(
  ffi.Pointer<_PyBytesWriter> writer,
);

typedef _c_PyBytesWriter_Alloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<_PyBytesWriter> writer,
  ffi.Int64 size,
);

typedef _dart_PyBytesWriter_Alloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<_PyBytesWriter> writer,
  int size,
);

typedef _c_PyBytesWriter_Prepare = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<_PyBytesWriter> writer,
  ffi.Pointer<ffi.Void> str,
  ffi.Int64 size,
);

typedef _dart_PyBytesWriter_Prepare = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<_PyBytesWriter> writer,
  ffi.Pointer<ffi.Void> str,
  int size,
);

typedef _c_PyBytesWriter_Resize = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<_PyBytesWriter> writer,
  ffi.Pointer<ffi.Void> str,
  ffi.Int64 size,
);

typedef _dart_PyBytesWriter_Resize = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<_PyBytesWriter> writer,
  ffi.Pointer<ffi.Void> str,
  int size,
);

typedef _c_PyBytesWriter_WriteBytes = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<_PyBytesWriter> writer,
  ffi.Pointer<ffi.Void> str,
  ffi.Pointer<ffi.Void> bytes,
  ffi.Int64 size,
);

typedef _dart_PyBytesWriter_WriteBytes = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<_PyBytesWriter> writer,
  ffi.Pointer<ffi.Void> str,
  ffi.Pointer<ffi.Void> bytes,
  int size,
);

typedef _c_PyUnicode_FromStringAndSize = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> u,
  ffi.Int64 size,
);

typedef _dart_PyUnicode_FromStringAndSize = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> u,
  int size,
);

typedef _c_PyUnicode_FromString = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> u,
);

typedef _dart_PyUnicode_FromString = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> u,
);

typedef _c_PyUnicode_Substring = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> str,
  ffi.Int64 start,
  ffi.Int64 end,
);

typedef _dart_PyUnicode_Substring = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> str,
  int start,
  int end,
);

typedef _c_PyUnicode_AsUCS4 = ffi.Pointer<ffi.Uint32> Function(
  ffi.Pointer<PyObject> unicode,
  ffi.Pointer<ffi.Uint32> buffer,
  ffi.Int64 buflen,
  ffi.Int32 copy_null,
);

typedef _dart_PyUnicode_AsUCS4 = ffi.Pointer<ffi.Uint32> Function(
  ffi.Pointer<PyObject> unicode,
  ffi.Pointer<ffi.Uint32> buffer,
  int buflen,
  int copy_null,
);

typedef _c_PyUnicode_AsUCS4Copy = ffi.Pointer<ffi.Uint32> Function(
  ffi.Pointer<PyObject> unicode,
);

typedef _dart_PyUnicode_AsUCS4Copy = ffi.Pointer<ffi.Uint32> Function(
  ffi.Pointer<PyObject> unicode,
);

typedef _c_PyUnicode_GetLength = ffi.Int64 Function(
  ffi.Pointer<PyObject> unicode,
);

typedef _dart_PyUnicode_GetLength = int Function(
  ffi.Pointer<PyObject> unicode,
);

typedef _c_PyUnicode_GetSize = ffi.Int64 Function(
  ffi.Pointer<PyObject> unicode,
);

typedef _dart_PyUnicode_GetSize = int Function(
  ffi.Pointer<PyObject> unicode,
);

typedef _c_PyUnicode_ReadChar = ffi.Uint32 Function(
  ffi.Pointer<PyObject> unicode,
  ffi.Int64 index,
);

typedef _dart_PyUnicode_ReadChar = int Function(
  ffi.Pointer<PyObject> unicode,
  int index,
);

typedef _c_PyUnicode_WriteChar = ffi.Int32 Function(
  ffi.Pointer<PyObject> unicode,
  ffi.Int64 index,
  ffi.Uint32 character,
);

typedef _dart_PyUnicode_WriteChar = int Function(
  ffi.Pointer<PyObject> unicode,
  int index,
  int character,
);

typedef _c_PyUnicode_Resize = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<PyObject>> unicode,
  ffi.Int64 length,
);

typedef _dart_PyUnicode_Resize = int Function(
  ffi.Pointer<ffi.Pointer<PyObject>> unicode,
  int length,
);

typedef _c_PyUnicode_FromEncodedObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyUnicode_FromEncodedObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyUnicode_FromObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> obj,
);

typedef _dart_PyUnicode_FromObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> obj,
);

typedef _c_PyUnicode_FromFormatV = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> format,
  ffi.Pointer<__va_list_tag> vargs,
);

typedef _dart_PyUnicode_FromFormatV = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> format,
  ffi.Pointer<__va_list_tag> vargs,
);

typedef _c_PyUnicode_FromFormat = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_PyUnicode_FromFormat = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_PyUnicode_InternInPlace = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<PyObject>> arg0,
);

typedef _dart_PyUnicode_InternInPlace = void Function(
  ffi.Pointer<ffi.Pointer<PyObject>> arg0,
);

typedef _c_PyUnicode_InternImmortal = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<PyObject>> arg0,
);

typedef _dart_PyUnicode_InternImmortal = void Function(
  ffi.Pointer<ffi.Pointer<PyObject>> arg0,
);

typedef _c_PyUnicode_InternFromString = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> u,
);

typedef _dart_PyUnicode_InternFromString = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> u,
);

typedef _c_PyUnicode_FromWideChar = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int32> w,
  ffi.Int64 size,
);

typedef _dart_PyUnicode_FromWideChar = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int32> w,
  int size,
);

typedef _c_PyUnicode_AsWideChar = ffi.Int64 Function(
  ffi.Pointer<PyObject> unicode,
  ffi.Pointer<ffi.Int32> w,
  ffi.Int64 size,
);

typedef _dart_PyUnicode_AsWideChar = int Function(
  ffi.Pointer<PyObject> unicode,
  ffi.Pointer<ffi.Int32> w,
  int size,
);

typedef _c_PyUnicode_AsWideCharString = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<PyObject> unicode,
  ffi.Pointer<ffi.Int64> size,
);

typedef _dart_PyUnicode_AsWideCharString = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<PyObject> unicode,
  ffi.Pointer<ffi.Int64> size,
);

typedef _c_PyUnicode_FromOrdinal = ffi.Pointer<PyObject> Function(
  ffi.Int32 ordinal,
);

typedef _dart_PyUnicode_FromOrdinal = ffi.Pointer<PyObject> Function(
  int ordinal,
);

typedef _c_PyUnicode_ClearFreeList = ffi.Int32 Function();

typedef _dart_PyUnicode_ClearFreeList = int Function();

typedef _c_PyUnicode_GetDefaultEncoding = ffi.Pointer<ffi.Int8> Function();

typedef _dart_PyUnicode_GetDefaultEncoding = ffi.Pointer<ffi.Int8> Function();

typedef _c_PyUnicode_Decode = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> s,
  ffi.Int64 size,
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyUnicode_Decode = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> s,
  int size,
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyUnicode_AsDecodedObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyUnicode_AsDecodedObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyUnicode_AsDecodedUnicode = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyUnicode_AsDecodedUnicode = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyUnicode_AsEncodedObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyUnicode_AsEncodedObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyUnicode_AsEncodedString = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyUnicode_AsEncodedString = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyUnicode_AsEncodedUnicode = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyUnicode_AsEncodedUnicode = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyUnicode_BuildEncodingMap = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> string,
);

typedef _dart_PyUnicode_BuildEncodingMap = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> string,
);

typedef _c_PyUnicode_DecodeUTF7 = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  ffi.Int64 length,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyUnicode_DecodeUTF7 = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  int length,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyUnicode_DecodeUTF7Stateful = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  ffi.Int64 length,
  ffi.Pointer<ffi.Int8> errors,
  ffi.Pointer<ffi.Int64> consumed,
);

typedef _dart_PyUnicode_DecodeUTF7Stateful = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  int length,
  ffi.Pointer<ffi.Int8> errors,
  ffi.Pointer<ffi.Int64> consumed,
);

typedef _c_PyUnicode_DecodeUTF8 = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  ffi.Int64 length,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyUnicode_DecodeUTF8 = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  int length,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyUnicode_DecodeUTF8Stateful = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  ffi.Int64 length,
  ffi.Pointer<ffi.Int8> errors,
  ffi.Pointer<ffi.Int64> consumed,
);

typedef _dart_PyUnicode_DecodeUTF8Stateful = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  int length,
  ffi.Pointer<ffi.Int8> errors,
  ffi.Pointer<ffi.Int64> consumed,
);

typedef _c_PyUnicode_AsUTF8String = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
);

typedef _dart_PyUnicode_AsUTF8String = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
);

typedef _c_PyUnicode_DecodeUTF32 = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  ffi.Int64 length,
  ffi.Pointer<ffi.Int8> errors,
  ffi.Pointer<ffi.Int32> byteorder,
);

typedef _dart_PyUnicode_DecodeUTF32 = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  int length,
  ffi.Pointer<ffi.Int8> errors,
  ffi.Pointer<ffi.Int32> byteorder,
);

typedef _c_PyUnicode_DecodeUTF32Stateful = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  ffi.Int64 length,
  ffi.Pointer<ffi.Int8> errors,
  ffi.Pointer<ffi.Int32> byteorder,
  ffi.Pointer<ffi.Int64> consumed,
);

typedef _dart_PyUnicode_DecodeUTF32Stateful = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  int length,
  ffi.Pointer<ffi.Int8> errors,
  ffi.Pointer<ffi.Int32> byteorder,
  ffi.Pointer<ffi.Int64> consumed,
);

typedef _c_PyUnicode_AsUTF32String = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
);

typedef _dart_PyUnicode_AsUTF32String = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
);

typedef _c_PyUnicode_DecodeUTF16 = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  ffi.Int64 length,
  ffi.Pointer<ffi.Int8> errors,
  ffi.Pointer<ffi.Int32> byteorder,
);

typedef _dart_PyUnicode_DecodeUTF16 = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  int length,
  ffi.Pointer<ffi.Int8> errors,
  ffi.Pointer<ffi.Int32> byteorder,
);

typedef _c_PyUnicode_DecodeUTF16Stateful = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  ffi.Int64 length,
  ffi.Pointer<ffi.Int8> errors,
  ffi.Pointer<ffi.Int32> byteorder,
  ffi.Pointer<ffi.Int64> consumed,
);

typedef _dart_PyUnicode_DecodeUTF16Stateful = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  int length,
  ffi.Pointer<ffi.Int8> errors,
  ffi.Pointer<ffi.Int32> byteorder,
  ffi.Pointer<ffi.Int64> consumed,
);

typedef _c_PyUnicode_AsUTF16String = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
);

typedef _dart_PyUnicode_AsUTF16String = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
);

typedef _c_PyUnicode_DecodeUnicodeEscape = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  ffi.Int64 length,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyUnicode_DecodeUnicodeEscape = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  int length,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyUnicode_AsUnicodeEscapeString = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
);

typedef _dart_PyUnicode_AsUnicodeEscapeString = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
);

typedef _c_PyUnicode_DecodeRawUnicodeEscape = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  ffi.Int64 length,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyUnicode_DecodeRawUnicodeEscape = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  int length,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyUnicode_AsRawUnicodeEscapeString = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
);

typedef _dart_PyUnicode_AsRawUnicodeEscapeString = ffi.Pointer<PyObject>
    Function(
  ffi.Pointer<PyObject> unicode,
);

typedef _c_PyUnicode_DecodeLatin1 = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  ffi.Int64 length,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyUnicode_DecodeLatin1 = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  int length,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyUnicode_AsLatin1String = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
);

typedef _dart_PyUnicode_AsLatin1String = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
);

typedef _c_PyUnicode_DecodeASCII = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  ffi.Int64 length,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyUnicode_DecodeASCII = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  int length,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyUnicode_AsASCIIString = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
);

typedef _dart_PyUnicode_AsASCIIString = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
);

typedef _c_PyUnicode_DecodeCharmap = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  ffi.Int64 length,
  ffi.Pointer<PyObject> mapping,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyUnicode_DecodeCharmap = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> string,
  int length,
  ffi.Pointer<PyObject> mapping,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyUnicode_AsCharmapString = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
  ffi.Pointer<PyObject> mapping,
);

typedef _dart_PyUnicode_AsCharmapString = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
  ffi.Pointer<PyObject> mapping,
);

typedef _c_PyUnicode_DecodeLocaleAndSize = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Int64 len,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyUnicode_DecodeLocaleAndSize = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> str,
  int len,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyUnicode_DecodeLocale = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyUnicode_DecodeLocale = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyUnicode_EncodeLocale = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyUnicode_EncodeLocale = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyUnicode_FSConverter = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart_PyUnicode_FSConverter = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _c_PyUnicode_FSDecoder = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart_PyUnicode_FSDecoder = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _c_PyUnicode_DecodeFSDefault = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> s,
);

typedef _dart_PyUnicode_DecodeFSDefault = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> s,
);

typedef _c_PyUnicode_DecodeFSDefaultAndSize = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> s,
  ffi.Int64 size,
);

typedef _dart_PyUnicode_DecodeFSDefaultAndSize = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> s,
  int size,
);

typedef _c_PyUnicode_EncodeFSDefault = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
);

typedef _dart_PyUnicode_EncodeFSDefault = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> unicode,
);

typedef _c_PyUnicode_Concat = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> left,
  ffi.Pointer<PyObject> right,
);

typedef _dart_PyUnicode_Concat = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> left,
  ffi.Pointer<PyObject> right,
);

typedef _c_PyUnicode_Append = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<PyObject>> pleft,
  ffi.Pointer<PyObject> right,
);

typedef _dart_PyUnicode_Append = void Function(
  ffi.Pointer<ffi.Pointer<PyObject>> pleft,
  ffi.Pointer<PyObject> right,
);

typedef _c_PyUnicode_AppendAndDel = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<PyObject>> pleft,
  ffi.Pointer<PyObject> right,
);

typedef _dart_PyUnicode_AppendAndDel = void Function(
  ffi.Pointer<ffi.Pointer<PyObject>> pleft,
  ffi.Pointer<PyObject> right,
);

typedef _c_PyUnicode_Split = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> s,
  ffi.Pointer<PyObject> sep,
  ffi.Int64 maxsplit,
);

typedef _dart_PyUnicode_Split = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> s,
  ffi.Pointer<PyObject> sep,
  int maxsplit,
);

typedef _c_PyUnicode_Splitlines = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> s,
  ffi.Int32 keepends,
);

typedef _dart_PyUnicode_Splitlines = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> s,
  int keepends,
);

typedef _c_PyUnicode_Partition = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> s,
  ffi.Pointer<PyObject> sep,
);

typedef _dart_PyUnicode_Partition = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> s,
  ffi.Pointer<PyObject> sep,
);

typedef _c_PyUnicode_RPartition = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> s,
  ffi.Pointer<PyObject> sep,
);

typedef _dart_PyUnicode_RPartition = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> s,
  ffi.Pointer<PyObject> sep,
);

typedef _c_PyUnicode_RSplit = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> s,
  ffi.Pointer<PyObject> sep,
  ffi.Int64 maxsplit,
);

typedef _dart_PyUnicode_RSplit = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> s,
  ffi.Pointer<PyObject> sep,
  int maxsplit,
);

typedef _c_PyUnicode_Translate = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> str,
  ffi.Pointer<PyObject> table,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyUnicode_Translate = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> str,
  ffi.Pointer<PyObject> table,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyUnicode_Join = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> separator,
  ffi.Pointer<PyObject> seq,
);

typedef _dart_PyUnicode_Join = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> separator,
  ffi.Pointer<PyObject> seq,
);

typedef _c_PyUnicode_Tailmatch = ffi.Int64 Function(
  ffi.Pointer<PyObject> str,
  ffi.Pointer<PyObject> substr,
  ffi.Int64 start,
  ffi.Int64 end,
  ffi.Int32 direction,
);

typedef _dart_PyUnicode_Tailmatch = int Function(
  ffi.Pointer<PyObject> str,
  ffi.Pointer<PyObject> substr,
  int start,
  int end,
  int direction,
);

typedef _c_PyUnicode_Find = ffi.Int64 Function(
  ffi.Pointer<PyObject> str,
  ffi.Pointer<PyObject> substr,
  ffi.Int64 start,
  ffi.Int64 end,
  ffi.Int32 direction,
);

typedef _dart_PyUnicode_Find = int Function(
  ffi.Pointer<PyObject> str,
  ffi.Pointer<PyObject> substr,
  int start,
  int end,
  int direction,
);

typedef _c_PyUnicode_FindChar = ffi.Int64 Function(
  ffi.Pointer<PyObject> str,
  ffi.Uint32 ch,
  ffi.Int64 start,
  ffi.Int64 end,
  ffi.Int32 direction,
);

typedef _dart_PyUnicode_FindChar = int Function(
  ffi.Pointer<PyObject> str,
  int ch,
  int start,
  int end,
  int direction,
);

typedef _c_PyUnicode_Count = ffi.Int64 Function(
  ffi.Pointer<PyObject> str,
  ffi.Pointer<PyObject> substr,
  ffi.Int64 start,
  ffi.Int64 end,
);

typedef _dart_PyUnicode_Count = int Function(
  ffi.Pointer<PyObject> str,
  ffi.Pointer<PyObject> substr,
  int start,
  int end,
);

typedef _c_PyUnicode_Replace = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> str,
  ffi.Pointer<PyObject> substr,
  ffi.Pointer<PyObject> replstr,
  ffi.Int64 maxcount,
);

typedef _dart_PyUnicode_Replace = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> str,
  ffi.Pointer<PyObject> substr,
  ffi.Pointer<PyObject> replstr,
  int maxcount,
);

typedef _c_PyUnicode_Compare = ffi.Int32 Function(
  ffi.Pointer<PyObject> left,
  ffi.Pointer<PyObject> right,
);

typedef _dart_PyUnicode_Compare = int Function(
  ffi.Pointer<PyObject> left,
  ffi.Pointer<PyObject> right,
);

typedef _c_PyUnicode_CompareWithASCIIString = ffi.Int32 Function(
  ffi.Pointer<PyObject> left,
  ffi.Pointer<ffi.Int8> right,
);

typedef _dart_PyUnicode_CompareWithASCIIString = int Function(
  ffi.Pointer<PyObject> left,
  ffi.Pointer<ffi.Int8> right,
);

typedef _c_PyUnicode_RichCompare = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> left,
  ffi.Pointer<PyObject> right,
  ffi.Int32 op,
);

typedef _dart_PyUnicode_RichCompare = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> left,
  ffi.Pointer<PyObject> right,
  int op,
);

typedef _c_PyUnicode_Format = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> format,
  ffi.Pointer<PyObject> args,
);

typedef _dart_PyUnicode_Format = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> format,
  ffi.Pointer<PyObject> args,
);

typedef _c_PyUnicode_Contains = ffi.Int32 Function(
  ffi.Pointer<PyObject> container,
  ffi.Pointer<PyObject> element,
);

typedef _dart_PyUnicode_Contains = int Function(
  ffi.Pointer<PyObject> container,
  ffi.Pointer<PyObject> element,
);

typedef _c_PyUnicode_IsIdentifier = ffi.Int32 Function(
  ffi.Pointer<PyObject> s,
);

typedef _dart_PyUnicode_IsIdentifier = int Function(
  ffi.Pointer<PyObject> s,
);

typedef _c_PyLong_FromLong = ffi.Pointer<PyObject> Function(
  ffi.Int64 arg0,
);

typedef _dart_PyLong_FromLong = ffi.Pointer<PyObject> Function(
  int arg0,
);

typedef _c_PyLong_FromUnsignedLong = ffi.Pointer<PyObject> Function(
  ffi.Uint64 arg0,
);

typedef _dart_PyLong_FromUnsignedLong = ffi.Pointer<PyObject> Function(
  int arg0,
);

typedef _c_PyLong_FromSize_t = ffi.Pointer<PyObject> Function(
  ffi.Uint64 arg0,
);

typedef _dart_PyLong_FromSize_t = ffi.Pointer<PyObject> Function(
  int arg0,
);

typedef _c_PyLong_FromSsize_t = ffi.Pointer<PyObject> Function(
  ffi.Int64 arg0,
);

typedef _dart_PyLong_FromSsize_t = ffi.Pointer<PyObject> Function(
  int arg0,
);

typedef _c_PyLong_FromDouble = ffi.Pointer<PyObject> Function(
  ffi.Double arg0,
);

typedef _dart_PyLong_FromDouble = ffi.Pointer<PyObject> Function(
  double arg0,
);

typedef _c_PyLong_AsLong = ffi.Int64 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyLong_AsLong = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyLong_AsLongAndOverflow = ffi.Int64 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_PyLong_AsLongAndOverflow = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_PyLong_AsSsize_t = ffi.Int64 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyLong_AsSsize_t = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyLong_AsSize_t = ffi.Uint64 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyLong_AsSize_t = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyLong_AsUnsignedLong = ffi.Uint64 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyLong_AsUnsignedLong = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyLong_AsUnsignedLongMask = ffi.Uint64 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyLong_AsUnsignedLongMask = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyLong_AsInt = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyLong_AsInt = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyLong_GetInfo = ffi.Pointer<PyObject> Function();

typedef _dart_PyLong_GetInfo = ffi.Pointer<PyObject> Function();

typedef _c_PyLong_UnsignedShort_Converter = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart_PyLong_UnsignedShort_Converter = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _c_PyLong_UnsignedInt_Converter = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart_PyLong_UnsignedInt_Converter = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _c_PyLong_UnsignedLong_Converter = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart_PyLong_UnsignedLong_Converter = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _c_PyLong_UnsignedLongLong_Converter = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart_PyLong_UnsignedLongLong_Converter = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _c_PyLong_Size_t_Converter = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart_PyLong_Size_t_Converter = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _c_PyLong_Frexp = ffi.Double Function(
  ffi.Pointer<_longobject> a,
  ffi.Pointer<ffi.Int64> e,
);

typedef _dart_PyLong_Frexp = double Function(
  ffi.Pointer<_longobject> a,
  ffi.Pointer<ffi.Int64> e,
);

typedef _c_PyLong_AsDouble = ffi.Double Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyLong_AsDouble = double Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyLong_FromVoidPtr = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_PyLong_FromVoidPtr = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_PyLong_AsVoidPtr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyLong_AsVoidPtr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyLong_FromLongLong = ffi.Pointer<PyObject> Function(
  ffi.Int64 arg0,
);

typedef _dart_PyLong_FromLongLong = ffi.Pointer<PyObject> Function(
  int arg0,
);

typedef _c_PyLong_FromUnsignedLongLong = ffi.Pointer<PyObject> Function(
  ffi.Uint64 arg0,
);

typedef _dart_PyLong_FromUnsignedLongLong = ffi.Pointer<PyObject> Function(
  int arg0,
);

typedef _c_PyLong_AsLongLong = ffi.Int64 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyLong_AsLongLong = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyLong_AsUnsignedLongLong = ffi.Uint64 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyLong_AsUnsignedLongLong = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyLong_AsUnsignedLongLongMask = ffi.Uint64 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyLong_AsUnsignedLongLongMask = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyLong_AsLongLongAndOverflow = ffi.Int64 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_PyLong_AsLongLongAndOverflow = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_PyLong_FromString = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Int32 arg2,
);

typedef _dart_PyLong_FromString = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  int arg2,
);

typedef _c_PyLong_FromUnicode = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Int64 arg1,
  ffi.Int32 arg2,
);

typedef _dart_PyLong_FromUnicode = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int32> arg0,
  int arg1,
  int arg2,
);

typedef _c_PyLong_FromUnicodeObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> u,
  ffi.Int32 base,
);

typedef _dart_PyLong_FromUnicodeObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> u,
  int base,
);

typedef _c_PyLong_FromBytes = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int64 arg1,
  ffi.Int32 arg2,
);

typedef _dart_PyLong_FromBytes = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
);

typedef _c_PyLong_Sign = ffi.Int32 Function(
  ffi.Pointer<PyObject> v,
);

typedef _dart_PyLong_Sign = int Function(
  ffi.Pointer<PyObject> v,
);

typedef _c_PyLong_NumBits = ffi.Uint64 Function(
  ffi.Pointer<PyObject> v,
);

typedef _dart_PyLong_NumBits = int Function(
  ffi.Pointer<PyObject> v,
);

typedef _c_PyLong_DivmodNear = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyLong_DivmodNear = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyLong_FromByteArray = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Uint8> bytes,
  ffi.Uint64 n,
  ffi.Int32 little_endian,
  ffi.Int32 is_signed,
);

typedef _dart_PyLong_FromByteArray = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Uint8> bytes,
  int n,
  int little_endian,
  int is_signed,
);

typedef _c_PyLong_AsByteArray = ffi.Int32 Function(
  ffi.Pointer<_longobject> v,
  ffi.Pointer<ffi.Uint8> bytes,
  ffi.Uint64 n,
  ffi.Int32 little_endian,
  ffi.Int32 is_signed,
);

typedef _dart_PyLong_AsByteArray = int Function(
  ffi.Pointer<_longobject> v,
  ffi.Pointer<ffi.Uint8> bytes,
  int n,
  int little_endian,
  int is_signed,
);

typedef _c_PyLong_FromNbInt = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyLong_FromNbInt = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyLong_FromNbIndexOrNbInt = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyLong_FromNbIndexOrNbInt = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyLong_Format = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> obj,
  ffi.Int32 base,
);

typedef _dart_PyLong_Format = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> obj,
  int base,
);

typedef _c_PyLong_FormatWriter = ffi.Int32 Function(
  ffi.Pointer<_PyUnicodeWriter> writer,
  ffi.Pointer<PyObject> obj,
  ffi.Int32 base,
  ffi.Int32 alternate,
);

typedef _dart_PyLong_FormatWriter = int Function(
  ffi.Pointer<_PyUnicodeWriter> writer,
  ffi.Pointer<PyObject> obj,
  int base,
  int alternate,
);

typedef _c_PyLong_FormatBytesWriter = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_PyBytesWriter> writer,
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<PyObject> obj,
  ffi.Int32 base,
  ffi.Int32 alternate,
);

typedef _dart_PyLong_FormatBytesWriter = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_PyBytesWriter> writer,
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<PyObject> obj,
  int base,
  int alternate,
);

typedef _c_PyLong_FormatAdvancedWriter = ffi.Int32 Function(
  ffi.Pointer<_PyUnicodeWriter> writer,
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<PyObject> format_spec,
  ffi.Int64 start,
  ffi.Int64 end,
);

typedef _dart_PyLong_FormatAdvancedWriter = int Function(
  ffi.Pointer<_PyUnicodeWriter> writer,
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<PyObject> format_spec,
  int start,
  int end,
);

typedef _c_PyOS_strtoul = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Int32 arg2,
);

typedef _dart_PyOS_strtoul = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  int arg2,
);

typedef _c_PyOS_strtol = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Int32 arg2,
);

typedef _dart_PyOS_strtol = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  int arg2,
);

typedef _c_PyLong_GCD = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyLong_GCD = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyLong_Rshift = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_PyLong_Rshift = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  int arg1,
);

typedef _c_PyLong_Lshift = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_PyLong_Lshift = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  int arg1,
);

typedef _c_PyLong_New = ffi.Pointer<_longobject> Function(
  ffi.Int64 arg0,
);

typedef _dart_PyLong_New = ffi.Pointer<_longobject> Function(
  int arg0,
);

typedef _c_PyLong_Copy = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_longobject> src,
);

typedef _dart_PyLong_Copy = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_longobject> src,
);

typedef _c_PyBool_FromLong = ffi.Pointer<PyObject> Function(
  ffi.Int64 arg0,
);

typedef _dart_PyBool_FromLong = ffi.Pointer<PyObject> Function(
  int arg0,
);

typedef _c_PyFloat_GetMax = ffi.Double Function();

typedef _dart_PyFloat_GetMax = double Function();

typedef _c_PyFloat_GetMin = ffi.Double Function();

typedef _dart_PyFloat_GetMin = double Function();

typedef _c_PyFloat_GetInfo = ffi.Pointer<PyObject> Function();

typedef _dart_PyFloat_GetInfo = ffi.Pointer<PyObject> Function();

typedef _c_PyFloat_FromString = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyFloat_FromString = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyFloat_FromDouble = ffi.Pointer<PyObject> Function(
  ffi.Double arg0,
);

typedef _dart_PyFloat_FromDouble = ffi.Pointer<PyObject> Function(
  double arg0,
);

typedef _c_PyFloat_AsDouble = ffi.Double Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyFloat_AsDouble = double Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyFloat_Pack2 = ffi.Int32 Function(
  ffi.Double x,
  ffi.Pointer<ffi.Uint8> p,
  ffi.Int32 le,
);

typedef _dart_PyFloat_Pack2 = int Function(
  double x,
  ffi.Pointer<ffi.Uint8> p,
  int le,
);

typedef _c_PyFloat_Pack4 = ffi.Int32 Function(
  ffi.Double x,
  ffi.Pointer<ffi.Uint8> p,
  ffi.Int32 le,
);

typedef _dart_PyFloat_Pack4 = int Function(
  double x,
  ffi.Pointer<ffi.Uint8> p,
  int le,
);

typedef _c_PyFloat_Pack8 = ffi.Int32 Function(
  ffi.Double x,
  ffi.Pointer<ffi.Uint8> p,
  ffi.Int32 le,
);

typedef _dart_PyFloat_Pack8 = int Function(
  double x,
  ffi.Pointer<ffi.Uint8> p,
  int le,
);

typedef _c_PyFloat_Repr = ffi.Int32 Function(
  ffi.Double x,
  ffi.Pointer<ffi.Int8> p,
  ffi.Uint64 len,
);

typedef _dart_PyFloat_Repr = int Function(
  double x,
  ffi.Pointer<ffi.Int8> p,
  int len,
);

typedef _c_PyFloat_Digits = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> buf,
  ffi.Double v,
  ffi.Pointer<ffi.Int32> signum,
);

typedef _dart_PyFloat_Digits = int Function(
  ffi.Pointer<ffi.Int8> buf,
  double v,
  ffi.Pointer<ffi.Int32> signum,
);

typedef _c_PyFloat_DigitsInit = ffi.Void Function();

typedef _dart_PyFloat_DigitsInit = void Function();

typedef _c_PyFloat_Unpack2 = ffi.Double Function(
  ffi.Pointer<ffi.Uint8> p,
  ffi.Int32 le,
);

typedef _dart_PyFloat_Unpack2 = double Function(
  ffi.Pointer<ffi.Uint8> p,
  int le,
);

typedef _c_PyFloat_Unpack4 = ffi.Double Function(
  ffi.Pointer<ffi.Uint8> p,
  ffi.Int32 le,
);

typedef _dart_PyFloat_Unpack4 = double Function(
  ffi.Pointer<ffi.Uint8> p,
  int le,
);

typedef _c_PyFloat_Unpack8 = ffi.Double Function(
  ffi.Pointer<ffi.Uint8> p,
  ffi.Int32 le,
);

typedef _dart_PyFloat_Unpack8 = double Function(
  ffi.Pointer<ffi.Uint8> p,
  int le,
);

typedef _c_PyFloat_ClearFreeList = ffi.Int32 Function();

typedef _dart_PyFloat_ClearFreeList = int Function();

typedef _c_PyFloat_DebugMallocStats = ffi.Void Function(
  ffi.Pointer<FILE> out,
);

typedef _dart_PyFloat_DebugMallocStats = void Function(
  ffi.Pointer<FILE> out,
);

typedef _c_PyFloat_FormatAdvancedWriter = ffi.Int32 Function(
  ffi.Pointer<_PyUnicodeWriter> writer,
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<PyObject> format_spec,
  ffi.Int64 start,
  ffi.Int64 end,
);

typedef _dart_PyFloat_FormatAdvancedWriter = int Function(
  ffi.Pointer<_PyUnicodeWriter> writer,
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<PyObject> format_spec,
  int start,
  int end,
);

typedef _c_Py_c_sum = Py_complex Function(
  Py_complex arg0,
  Py_complex arg1,
);

typedef _dart_Py_c_sum = Py_complex Function(
  Py_complex arg0,
  Py_complex arg1,
);

typedef _c_Py_c_diff = Py_complex Function(
  Py_complex arg0,
  Py_complex arg1,
);

typedef _dart_Py_c_diff = Py_complex Function(
  Py_complex arg0,
  Py_complex arg1,
);

typedef _c_Py_c_neg = Py_complex Function(
  Py_complex arg0,
);

typedef _dart_Py_c_neg = Py_complex Function(
  Py_complex arg0,
);

typedef _c_Py_c_prod = Py_complex Function(
  Py_complex arg0,
  Py_complex arg1,
);

typedef _dart_Py_c_prod = Py_complex Function(
  Py_complex arg0,
  Py_complex arg1,
);

typedef _c_Py_c_quot = Py_complex Function(
  Py_complex arg0,
  Py_complex arg1,
);

typedef _dart_Py_c_quot = Py_complex Function(
  Py_complex arg0,
  Py_complex arg1,
);

typedef _c_Py_c_pow = Py_complex Function(
  Py_complex arg0,
  Py_complex arg1,
);

typedef _dart_Py_c_pow = Py_complex Function(
  Py_complex arg0,
  Py_complex arg1,
);

typedef _c_Py_c_abs = ffi.Double Function(
  Py_complex arg0,
);

typedef _dart_Py_c_abs = double Function(
  Py_complex arg0,
);

typedef _c_PyComplex_FromCComplex = ffi.Pointer<PyObject> Function(
  Py_complex arg0,
);

typedef _dart_PyComplex_FromCComplex = ffi.Pointer<PyObject> Function(
  Py_complex arg0,
);

typedef _c_PyComplex_FromDoubles = ffi.Pointer<PyObject> Function(
  ffi.Double real,
  ffi.Double imag,
);

typedef _dart_PyComplex_FromDoubles = ffi.Pointer<PyObject> Function(
  double real,
  double imag,
);

typedef _c_PyComplex_RealAsDouble = ffi.Double Function(
  ffi.Pointer<PyObject> op,
);

typedef _dart_PyComplex_RealAsDouble = double Function(
  ffi.Pointer<PyObject> op,
);

typedef _c_PyComplex_ImagAsDouble = ffi.Double Function(
  ffi.Pointer<PyObject> op,
);

typedef _dart_PyComplex_ImagAsDouble = double Function(
  ffi.Pointer<PyObject> op,
);

typedef _c_PyComplex_AsCComplex = Py_complex Function(
  ffi.Pointer<PyObject> op,
);

typedef _dart_PyComplex_AsCComplex = Py_complex Function(
  ffi.Pointer<PyObject> op,
);

typedef _c_PyComplex_FormatAdvancedWriter = ffi.Int32 Function(
  ffi.Pointer<_PyUnicodeWriter> writer,
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<PyObject> format_spec,
  ffi.Int64 start,
  ffi.Int64 end,
);

typedef _dart_PyComplex_FormatAdvancedWriter = int Function(
  ffi.Pointer<_PyUnicodeWriter> writer,
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<PyObject> format_spec,
  int start,
  int end,
);

typedef _c_PyMemoryView_FromObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> base,
);

typedef _dart_PyMemoryView_FromObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> base,
);

typedef _c_PyMemoryView_FromMemory = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> mem,
  ffi.Int64 size,
  ffi.Int32 flags,
);

typedef _dart_PyMemoryView_FromMemory = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> mem,
  int size,
  int flags,
);

typedef _c_PyMemoryView_FromBuffer = ffi.Pointer<PyObject> Function(
  ffi.Pointer<Py_buffer> info,
);

typedef _dart_PyMemoryView_FromBuffer = ffi.Pointer<PyObject> Function(
  ffi.Pointer<Py_buffer> info,
);

typedef _c_PyMemoryView_GetContiguous = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> base,
  ffi.Int32 buffertype,
  ffi.Int8 order,
);

typedef _dart_PyMemoryView_GetContiguous = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> base,
  int buffertype,
  int order,
);

typedef _c_PyTuple_New = ffi.Pointer<PyObject> Function(
  ffi.Int64 size,
);

typedef _dart_PyTuple_New = ffi.Pointer<PyObject> Function(
  int size,
);

typedef _c_PyTuple_Size = ffi.Int64 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyTuple_Size = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyTuple_GetItem = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Int64 arg1,
);

typedef _dart_PyTuple_GetItem = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  int arg1,
);

typedef _c_PyTuple_SetItem = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Int64 arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _dart_PyTuple_SetItem = int Function(
  ffi.Pointer<PyObject> arg0,
  int arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _c_PyTuple_GetSlice = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Int64 arg1,
  ffi.Int64 arg2,
);

typedef _dart_PyTuple_GetSlice = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  int arg1,
  int arg2,
);

typedef _c_PyTuple_Pack = ffi.Pointer<PyObject> Function(
  ffi.Int64 arg0,
);

typedef _dart_PyTuple_Pack = ffi.Pointer<PyObject> Function(
  int arg0,
);

typedef _c_PyTuple_ClearFreeList = ffi.Int32 Function();

typedef _dart_PyTuple_ClearFreeList = int Function();

typedef _c_PyList_New = ffi.Pointer<PyObject> Function(
  ffi.Int64 size,
);

typedef _dart_PyList_New = ffi.Pointer<PyObject> Function(
  int size,
);

typedef _c_PyList_Size = ffi.Int64 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyList_Size = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyList_GetItem = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Int64 arg1,
);

typedef _dart_PyList_GetItem = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  int arg1,
);

typedef _c_PyList_SetItem = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Int64 arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _dart_PyList_SetItem = int Function(
  ffi.Pointer<PyObject> arg0,
  int arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _c_PyList_Insert = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Int64 arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _dart_PyList_Insert = int Function(
  ffi.Pointer<PyObject> arg0,
  int arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _c_PyList_Append = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyList_Append = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyList_GetSlice = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Int64 arg1,
  ffi.Int64 arg2,
);

typedef _dart_PyList_GetSlice = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  int arg1,
  int arg2,
);

typedef _c_PyList_SetSlice = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Int64 arg1,
  ffi.Int64 arg2,
  ffi.Pointer<PyObject> arg3,
);

typedef _dart_PyList_SetSlice = int Function(
  ffi.Pointer<PyObject> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<PyObject> arg3,
);

typedef _c_PyList_Sort = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyList_Sort = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyList_Reverse = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyList_Reverse = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyList_AsTuple = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyList_AsTuple = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyList_Extend = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyListObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyList_Extend = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyListObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyList_ClearFreeList = ffi.Int32 Function();

typedef _dart_PyList_ClearFreeList = int Function();

typedef _c_PyList_DebugMallocStats = ffi.Void Function(
  ffi.Pointer<FILE> out,
);

typedef _dart_PyList_DebugMallocStats = void Function(
  ffi.Pointer<FILE> out,
);

typedef _c_PyDict_New = ffi.Pointer<PyObject> Function();

typedef _dart_PyDict_New = ffi.Pointer<PyObject> Function();

typedef _c_PyDict_GetItem = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> mp,
  ffi.Pointer<PyObject> key,
);

typedef _dart_PyDict_GetItem = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> mp,
  ffi.Pointer<PyObject> key,
);

typedef _c_PyDict_GetItemWithError = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> mp,
  ffi.Pointer<PyObject> key,
);

typedef _dart_PyDict_GetItemWithError = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> mp,
  ffi.Pointer<PyObject> key,
);

typedef _c_PyDict_SetItem = ffi.Int32 Function(
  ffi.Pointer<PyObject> mp,
  ffi.Pointer<PyObject> key,
  ffi.Pointer<PyObject> item,
);

typedef _dart_PyDict_SetItem = int Function(
  ffi.Pointer<PyObject> mp,
  ffi.Pointer<PyObject> key,
  ffi.Pointer<PyObject> item,
);

typedef _c_PyDict_DelItem = ffi.Int32 Function(
  ffi.Pointer<PyObject> mp,
  ffi.Pointer<PyObject> key,
);

typedef _dart_PyDict_DelItem = int Function(
  ffi.Pointer<PyObject> mp,
  ffi.Pointer<PyObject> key,
);

typedef _c_PyDict_Clear = ffi.Void Function(
  ffi.Pointer<PyObject> mp,
);

typedef _dart_PyDict_Clear = void Function(
  ffi.Pointer<PyObject> mp,
);

typedef _c_PyDict_Next = ffi.Int32 Function(
  ffi.Pointer<PyObject> mp,
  ffi.Pointer<ffi.Int64> pos,
  ffi.Pointer<ffi.Pointer<PyObject>> key,
  ffi.Pointer<ffi.Pointer<PyObject>> value,
);

typedef _dart_PyDict_Next = int Function(
  ffi.Pointer<PyObject> mp,
  ffi.Pointer<ffi.Int64> pos,
  ffi.Pointer<ffi.Pointer<PyObject>> key,
  ffi.Pointer<ffi.Pointer<PyObject>> value,
);

typedef _c_PyDict_Keys = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> mp,
);

typedef _dart_PyDict_Keys = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> mp,
);

typedef _c_PyDict_Values = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> mp,
);

typedef _dart_PyDict_Values = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> mp,
);

typedef _c_PyDict_Items = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> mp,
);

typedef _dart_PyDict_Items = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> mp,
);

typedef _c_PyDict_Size = ffi.Int64 Function(
  ffi.Pointer<PyObject> mp,
);

typedef _dart_PyDict_Size = int Function(
  ffi.Pointer<PyObject> mp,
);

typedef _c_PyDict_Copy = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> mp,
);

typedef _dart_PyDict_Copy = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> mp,
);

typedef _c_PyDict_Contains = ffi.Int32 Function(
  ffi.Pointer<PyObject> mp,
  ffi.Pointer<PyObject> key,
);

typedef _dart_PyDict_Contains = int Function(
  ffi.Pointer<PyObject> mp,
  ffi.Pointer<PyObject> key,
);

typedef _c_PyDict_Update = ffi.Int32 Function(
  ffi.Pointer<PyObject> mp,
  ffi.Pointer<PyObject> other,
);

typedef _dart_PyDict_Update = int Function(
  ffi.Pointer<PyObject> mp,
  ffi.Pointer<PyObject> other,
);

typedef _c_PyDict_Merge = ffi.Int32 Function(
  ffi.Pointer<PyObject> mp,
  ffi.Pointer<PyObject> other,
  ffi.Int32 override,
);

typedef _dart_PyDict_Merge = int Function(
  ffi.Pointer<PyObject> mp,
  ffi.Pointer<PyObject> other,
  int override,
);

typedef _c_PyDict_MergeFromSeq2 = ffi.Int32 Function(
  ffi.Pointer<PyObject> d,
  ffi.Pointer<PyObject> seq2,
  ffi.Int32 override,
);

typedef _dart_PyDict_MergeFromSeq2 = int Function(
  ffi.Pointer<PyObject> d,
  ffi.Pointer<PyObject> seq2,
  int override,
);

typedef _c_PyDict_GetItemString = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> dp,
  ffi.Pointer<ffi.Int8> key,
);

typedef _dart_PyDict_GetItemString = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> dp,
  ffi.Pointer<ffi.Int8> key,
);

typedef _c_PyDict_SetItemString = ffi.Int32 Function(
  ffi.Pointer<PyObject> dp,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<PyObject> item,
);

typedef _dart_PyDict_SetItemString = int Function(
  ffi.Pointer<PyObject> dp,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<PyObject> item,
);

typedef _c_PyDict_DelItemString = ffi.Int32 Function(
  ffi.Pointer<PyObject> dp,
  ffi.Pointer<ffi.Int8> key,
);

typedef _dart_PyDict_DelItemString = int Function(
  ffi.Pointer<PyObject> dp,
  ffi.Pointer<ffi.Int8> key,
);

typedef _c_PyODict_New = ffi.Pointer<PyObject> Function();

typedef _dart_PyODict_New = ffi.Pointer<PyObject> Function();

typedef _c_PyODict_SetItem = ffi.Int32 Function(
  ffi.Pointer<PyObject> od,
  ffi.Pointer<PyObject> key,
  ffi.Pointer<PyObject> item,
);

typedef _dart_PyODict_SetItem = int Function(
  ffi.Pointer<PyObject> od,
  ffi.Pointer<PyObject> key,
  ffi.Pointer<PyObject> item,
);

typedef _c_PyODict_DelItem = ffi.Int32 Function(
  ffi.Pointer<PyObject> od,
  ffi.Pointer<PyObject> key,
);

typedef _dart_PyODict_DelItem = int Function(
  ffi.Pointer<PyObject> od,
  ffi.Pointer<PyObject> key,
);

typedef _c_PySet_NextEntry = ffi.Int32 Function(
  ffi.Pointer<PyObject> set_1,
  ffi.Pointer<ffi.Int64> pos,
  ffi.Pointer<ffi.Pointer<PyObject>> key,
  ffi.Pointer<ffi.Int64> hash,
);

typedef _dart_PySet_NextEntry = int Function(
  ffi.Pointer<PyObject> set_1,
  ffi.Pointer<ffi.Int64> pos,
  ffi.Pointer<ffi.Pointer<PyObject>> key,
  ffi.Pointer<ffi.Int64> hash,
);

typedef _c_PySet_Update = ffi.Int32 Function(
  ffi.Pointer<PyObject> set_1,
  ffi.Pointer<PyObject> iterable,
);

typedef _dart_PySet_Update = int Function(
  ffi.Pointer<PyObject> set_1,
  ffi.Pointer<PyObject> iterable,
);

typedef _c_PySet_ClearFreeList = ffi.Int32 Function();

typedef _dart_PySet_ClearFreeList = int Function();

typedef _c_PySet_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PySet_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyFrozenSet_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyFrozenSet_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PySet_Add = ffi.Int32 Function(
  ffi.Pointer<PyObject> set_1,
  ffi.Pointer<PyObject> key,
);

typedef _dart_PySet_Add = int Function(
  ffi.Pointer<PyObject> set_1,
  ffi.Pointer<PyObject> key,
);

typedef _c_PySet_Clear = ffi.Int32 Function(
  ffi.Pointer<PyObject> set_1,
);

typedef _dart_PySet_Clear = int Function(
  ffi.Pointer<PyObject> set_1,
);

typedef _c_PySet_Contains = ffi.Int32 Function(
  ffi.Pointer<PyObject> anyset,
  ffi.Pointer<PyObject> key,
);

typedef _dart_PySet_Contains = int Function(
  ffi.Pointer<PyObject> anyset,
  ffi.Pointer<PyObject> key,
);

typedef _c_PySet_Discard = ffi.Int32 Function(
  ffi.Pointer<PyObject> set_1,
  ffi.Pointer<PyObject> key,
);

typedef _dart_PySet_Discard = int Function(
  ffi.Pointer<PyObject> set_1,
  ffi.Pointer<PyObject> key,
);

typedef _c_PySet_Pop = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> set_1,
);

typedef _dart_PySet_Pop = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> set_1,
);

typedef _c_PySet_Size = ffi.Int64 Function(
  ffi.Pointer<PyObject> anyset,
);

typedef _dart_PySet_Size = int Function(
  ffi.Pointer<PyObject> anyset,
);

typedef PyCFunction = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject>,
  ffi.Pointer<PyObject>,
);

typedef _c_PyCFunction_GetFunction
    = ffi.Pointer<ffi.NativeFunction<PyCFunction>> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyCFunction_GetFunction
    = ffi.Pointer<ffi.NativeFunction<PyCFunction>> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyCFunction_GetSelf = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyCFunction_GetSelf = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyCFunction_GetFlags = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyCFunction_GetFlags = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyCFunction_Call = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _dart_PyCFunction_Call = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _c_PyCFunction_FastCallDict = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> func,
  ffi.Pointer<ffi.Pointer<PyObject>> args,
  ffi.Int64 nargs,
  ffi.Pointer<PyObject> kwargs,
);

typedef _dart_PyCFunction_FastCallDict = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> func,
  ffi.Pointer<ffi.Pointer<PyObject>> args,
  int nargs,
  ffi.Pointer<PyObject> kwargs,
);

typedef _c_PyCFunction_NewEx = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyMethodDef> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _dart_PyCFunction_NewEx = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyMethodDef> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _c_PyMethodDef_RawFastCallDict = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyMethodDef> method,
  ffi.Pointer<PyObject> self,
  ffi.Pointer<ffi.Pointer<PyObject>> args,
  ffi.Int64 nargs,
  ffi.Pointer<PyObject> kwargs,
);

typedef _dart_PyMethodDef_RawFastCallDict = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyMethodDef> method,
  ffi.Pointer<PyObject> self,
  ffi.Pointer<ffi.Pointer<PyObject>> args,
  int nargs,
  ffi.Pointer<PyObject> kwargs,
);

typedef _c_PyMethodDef_RawFastCallKeywords = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyMethodDef> method,
  ffi.Pointer<PyObject> self,
  ffi.Pointer<ffi.Pointer<PyObject>> args,
  ffi.Int64 nargs,
  ffi.Pointer<PyObject> kwnames,
);

typedef _dart_PyMethodDef_RawFastCallKeywords = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyMethodDef> method,
  ffi.Pointer<PyObject> self,
  ffi.Pointer<ffi.Pointer<PyObject>> args,
  int nargs,
  ffi.Pointer<PyObject> kwnames,
);

typedef _c_PyCFunction_ClearFreeList = ffi.Int32 Function();

typedef _dart_PyCFunction_ClearFreeList = int Function();

typedef _c_PyCFunction_DebugMallocStats = ffi.Void Function(
  ffi.Pointer<FILE> out,
);

typedef _dart_PyCFunction_DebugMallocStats = void Function(
  ffi.Pointer<FILE> out,
);

typedef _c_PyMethod_DebugMallocStats = ffi.Void Function(
  ffi.Pointer<FILE> out,
);

typedef _dart_PyMethod_DebugMallocStats = void Function(
  ffi.Pointer<FILE> out,
);

typedef _c_PyModule_NewObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> name,
);

typedef _dart_PyModule_NewObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> name,
);

typedef _c_PyModule_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_PyModule_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_PyModule_GetDict = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyModule_GetDict = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyModule_GetNameObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyModule_GetNameObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyModule_GetName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyModule_GetName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyModule_GetFilename = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyModule_GetFilename = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyModule_GetFilenameObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyModule_GetFilenameObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyModule_Clear = ffi.Void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyModule_Clear = void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyModule_ClearDict = ffi.Void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyModule_ClearDict = void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyModuleSpec_IsInitializing = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyModuleSpec_IsInitializing = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyModule_GetDef = ffi.Pointer<PyModuleDef> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyModule_GetDef = ffi.Pointer<PyModuleDef> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyModule_GetState = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyModule_GetState = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyModuleDef_Init = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyModuleDef> arg0,
);

typedef _dart_PyModuleDef_Init = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyModuleDef> arg0,
);

typedef _c_PyFunction_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyFunction_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyFunction_NewWithQualName = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _dart_PyFunction_NewWithQualName = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _c_PyFunction_GetCode = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyFunction_GetCode = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyFunction_GetGlobals = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyFunction_GetGlobals = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyFunction_GetModule = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyFunction_GetModule = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyFunction_GetDefaults = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyFunction_GetDefaults = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyFunction_SetDefaults = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyFunction_SetDefaults = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyFunction_GetKwDefaults = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyFunction_GetKwDefaults = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyFunction_SetKwDefaults = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyFunction_SetKwDefaults = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyFunction_GetClosure = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyFunction_GetClosure = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyFunction_SetClosure = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyFunction_SetClosure = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyFunction_GetAnnotations = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyFunction_GetAnnotations = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyFunction_SetAnnotations = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyFunction_SetAnnotations = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyFunction_FastCallDict = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> func,
  ffi.Pointer<ffi.Pointer<PyObject>> args,
  ffi.Int64 nargs,
  ffi.Pointer<PyObject> kwargs,
);

typedef _dart_PyFunction_FastCallDict = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> func,
  ffi.Pointer<ffi.Pointer<PyObject>> args,
  int nargs,
  ffi.Pointer<PyObject> kwargs,
);

typedef _c_PyFunction_Vectorcall = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> func,
  ffi.Pointer<ffi.Pointer<PyObject>> stack,
  ffi.Uint64 nargsf,
  ffi.Pointer<PyObject> kwnames,
);

typedef _dart_PyFunction_Vectorcall = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> func,
  ffi.Pointer<ffi.Pointer<PyObject>> stack,
  int nargsf,
  ffi.Pointer<PyObject> kwnames,
);

typedef _c_PyClassMethod_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyClassMethod_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyStaticMethod_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyStaticMethod_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyMethod_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyMethod_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyMethod_Function = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyMethod_Function = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyMethod_Self = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyMethod_Self = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyMethod_ClearFreeList = ffi.Int32 Function();

typedef _dart_PyMethod_ClearFreeList = int Function();

typedef _c_PyInstanceMethod_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyInstanceMethod_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyInstanceMethod_Function = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyInstanceMethod_Function = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyFile_FromFd = ffi.Pointer<PyObject> Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Int32 arg3,
  ffi.Pointer<ffi.Int8> arg4,
  ffi.Pointer<ffi.Int8> arg5,
  ffi.Pointer<ffi.Int8> arg6,
  ffi.Int32 arg7,
);

typedef _dart_PyFile_FromFd = ffi.Pointer<PyObject> Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  int arg3,
  ffi.Pointer<ffi.Int8> arg4,
  ffi.Pointer<ffi.Int8> arg5,
  ffi.Pointer<ffi.Int8> arg6,
  int arg7,
);

typedef _c_PyFile_GetLine = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Int32 arg1,
);

typedef _dart_PyFile_GetLine = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  int arg1,
);

typedef _c_PyFile_WriteObject = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Int32 arg2,
);

typedef _dart_PyFile_WriteObject = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  int arg2,
);

typedef _c_PyFile_WriteString = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyFile_WriteString = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyObject_AsFileDescriptor = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyObject_AsFileDescriptor = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef PyCapsule_Destructor = ffi.Void Function(
  ffi.Pointer<PyObject>,
);

typedef _c_PyCapsule_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Void> pointer,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.NativeFunction<PyCapsule_Destructor>> destructor,
);

typedef _dart_PyCapsule_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Void> pointer,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.NativeFunction<PyCapsule_Destructor>> destructor,
);

typedef _c_PyCapsule_GetPointer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<PyObject> capsule,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_PyCapsule_GetPointer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<PyObject> capsule,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_PyCapsule_GetDestructor
    = ffi.Pointer<ffi.NativeFunction<PyCapsule_Destructor>> Function(
  ffi.Pointer<PyObject> capsule,
);

typedef _dart_PyCapsule_GetDestructor
    = ffi.Pointer<ffi.NativeFunction<PyCapsule_Destructor>> Function(
  ffi.Pointer<PyObject> capsule,
);

typedef _c_PyCapsule_GetName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<PyObject> capsule,
);

typedef _dart_PyCapsule_GetName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<PyObject> capsule,
);

typedef _c_PyCapsule_GetContext = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<PyObject> capsule,
);

typedef _dart_PyCapsule_GetContext = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<PyObject> capsule,
);

typedef _c_PyCapsule_IsValid = ffi.Int32 Function(
  ffi.Pointer<PyObject> capsule,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_PyCapsule_IsValid = int Function(
  ffi.Pointer<PyObject> capsule,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_PyCapsule_SetPointer = ffi.Int32 Function(
  ffi.Pointer<PyObject> capsule,
  ffi.Pointer<ffi.Void> pointer,
);

typedef _dart_PyCapsule_SetPointer = int Function(
  ffi.Pointer<PyObject> capsule,
  ffi.Pointer<ffi.Void> pointer,
);

typedef _c_PyCapsule_SetDestructor = ffi.Int32 Function(
  ffi.Pointer<PyObject> capsule,
  ffi.Pointer<ffi.NativeFunction<PyCapsule_Destructor>> destructor,
);

typedef _dart_PyCapsule_SetDestructor = int Function(
  ffi.Pointer<PyObject> capsule,
  ffi.Pointer<ffi.NativeFunction<PyCapsule_Destructor>> destructor,
);

typedef _c_PyCapsule_SetName = ffi.Int32 Function(
  ffi.Pointer<PyObject> capsule,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_PyCapsule_SetName = int Function(
  ffi.Pointer<PyObject> capsule,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_PyCapsule_SetContext = ffi.Int32 Function(
  ffi.Pointer<PyObject> capsule,
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_PyCapsule_SetContext = int Function(
  ffi.Pointer<PyObject> capsule,
  ffi.Pointer<ffi.Void> context,
);

typedef _c_PyCapsule_Import = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 no_block,
);

typedef _dart_PyCapsule_Import = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> name,
  int no_block,
);

typedef _c_PyTraceBack_Here = ffi.Int32 Function(
  ffi.Pointer<_frame> arg0,
);

typedef _dart_PyTraceBack_Here = int Function(
  ffi.Pointer<_frame> arg0,
);

typedef _c_PyTraceBack_Print = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyTraceBack_Print = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PySlice_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> start,
  ffi.Pointer<PyObject> stop,
  ffi.Pointer<PyObject> step,
);

typedef _dart_PySlice_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> start,
  ffi.Pointer<PyObject> stop,
  ffi.Pointer<PyObject> step,
);

typedef _c_PySlice_FromIndices = ffi.Pointer<PyObject> Function(
  ffi.Int64 start,
  ffi.Int64 stop,
);

typedef _dart_PySlice_FromIndices = ffi.Pointer<PyObject> Function(
  int start,
  int stop,
);

typedef _c_PySlice_GetLongIndices = ffi.Int32 Function(
  ffi.Pointer<PySliceObject> self,
  ffi.Pointer<PyObject> length,
  ffi.Pointer<ffi.Pointer<PyObject>> start_ptr,
  ffi.Pointer<ffi.Pointer<PyObject>> stop_ptr,
  ffi.Pointer<ffi.Pointer<PyObject>> step_ptr,
);

typedef _dart_PySlice_GetLongIndices = int Function(
  ffi.Pointer<PySliceObject> self,
  ffi.Pointer<PyObject> length,
  ffi.Pointer<ffi.Pointer<PyObject>> start_ptr,
  ffi.Pointer<ffi.Pointer<PyObject>> stop_ptr,
  ffi.Pointer<ffi.Pointer<PyObject>> step_ptr,
);

typedef _c_PySlice_GetIndices = ffi.Int32 Function(
  ffi.Pointer<PyObject> r,
  ffi.Int64 length,
  ffi.Pointer<ffi.Int64> start,
  ffi.Pointer<ffi.Int64> stop,
  ffi.Pointer<ffi.Int64> step,
);

typedef _dart_PySlice_GetIndices = int Function(
  ffi.Pointer<PyObject> r,
  int length,
  ffi.Pointer<ffi.Int64> start,
  ffi.Pointer<ffi.Int64> stop,
  ffi.Pointer<ffi.Int64> step,
);

typedef _c_PySlice_GetIndicesEx = ffi.Int32 Function(
  ffi.Pointer<PyObject> r,
  ffi.Int64 length,
  ffi.Pointer<ffi.Int64> start,
  ffi.Pointer<ffi.Int64> stop,
  ffi.Pointer<ffi.Int64> step,
  ffi.Pointer<ffi.Int64> slicelength,
);

typedef _dart_PySlice_GetIndicesEx = int Function(
  ffi.Pointer<PyObject> r,
  int length,
  ffi.Pointer<ffi.Int64> start,
  ffi.Pointer<ffi.Int64> stop,
  ffi.Pointer<ffi.Int64> step,
  ffi.Pointer<ffi.Int64> slicelength,
);

typedef _c_PySlice_Unpack = ffi.Int32 Function(
  ffi.Pointer<PyObject> slice,
  ffi.Pointer<ffi.Int64> start,
  ffi.Pointer<ffi.Int64> stop,
  ffi.Pointer<ffi.Int64> step,
);

typedef _dart_PySlice_Unpack = int Function(
  ffi.Pointer<PyObject> slice,
  ffi.Pointer<ffi.Int64> start,
  ffi.Pointer<ffi.Int64> stop,
  ffi.Pointer<ffi.Int64> step,
);

typedef _c_PySlice_AdjustIndices = ffi.Int64 Function(
  ffi.Int64 length,
  ffi.Pointer<ffi.Int64> start,
  ffi.Pointer<ffi.Int64> stop,
  ffi.Int64 step,
);

typedef _dart_PySlice_AdjustIndices = int Function(
  int length,
  ffi.Pointer<ffi.Int64> start,
  ffi.Pointer<ffi.Int64> stop,
  int step,
);

typedef _c_PyCell_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyCell_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyCell_Get = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyCell_Get = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyCell_Set = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyCell_Set = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PySeqIter_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PySeqIter_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyCallIter_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyCallIter_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyThread_init_thread = ffi.Void Function();

typedef _dart_PyThread_init_thread = void Function();

typedef _typedefC_4 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_PyThread_start_new_thread = ffi.Uint64 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_4>> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart_PyThread_start_new_thread = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_4>> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _c_PyThread_exit_thread = ffi.Void Function();

typedef _dart_PyThread_exit_thread = void Function();

typedef _c_PyThread_get_thread_ident = ffi.Uint64 Function();

typedef _dart_PyThread_get_thread_ident = int Function();

typedef _c_PyThread_get_thread_native_id = ffi.Uint64 Function();

typedef _dart_PyThread_get_thread_native_id = int Function();

typedef _c_PyThread_allocate_lock = ffi.Pointer<ffi.Void> Function();

typedef _dart_PyThread_allocate_lock = ffi.Pointer<ffi.Void> Function();

typedef _c_PyThread_free_lock = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_PyThread_free_lock = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_PyThread_acquire_lock = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Int32 arg1,
);

typedef _dart_PyThread_acquire_lock = int Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef _c_PyThread_acquire_lock_timed = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Int64 microseconds,
  ffi.Int32 intr_flag,
);

typedef _dart_PyThread_acquire_lock_timed = int Function(
  ffi.Pointer<ffi.Void> arg0,
  int microseconds,
  int intr_flag,
);

typedef _c_PyThread_release_lock = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_PyThread_release_lock = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_PyThread_get_stacksize = ffi.Uint64 Function();

typedef _dart_PyThread_get_stacksize = int Function();

typedef _c_PyThread_set_stacksize = ffi.Int32 Function(
  ffi.Uint64 arg0,
);

typedef _dart_PyThread_set_stacksize = int Function(
  int arg0,
);

typedef _c_PyThread_GetInfo = ffi.Pointer<PyObject> Function();

typedef _dart_PyThread_GetInfo = ffi.Pointer<PyObject> Function();

typedef _c_PyThread_create_key = ffi.Int32 Function();

typedef _dart_PyThread_create_key = int Function();

typedef _c_PyThread_delete_key = ffi.Void Function(
  ffi.Int32 key,
);

typedef _dart_PyThread_delete_key = void Function(
  int key,
);

typedef _c_PyThread_set_key_value = ffi.Int32 Function(
  ffi.Int32 key,
  ffi.Pointer<ffi.Void> value,
);

typedef _dart_PyThread_set_key_value = int Function(
  int key,
  ffi.Pointer<ffi.Void> value,
);

typedef _c_PyThread_get_key_value = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 key,
);

typedef _dart_PyThread_get_key_value = ffi.Pointer<ffi.Void> Function(
  int key,
);

typedef _c_PyThread_delete_key_value = ffi.Void Function(
  ffi.Int32 key,
);

typedef _dart_PyThread_delete_key_value = void Function(
  int key,
);

typedef _c_PyThread_ReInitTLS = ffi.Void Function();

typedef _dart_PyThread_ReInitTLS = void Function();

typedef _c_PyThread_tss_alloc = ffi.Pointer<_Py_tss_t> Function();

typedef _dart_PyThread_tss_alloc = ffi.Pointer<_Py_tss_t> Function();

typedef _c_PyThread_tss_free = ffi.Void Function(
  ffi.Pointer<_Py_tss_t> key,
);

typedef _dart_PyThread_tss_free = void Function(
  ffi.Pointer<_Py_tss_t> key,
);

typedef _c_PyThread_tss_is_created = ffi.Int32 Function(
  ffi.Pointer<_Py_tss_t> key,
);

typedef _dart_PyThread_tss_is_created = int Function(
  ffi.Pointer<_Py_tss_t> key,
);

typedef _c_PyThread_tss_create = ffi.Int32 Function(
  ffi.Pointer<_Py_tss_t> key,
);

typedef _dart_PyThread_tss_create = int Function(
  ffi.Pointer<_Py_tss_t> key,
);

typedef _c_PyThread_tss_delete = ffi.Void Function(
  ffi.Pointer<_Py_tss_t> key,
);

typedef _dart_PyThread_tss_delete = void Function(
  ffi.Pointer<_Py_tss_t> key,
);

typedef _c_PyThread_tss_set = ffi.Int32 Function(
  ffi.Pointer<_Py_tss_t> key,
  ffi.Pointer<ffi.Void> value,
);

typedef _dart_PyThread_tss_set = int Function(
  ffi.Pointer<_Py_tss_t> key,
  ffi.Pointer<ffi.Void> value,
);

typedef _c_PyThread_tss_get = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<_Py_tss_t> key,
);

typedef _dart_PyThread_tss_get = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<_Py_tss_t> key,
);

typedef _c_PyInterpreterState_New = ffi.Pointer<_is> Function();

typedef _dart_PyInterpreterState_New = ffi.Pointer<_is> Function();

typedef _c_PyInterpreterState_Clear = ffi.Void Function(
  ffi.Pointer<_is> arg0,
);

typedef _dart_PyInterpreterState_Clear = void Function(
  ffi.Pointer<_is> arg0,
);

typedef _c_PyInterpreterState_Delete = ffi.Void Function(
  ffi.Pointer<_is> arg0,
);

typedef _dart_PyInterpreterState_Delete = void Function(
  ffi.Pointer<_is> arg0,
);

typedef _c_PyInterpreterState_GetDict = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_is> arg0,
);

typedef _dart_PyInterpreterState_GetDict = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_is> arg0,
);

typedef _c_PyInterpreterState_GetID = ffi.Int64 Function(
  ffi.Pointer<_is> arg0,
);

typedef _dart_PyInterpreterState_GetID = int Function(
  ffi.Pointer<_is> arg0,
);

typedef _c_PyState_AddModule = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyModuleDef> arg1,
);

typedef _dart_PyState_AddModule = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyModuleDef> arg1,
);

typedef _c_PyState_RemoveModule = ffi.Int32 Function(
  ffi.Pointer<PyModuleDef> arg0,
);

typedef _dart_PyState_RemoveModule = int Function(
  ffi.Pointer<PyModuleDef> arg0,
);

typedef _c_PyState_FindModule = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyModuleDef> arg0,
);

typedef _dart_PyState_FindModule = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyModuleDef> arg0,
);

typedef _c_PyThreadState_New = ffi.Pointer<_ts> Function(
  ffi.Pointer<_is> arg0,
);

typedef _dart_PyThreadState_New = ffi.Pointer<_ts> Function(
  ffi.Pointer<_is> arg0,
);

typedef _c_PyThreadState_Clear = ffi.Void Function(
  ffi.Pointer<_ts> arg0,
);

typedef _dart_PyThreadState_Clear = void Function(
  ffi.Pointer<_ts> arg0,
);

typedef _c_PyThreadState_Delete = ffi.Void Function(
  ffi.Pointer<_ts> arg0,
);

typedef _dart_PyThreadState_Delete = void Function(
  ffi.Pointer<_ts> arg0,
);

typedef _c_PyThreadState_DeleteCurrent = ffi.Void Function();

typedef _dart_PyThreadState_DeleteCurrent = void Function();

typedef _c_PyThreadState_Get = ffi.Pointer<_ts> Function();

typedef _dart_PyThreadState_Get = ffi.Pointer<_ts> Function();

typedef _c_PyThreadState_Swap = ffi.Pointer<_ts> Function(
  ffi.Pointer<_ts> arg0,
);

typedef _dart_PyThreadState_Swap = ffi.Pointer<_ts> Function(
  ffi.Pointer<_ts> arg0,
);

typedef _c_PyThreadState_GetDict = ffi.Pointer<PyObject> Function();

typedef _dart_PyThreadState_GetDict = ffi.Pointer<PyObject> Function();

typedef _c_PyThreadState_SetAsyncExc = ffi.Int32 Function(
  ffi.Uint64 arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyThreadState_SetAsyncExc = int Function(
  int arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyGILState_Ensure = ffi.Int32 Function();

typedef _dart_PyGILState_Ensure = int Function();

typedef _c_PyGILState_Release = ffi.Void Function(
  ffi.Int32 arg0,
);

typedef _dart_PyGILState_Release = void Function(
  int arg0,
);

typedef _c_PyGILState_GetThisThreadState = ffi.Pointer<_ts> Function();

typedef _dart_PyGILState_GetThisThreadState = ffi.Pointer<_ts> Function();

typedef _c_PyGen_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_frame> arg0,
);

typedef _dart_PyGen_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_frame> arg0,
);

typedef _c_PyGen_NewWithQualName = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_frame> arg0,
  ffi.Pointer<PyObject> name,
  ffi.Pointer<PyObject> qualname,
);

typedef _dart_PyGen_NewWithQualName = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_frame> arg0,
  ffi.Pointer<PyObject> name,
  ffi.Pointer<PyObject> qualname,
);

typedef _c_PyGen_NeedsFinalizing = ffi.Int32 Function(
  ffi.Pointer<PyGenObject> arg0,
);

typedef _dart_PyGen_NeedsFinalizing = int Function(
  ffi.Pointer<PyGenObject> arg0,
);

typedef _c_PyGen_SetStopIterationValue = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyGen_SetStopIterationValue = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyGen_FetchStopIterationValue = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<PyObject>> arg0,
);

typedef _dart_PyGen_FetchStopIterationValue = int Function(
  ffi.Pointer<ffi.Pointer<PyObject>> arg0,
);

typedef _c_PyGen_Send = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyGenObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyGen_Send = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyGenObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyGen_yf = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyGenObject> arg0,
);

typedef _dart_PyGen_yf = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyGenObject> arg0,
);

typedef _c_PyGen_Finalize = ffi.Void Function(
  ffi.Pointer<PyObject> self,
);

typedef _dart_PyGen_Finalize = void Function(
  ffi.Pointer<PyObject> self,
);

typedef _c_PyCoro_GetAwaitableIter = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _dart_PyCoro_GetAwaitableIter = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _c_PyCoro_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_frame> arg0,
  ffi.Pointer<PyObject> name,
  ffi.Pointer<PyObject> qualname,
);

typedef _dart_PyCoro_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_frame> arg0,
  ffi.Pointer<PyObject> name,
  ffi.Pointer<PyObject> qualname,
);

typedef _c_PyAsyncGen_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_frame> arg0,
  ffi.Pointer<PyObject> name,
  ffi.Pointer<PyObject> qualname,
);

typedef _dart_PyAsyncGen_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_frame> arg0,
  ffi.Pointer<PyObject> name,
  ffi.Pointer<PyObject> qualname,
);

typedef _c_PyAsyncGenValueWrapperNew = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyAsyncGenValueWrapperNew = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyAsyncGen_ClearFreeLists = ffi.Int32 Function();

typedef _dart_PyAsyncGen_ClearFreeLists = int Function();

typedef _c_PyDescr_NewMethod = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_typeobject> arg0,
  ffi.Pointer<PyMethodDef> arg1,
);

typedef _dart_PyDescr_NewMethod = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_typeobject> arg0,
  ffi.Pointer<PyMethodDef> arg1,
);

typedef _c_PyDescr_NewClassMethod = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_typeobject> arg0,
  ffi.Pointer<PyMethodDef> arg1,
);

typedef _dart_PyDescr_NewClassMethod = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_typeobject> arg0,
  ffi.Pointer<PyMethodDef> arg1,
);

typedef _c_PyDescr_NewMember = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_typeobject> arg0,
  ffi.Pointer<PyMemberDef> arg1,
);

typedef _dart_PyDescr_NewMember = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_typeobject> arg0,
  ffi.Pointer<PyMemberDef> arg1,
);

typedef _c_PyDescr_NewGetSet = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_typeobject> arg0,
  ffi.Pointer<PyGetSetDef> arg1,
);

typedef _dart_PyDescr_NewGetSet = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_typeobject> arg0,
  ffi.Pointer<PyGetSetDef> arg1,
);

typedef _c_PyDescr_NewWrapper = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_typeobject> arg0,
  ffi.Pointer<wrapperbase> arg1,
  ffi.Pointer<ffi.Void> arg2,
);

typedef _dart_PyDescr_NewWrapper = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_typeobject> arg0,
  ffi.Pointer<wrapperbase> arg1,
  ffi.Pointer<ffi.Void> arg2,
);

typedef _c_PyDictProxy_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyDictProxy_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyWrapper_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyWrapper_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyWarnings_Init = ffi.Pointer<PyObject> Function();

typedef _dart_PyWarnings_Init = ffi.Pointer<PyObject> Function();

typedef _c_PyErr_WarnEx = ffi.Int32 Function(
  ffi.Pointer<PyObject> category,
  ffi.Pointer<ffi.Int8> message,
  ffi.Int64 stack_level,
);

typedef _dart_PyErr_WarnEx = int Function(
  ffi.Pointer<PyObject> category,
  ffi.Pointer<ffi.Int8> message,
  int stack_level,
);

typedef _c_PyErr_WarnFormat = ffi.Int32 Function(
  ffi.Pointer<PyObject> category,
  ffi.Int64 stack_level,
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_PyErr_WarnFormat = int Function(
  ffi.Pointer<PyObject> category,
  int stack_level,
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_PyErr_ResourceWarning = ffi.Int32 Function(
  ffi.Pointer<PyObject> source,
  ffi.Int64 stack_level,
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_PyErr_ResourceWarning = int Function(
  ffi.Pointer<PyObject> source,
  int stack_level,
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_PyErr_WarnExplicitObject = ffi.Int32 Function(
  ffi.Pointer<PyObject> category,
  ffi.Pointer<PyObject> message,
  ffi.Pointer<PyObject> filename,
  ffi.Int32 lineno,
  ffi.Pointer<PyObject> module,
  ffi.Pointer<PyObject> registry,
);

typedef _dart_PyErr_WarnExplicitObject = int Function(
  ffi.Pointer<PyObject> category,
  ffi.Pointer<PyObject> message,
  ffi.Pointer<PyObject> filename,
  int lineno,
  ffi.Pointer<PyObject> module,
  ffi.Pointer<PyObject> registry,
);

typedef _c_PyErr_WarnExplicit = ffi.Int32 Function(
  ffi.Pointer<PyObject> category,
  ffi.Pointer<ffi.Int8> message,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Int32 lineno,
  ffi.Pointer<ffi.Int8> module,
  ffi.Pointer<PyObject> registry,
);

typedef _dart_PyErr_WarnExplicit = int Function(
  ffi.Pointer<PyObject> category,
  ffi.Pointer<ffi.Int8> message,
  ffi.Pointer<ffi.Int8> filename,
  int lineno,
  ffi.Pointer<ffi.Int8> module,
  ffi.Pointer<PyObject> registry,
);

typedef _c_PyErr_WarnExplicitFormat = ffi.Int32 Function(
  ffi.Pointer<PyObject> category,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Int32 lineno,
  ffi.Pointer<ffi.Int8> module,
  ffi.Pointer<PyObject> registry,
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_PyErr_WarnExplicitFormat = int Function(
  ffi.Pointer<PyObject> category,
  ffi.Pointer<ffi.Int8> filename,
  int lineno,
  ffi.Pointer<ffi.Int8> module,
  ffi.Pointer<PyObject> registry,
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_PyErr_WarnUnawaitedCoroutine = ffi.Void Function(
  ffi.Pointer<PyObject> coro,
);

typedef _dart_PyErr_WarnUnawaitedCoroutine = void Function(
  ffi.Pointer<PyObject> coro,
);

typedef _c_PyWeakref_NewRef = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> ob,
  ffi.Pointer<PyObject> callback,
);

typedef _dart_PyWeakref_NewRef = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> ob,
  ffi.Pointer<PyObject> callback,
);

typedef _c_PyWeakref_NewProxy = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> ob,
  ffi.Pointer<PyObject> callback,
);

typedef _dart_PyWeakref_NewProxy = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> ob,
  ffi.Pointer<PyObject> callback,
);

typedef _c_PyWeakref_GetObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> ref,
);

typedef _dart_PyWeakref_GetObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> ref,
);

typedef _c_PyWeakref_GetWeakrefCount = ffi.Int64 Function(
  ffi.Pointer<_PyWeakReference> head,
);

typedef _dart_PyWeakref_GetWeakrefCount = int Function(
  ffi.Pointer<_PyWeakReference> head,
);

typedef _c_PyWeakref_ClearRef = ffi.Void Function(
  ffi.Pointer<_PyWeakReference> self,
);

typedef _dart_PyWeakref_ClearRef = void Function(
  ffi.Pointer<_PyWeakReference> self,
);

typedef _c_PyStructSequence_InitType = ffi.Void Function(
  ffi.Pointer<_typeobject> type,
  ffi.Pointer<PyStructSequence_Desc> desc,
);

typedef _dart_PyStructSequence_InitType = void Function(
  ffi.Pointer<_typeobject> type,
  ffi.Pointer<PyStructSequence_Desc> desc,
);

typedef _c_PyStructSequence_InitType2 = ffi.Int32 Function(
  ffi.Pointer<_typeobject> type,
  ffi.Pointer<PyStructSequence_Desc> desc,
);

typedef _dart_PyStructSequence_InitType2 = int Function(
  ffi.Pointer<_typeobject> type,
  ffi.Pointer<PyStructSequence_Desc> desc,
);

typedef _c_PyStructSequence_NewType = ffi.Pointer<_typeobject> Function(
  ffi.Pointer<PyStructSequence_Desc> desc,
);

typedef _dart_PyStructSequence_NewType = ffi.Pointer<_typeobject> Function(
  ffi.Pointer<PyStructSequence_Desc> desc,
);

typedef _c_PyStructSequence_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_typeobject> type,
);

typedef _dart_PyStructSequence_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_typeobject> type,
);

typedef _c_PyStructSequence_SetItem = ffi.Void Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Int64 arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _dart_PyStructSequence_SetItem = void Function(
  ffi.Pointer<PyObject> arg0,
  int arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _c_PyStructSequence_GetItem = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Int64 arg1,
);

typedef _dart_PyStructSequence_GetItem = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  int arg1,
);

typedef _c_PyNamespace_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> kwds,
);

typedef _dart_PyNamespace_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> kwds,
);

typedef _c_PyPickleBuffer_FromObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyPickleBuffer_FromObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyPickleBuffer_GetBuffer = ffi.Pointer<Py_buffer> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyPickleBuffer_GetBuffer = ffi.Pointer<Py_buffer> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyPickleBuffer_Release = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyPickleBuffer_Release = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyCodec_Register = ffi.Int32 Function(
  ffi.Pointer<PyObject> search_function,
);

typedef _dart_PyCodec_Register = int Function(
  ffi.Pointer<PyObject> search_function,
);

typedef _c_PyCodec_Lookup = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> encoding,
);

typedef _dart_PyCodec_Lookup = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> encoding,
);

typedef _c_PyCodec_Forget = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> encoding,
);

typedef _dart_PyCodec_Forget = int Function(
  ffi.Pointer<ffi.Int8> encoding,
);

typedef _c_PyCodec_KnownEncoding = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> encoding,
);

typedef _dart_PyCodec_KnownEncoding = int Function(
  ffi.Pointer<ffi.Int8> encoding,
);

typedef _c_PyCodec_Encode = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> object,
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyCodec_Encode = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> object,
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyCodec_Decode = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> object,
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyCodec_Decode = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> object,
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyCodec_LookupTextEncoding = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> alternate_command,
);

typedef _dart_PyCodec_LookupTextEncoding = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> alternate_command,
);

typedef _c_PyCodec_EncodeText = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> object,
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyCodec_EncodeText = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> object,
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyCodec_DecodeText = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> object,
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyCodec_DecodeText = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> object,
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyCodecInfo_GetIncrementalDecoder = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> codec_info,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyCodecInfo_GetIncrementalDecoder = ffi.Pointer<PyObject>
    Function(
  ffi.Pointer<PyObject> codec_info,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyCodecInfo_GetIncrementalEncoder = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> codec_info,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyCodecInfo_GetIncrementalEncoder = ffi.Pointer<PyObject>
    Function(
  ffi.Pointer<PyObject> codec_info,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyCodec_Encoder = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> encoding,
);

typedef _dart_PyCodec_Encoder = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> encoding,
);

typedef _c_PyCodec_Decoder = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> encoding,
);

typedef _dart_PyCodec_Decoder = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> encoding,
);

typedef _c_PyCodec_IncrementalEncoder = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyCodec_IncrementalEncoder = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyCodec_IncrementalDecoder = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyCodec_IncrementalDecoder = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyCodec_StreamReader = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<PyObject> stream,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyCodec_StreamReader = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<PyObject> stream,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyCodec_StreamWriter = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<PyObject> stream,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_PyCodec_StreamWriter = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<PyObject> stream,
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_PyCodec_RegisterError = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<PyObject> error,
);

typedef _dart_PyCodec_RegisterError = int Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<PyObject> error,
);

typedef _c_PyCodec_LookupError = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_PyCodec_LookupError = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_PyCodec_StrictErrors = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> exc,
);

typedef _dart_PyCodec_StrictErrors = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> exc,
);

typedef _c_PyCodec_IgnoreErrors = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> exc,
);

typedef _dart_PyCodec_IgnoreErrors = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> exc,
);

typedef _c_PyCodec_ReplaceErrors = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> exc,
);

typedef _dart_PyCodec_ReplaceErrors = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> exc,
);

typedef _c_PyCodec_XMLCharRefReplaceErrors = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> exc,
);

typedef _dart_PyCodec_XMLCharRefReplaceErrors = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> exc,
);

typedef _c_PyCodec_BackslashReplaceErrors = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> exc,
);

typedef _dart_PyCodec_BackslashReplaceErrors = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> exc,
);

typedef _c_PyCodec_NameReplaceErrors = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> exc,
);

typedef _dart_PyCodec_NameReplaceErrors = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> exc,
);

typedef _c_PyErr_SetNone = ffi.Void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyErr_SetNone = void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyErr_SetObject = ffi.Void Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyErr_SetObject = void Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyErr_SetString = ffi.Void Function(
  ffi.Pointer<PyObject> exception,
  ffi.Pointer<ffi.Int8> string,
);

typedef _dart_PyErr_SetString = void Function(
  ffi.Pointer<PyObject> exception,
  ffi.Pointer<ffi.Int8> string,
);

typedef _c_PyErr_Occurred = ffi.Pointer<PyObject> Function();

typedef _dart_PyErr_Occurred = ffi.Pointer<PyObject> Function();

typedef _c_PyErr_Clear = ffi.Void Function();

typedef _dart_PyErr_Clear = void Function();

typedef _c_PyErr_Fetch = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<PyObject>> arg0,
  ffi.Pointer<ffi.Pointer<PyObject>> arg1,
  ffi.Pointer<ffi.Pointer<PyObject>> arg2,
);

typedef _dart_PyErr_Fetch = void Function(
  ffi.Pointer<ffi.Pointer<PyObject>> arg0,
  ffi.Pointer<ffi.Pointer<PyObject>> arg1,
  ffi.Pointer<ffi.Pointer<PyObject>> arg2,
);

typedef _c_PyErr_Restore = ffi.Void Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _dart_PyErr_Restore = void Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _c_PyErr_GetExcInfo = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<PyObject>> arg0,
  ffi.Pointer<ffi.Pointer<PyObject>> arg1,
  ffi.Pointer<ffi.Pointer<PyObject>> arg2,
);

typedef _dart_PyErr_GetExcInfo = void Function(
  ffi.Pointer<ffi.Pointer<PyObject>> arg0,
  ffi.Pointer<ffi.Pointer<PyObject>> arg1,
  ffi.Pointer<ffi.Pointer<PyObject>> arg2,
);

typedef _c_PyErr_SetExcInfo = ffi.Void Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _dart_PyErr_SetExcInfo = void Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _c_Py_FatalError = ffi.Void Function(
  ffi.Pointer<ffi.Int8> message,
);

typedef _dart_Py_FatalError = void Function(
  ffi.Pointer<ffi.Int8> message,
);

typedef _c_PyErr_GivenExceptionMatches = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyErr_GivenExceptionMatches = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyErr_ExceptionMatches = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyErr_ExceptionMatches = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyErr_NormalizeException = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<PyObject>> arg0,
  ffi.Pointer<ffi.Pointer<PyObject>> arg1,
  ffi.Pointer<ffi.Pointer<PyObject>> arg2,
);

typedef _dart_PyErr_NormalizeException = void Function(
  ffi.Pointer<ffi.Pointer<PyObject>> arg0,
  ffi.Pointer<ffi.Pointer<PyObject>> arg1,
  ffi.Pointer<ffi.Pointer<PyObject>> arg2,
);

typedef _c_PyException_SetTraceback = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyException_SetTraceback = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyException_GetTraceback = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyException_GetTraceback = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyException_GetCause = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyException_GetCause = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyException_SetCause = ffi.Void Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyException_SetCause = void Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyException_GetContext = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyException_GetContext = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyException_SetContext = ffi.Void Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyException_SetContext = void Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyExceptionClass_Name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyExceptionClass_Name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyErr_BadArgument = ffi.Int32 Function();

typedef _dart_PyErr_BadArgument = int Function();

typedef _c_PyErr_NoMemory = ffi.Pointer<PyObject> Function();

typedef _dart_PyErr_NoMemory = ffi.Pointer<PyObject> Function();

typedef _c_PyErr_SetFromErrno = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyErr_SetFromErrno = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyErr_SetFromErrnoWithFilenameObject = ffi.Pointer<PyObject>
    Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyErr_SetFromErrnoWithFilenameObject = ffi.Pointer<PyObject>
    Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyErr_SetFromErrnoWithFilenameObjects = ffi.Pointer<PyObject>
    Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _dart_PyErr_SetFromErrnoWithFilenameObjects = ffi.Pointer<PyObject>
    Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _c_PyErr_SetFromErrnoWithFilename = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> exc,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _dart_PyErr_SetFromErrnoWithFilename = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> exc,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _c_PyErr_Format = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> exception,
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_PyErr_Format = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> exception,
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_PyErr_FormatV = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> exception,
  ffi.Pointer<ffi.Int8> format,
  ffi.Pointer<__va_list_tag> vargs,
);

typedef _dart_PyErr_FormatV = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> exception,
  ffi.Pointer<ffi.Int8> format,
  ffi.Pointer<__va_list_tag> vargs,
);

typedef _c_PyErr_SetImportErrorSubclass = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
  ffi.Pointer<PyObject> arg3,
);

typedef _dart_PyErr_SetImportErrorSubclass = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
  ffi.Pointer<PyObject> arg3,
);

typedef _c_PyErr_SetImportError = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _dart_PyErr_SetImportError = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _c_PyErr_BadInternalCall = ffi.Void Function();

typedef _dart_PyErr_BadInternalCall = void Function();

typedef _c_PyErr_BadInternalCall_1 = ffi.Void Function(
  ffi.Pointer<ffi.Int8> filename,
  ffi.Int32 lineno,
);

typedef _dart_PyErr_BadInternalCall_1 = void Function(
  ffi.Pointer<ffi.Int8> filename,
  int lineno,
);

typedef _c_PyErr_NewException = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<PyObject> base,
  ffi.Pointer<PyObject> dict,
);

typedef _dart_PyErr_NewException = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<PyObject> base,
  ffi.Pointer<PyObject> dict,
);

typedef _c_PyErr_NewExceptionWithDoc = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> doc,
  ffi.Pointer<PyObject> base,
  ffi.Pointer<PyObject> dict,
);

typedef _dart_PyErr_NewExceptionWithDoc = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> doc,
  ffi.Pointer<PyObject> base,
  ffi.Pointer<PyObject> dict,
);

typedef _c_PyErr_WriteUnraisable = ffi.Void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyErr_WriteUnraisable = void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyErr_CheckSignals = ffi.Int32 Function();

typedef _dart_PyErr_CheckSignals = int Function();

typedef _c_PyErr_SetInterrupt = ffi.Void Function();

typedef _dart_PyErr_SetInterrupt = void Function();

typedef _c_PyErr_SyntaxLocation = ffi.Void Function(
  ffi.Pointer<ffi.Int8> filename,
  ffi.Int32 lineno,
);

typedef _dart_PyErr_SyntaxLocation = void Function(
  ffi.Pointer<ffi.Int8> filename,
  int lineno,
);

typedef _c_PyErr_SyntaxLocationEx = ffi.Void Function(
  ffi.Pointer<ffi.Int8> filename,
  ffi.Int32 lineno,
  ffi.Int32 col_offset,
);

typedef _dart_PyErr_SyntaxLocationEx = void Function(
  ffi.Pointer<ffi.Int8> filename,
  int lineno,
  int col_offset,
);

typedef _c_PyErr_ProgramText = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> filename,
  ffi.Int32 lineno,
);

typedef _dart_PyErr_ProgramText = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> filename,
  int lineno,
);

typedef _c_PyUnicodeDecodeError_Create = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> object,
  ffi.Int64 length,
  ffi.Int64 start,
  ffi.Int64 end,
  ffi.Pointer<ffi.Int8> reason,
);

typedef _dart_PyUnicodeDecodeError_Create = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<ffi.Int8> object,
  int length,
  int start,
  int end,
  ffi.Pointer<ffi.Int8> reason,
);

typedef _c_PyUnicodeEncodeError_GetEncoding = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyUnicodeEncodeError_GetEncoding = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyUnicodeDecodeError_GetEncoding = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyUnicodeDecodeError_GetEncoding = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyUnicodeEncodeError_GetObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyUnicodeEncodeError_GetObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyUnicodeDecodeError_GetObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyUnicodeDecodeError_GetObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyUnicodeTranslateError_GetObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyUnicodeTranslateError_GetObject = ffi.Pointer<PyObject>
    Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyUnicodeEncodeError_GetStart = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _dart_PyUnicodeEncodeError_GetStart = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _c_PyUnicodeDecodeError_GetStart = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _dart_PyUnicodeDecodeError_GetStart = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _c_PyUnicodeTranslateError_GetStart = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _dart_PyUnicodeTranslateError_GetStart = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _c_PyUnicodeEncodeError_SetStart = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Int64 arg1,
);

typedef _dart_PyUnicodeEncodeError_SetStart = int Function(
  ffi.Pointer<PyObject> arg0,
  int arg1,
);

typedef _c_PyUnicodeDecodeError_SetStart = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Int64 arg1,
);

typedef _dart_PyUnicodeDecodeError_SetStart = int Function(
  ffi.Pointer<PyObject> arg0,
  int arg1,
);

typedef _c_PyUnicodeTranslateError_SetStart = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Int64 arg1,
);

typedef _dart_PyUnicodeTranslateError_SetStart = int Function(
  ffi.Pointer<PyObject> arg0,
  int arg1,
);

typedef _c_PyUnicodeEncodeError_GetEnd = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _dart_PyUnicodeEncodeError_GetEnd = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _c_PyUnicodeDecodeError_GetEnd = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _dart_PyUnicodeDecodeError_GetEnd = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _c_PyUnicodeTranslateError_GetEnd = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _dart_PyUnicodeTranslateError_GetEnd = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _c_PyUnicodeEncodeError_SetEnd = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Int64 arg1,
);

typedef _dart_PyUnicodeEncodeError_SetEnd = int Function(
  ffi.Pointer<PyObject> arg0,
  int arg1,
);

typedef _c_PyUnicodeDecodeError_SetEnd = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Int64 arg1,
);

typedef _dart_PyUnicodeDecodeError_SetEnd = int Function(
  ffi.Pointer<PyObject> arg0,
  int arg1,
);

typedef _c_PyUnicodeTranslateError_SetEnd = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Int64 arg1,
);

typedef _dart_PyUnicodeTranslateError_SetEnd = int Function(
  ffi.Pointer<PyObject> arg0,
  int arg1,
);

typedef _c_PyUnicodeEncodeError_GetReason = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyUnicodeEncodeError_GetReason = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyUnicodeDecodeError_GetReason = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyUnicodeDecodeError_GetReason = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyUnicodeTranslateError_GetReason = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyUnicodeTranslateError_GetReason = ffi.Pointer<PyObject>
    Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyUnicodeEncodeError_SetReason = ffi.Int32 Function(
  ffi.Pointer<PyObject> exc,
  ffi.Pointer<ffi.Int8> reason,
);

typedef _dart_PyUnicodeEncodeError_SetReason = int Function(
  ffi.Pointer<PyObject> exc,
  ffi.Pointer<ffi.Int8> reason,
);

typedef _c_PyUnicodeDecodeError_SetReason = ffi.Int32 Function(
  ffi.Pointer<PyObject> exc,
  ffi.Pointer<ffi.Int8> reason,
);

typedef _dart_PyUnicodeDecodeError_SetReason = int Function(
  ffi.Pointer<PyObject> exc,
  ffi.Pointer<ffi.Int8> reason,
);

typedef _c_PyUnicodeTranslateError_SetReason = ffi.Int32 Function(
  ffi.Pointer<PyObject> exc,
  ffi.Pointer<ffi.Int8> reason,
);

typedef _dart_PyUnicodeTranslateError_SetReason = int Function(
  ffi.Pointer<PyObject> exc,
  ffi.Pointer<ffi.Int8> reason,
);

typedef _c_PyOS_snprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Uint64 size,
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_PyOS_snprintf = int Function(
  ffi.Pointer<ffi.Int8> str,
  int size,
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_PyOS_vsnprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Uint64 size,
  ffi.Pointer<ffi.Int8> format,
  ffi.Pointer<__va_list_tag> va,
);

typedef _dart_PyOS_vsnprintf = int Function(
  ffi.Pointer<ffi.Int8> str,
  int size,
  ffi.Pointer<ffi.Int8> format,
  ffi.Pointer<__va_list_tag> va,
);

typedef _c_PyContext_New = ffi.Pointer<PyObject> Function();

typedef _dart_PyContext_New = ffi.Pointer<PyObject> Function();

typedef _c_PyContext_Copy = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyContext_Copy = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyContext_CopyCurrent = ffi.Pointer<PyObject> Function();

typedef _dart_PyContext_CopyCurrent = ffi.Pointer<PyObject> Function();

typedef _c_PyContext_Enter = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyContext_Enter = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyContext_Exit = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyContext_Exit = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyContextVar_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<PyObject> default_value,
);

typedef _dart_PyContextVar_New = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<PyObject> default_value,
);

typedef _c_PyContextVar_Get = ffi.Int32 Function(
  ffi.Pointer<PyObject> var_1,
  ffi.Pointer<PyObject> default_value,
  ffi.Pointer<ffi.Pointer<PyObject>> value,
);

typedef _dart_PyContextVar_Get = int Function(
  ffi.Pointer<PyObject> var_1,
  ffi.Pointer<PyObject> default_value,
  ffi.Pointer<ffi.Pointer<PyObject>> value,
);

typedef _c_PyContextVar_Set = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> var_1,
  ffi.Pointer<PyObject> value,
);

typedef _dart_PyContextVar_Set = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> var_1,
  ffi.Pointer<PyObject> value,
);

typedef _c_PyContextVar_Reset = ffi.Int32 Function(
  ffi.Pointer<PyObject> var_1,
  ffi.Pointer<PyObject> token,
);

typedef _dart_PyContextVar_Reset = int Function(
  ffi.Pointer<PyObject> var_1,
  ffi.Pointer<PyObject> token,
);

typedef _c_PyContext_NewHamtForTests = ffi.Pointer<PyObject> Function();

typedef _dart_PyContext_NewHamtForTests = ffi.Pointer<PyObject> Function();

typedef _c_PyContext_ClearFreeList = ffi.Int32 Function();

typedef _dart_PyContext_ClearFreeList = int Function();

typedef _c_PyArena_New = ffi.Pointer<_arena> Function();

typedef _dart_PyArena_New = ffi.Pointer<_arena> Function();

typedef _c_PyArena_Free = ffi.Void Function(
  ffi.Pointer<_arena> arg0,
);

typedef _dart_PyArena_Free = void Function(
  ffi.Pointer<_arena> arg0,
);

typedef _c_PyArena_Malloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<_arena> arg0,
  ffi.Uint64 size,
);

typedef _dart_PyArena_Malloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<_arena> arg0,
  int size,
);

typedef _c_PyArena_AddPyObject = ffi.Int32 Function(
  ffi.Pointer<_arena> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyArena_AddPyObject = int Function(
  ffi.Pointer<_arena> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_Py_VaBuildValue_SizeT = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<__va_list_tag> arg1,
);

typedef _dart_Py_VaBuildValue_SizeT = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<__va_list_tag> arg1,
);

typedef _c_Py_VaBuildStack_SizeT = ffi.Pointer<ffi.Pointer<PyObject>> Function(
  ffi.Pointer<ffi.Pointer<PyObject>> small_stack,
  ffi.Int64 small_stack_len,
  ffi.Pointer<ffi.Int8> format,
  ffi.Pointer<__va_list_tag> va,
  ffi.Pointer<ffi.Int64> p_nargs,
);

typedef _dart_Py_VaBuildStack_SizeT = ffi.Pointer<ffi.Pointer<PyObject>>
    Function(
  ffi.Pointer<ffi.Pointer<PyObject>> small_stack,
  int small_stack_len,
  ffi.Pointer<ffi.Int8> format,
  ffi.Pointer<__va_list_tag> va,
  ffi.Pointer<ffi.Int64> p_nargs,
);

typedef _c_PyArg_Parse = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_PyArg_Parse = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_PyArg_ParseTuple = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_PyArg_ParseTuple = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_PyArg_ParseTupleAndKeywords = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg3,
);

typedef _dart_PyArg_ParseTupleAndKeywords = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg3,
);

typedef _c_PyArg_VaParse = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _dart_PyArg_VaParse = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _c_PyArg_VaParseTupleAndKeywords = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg3,
  ffi.Pointer<__va_list_tag> arg4,
);

typedef _dart_PyArg_VaParseTupleAndKeywords = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg3,
  ffi.Pointer<__va_list_tag> arg4,
);

typedef _c_PyArg_ValidateKeywordArguments = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyArg_ValidateKeywordArguments = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyArg_UnpackTuple = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int64 arg2,
  ffi.Int64 arg3,
);

typedef _dart_PyArg_UnpackTuple = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  int arg3,
);

typedef _c_Py_BuildValue = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_Py_BuildValue = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_Py_BuildValue_SizeT = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_Py_BuildValue_SizeT = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_PyArg_UnpackStack = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<PyObject>> args,
  ffi.Int64 nargs,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int64 min,
  ffi.Int64 max,
);

typedef _dart_PyArg_UnpackStack = int Function(
  ffi.Pointer<ffi.Pointer<PyObject>> args,
  int nargs,
  ffi.Pointer<ffi.Int8> name,
  int min,
  int max,
);

typedef _c_PyArg_NoKeywords = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> funcname,
  ffi.Pointer<PyObject> kwargs,
);

typedef _dart_PyArg_NoKeywords = int Function(
  ffi.Pointer<ffi.Int8> funcname,
  ffi.Pointer<PyObject> kwargs,
);

typedef _c_PyArg_NoPositional = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> funcname,
  ffi.Pointer<PyObject> args,
);

typedef _dart_PyArg_NoPositional = int Function(
  ffi.Pointer<ffi.Int8> funcname,
  ffi.Pointer<PyObject> args,
);

typedef _c_PyArg_BadArgument = ffi.Void Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<PyObject> arg3,
);

typedef _dart_PyArg_BadArgument = void Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<PyObject> arg3,
);

typedef _c_PyArg_CheckPositional = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int64 arg1,
  ffi.Int64 arg2,
  ffi.Int64 arg3,
);

typedef _dart_PyArg_CheckPositional = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_Py_VaBuildValue = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<__va_list_tag> arg1,
);

typedef _dart_Py_VaBuildValue = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<__va_list_tag> arg1,
);

typedef _c_Py_VaBuildStack = ffi.Pointer<ffi.Pointer<PyObject>> Function(
  ffi.Pointer<ffi.Pointer<PyObject>> small_stack,
  ffi.Int64 small_stack_len,
  ffi.Pointer<ffi.Int8> format,
  ffi.Pointer<__va_list_tag> va,
  ffi.Pointer<ffi.Int64> p_nargs,
);

typedef _dart_Py_VaBuildStack = ffi.Pointer<ffi.Pointer<PyObject>> Function(
  ffi.Pointer<ffi.Pointer<PyObject>> small_stack,
  int small_stack_len,
  ffi.Pointer<ffi.Int8> format,
  ffi.Pointer<__va_list_tag> va,
  ffi.Pointer<ffi.Int64> p_nargs,
);

typedef _c_PyArg_ParseTupleAndKeywordsFast = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<_PyArg_Parser> arg2,
);

typedef _dart_PyArg_ParseTupleAndKeywordsFast = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<_PyArg_Parser> arg2,
);

typedef _c_PyArg_ParseStack = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<PyObject>> args,
  ffi.Int64 nargs,
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_PyArg_ParseStack = int Function(
  ffi.Pointer<ffi.Pointer<PyObject>> args,
  int nargs,
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_PyArg_ParseStackAndKeywords = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<PyObject>> args,
  ffi.Int64 nargs,
  ffi.Pointer<PyObject> kwnames,
  ffi.Pointer<_PyArg_Parser> arg3,
);

typedef _dart_PyArg_ParseStackAndKeywords = int Function(
  ffi.Pointer<ffi.Pointer<PyObject>> args,
  int nargs,
  ffi.Pointer<PyObject> kwnames,
  ffi.Pointer<_PyArg_Parser> arg3,
);

typedef _c_PyArg_VaParseTupleAndKeywordsFast = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<_PyArg_Parser> arg2,
  ffi.Pointer<__va_list_tag> arg3,
);

typedef _dart_PyArg_VaParseTupleAndKeywordsFast = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<_PyArg_Parser> arg2,
  ffi.Pointer<__va_list_tag> arg3,
);

typedef _c_PyArg_UnpackKeywords = ffi.Pointer<ffi.Pointer<PyObject>> Function(
  ffi.Pointer<ffi.Pointer<PyObject>> args,
  ffi.Int64 nargs,
  ffi.Pointer<PyObject> kwargs,
  ffi.Pointer<PyObject> kwnames,
  ffi.Pointer<_PyArg_Parser> parser,
  ffi.Int32 minpos,
  ffi.Int32 maxpos,
  ffi.Int32 minkw,
  ffi.Pointer<ffi.Pointer<PyObject>> buf,
);

typedef _dart_PyArg_UnpackKeywords = ffi.Pointer<ffi.Pointer<PyObject>>
    Function(
  ffi.Pointer<ffi.Pointer<PyObject>> args,
  int nargs,
  ffi.Pointer<PyObject> kwargs,
  ffi.Pointer<PyObject> kwnames,
  ffi.Pointer<_PyArg_Parser> parser,
  int minpos,
  int maxpos,
  int minkw,
  ffi.Pointer<ffi.Pointer<PyObject>> buf,
);

typedef _c_PyArg_Fini = ffi.Void Function();

typedef _dart_PyArg_Fini = void Function();

typedef _c_PyModule_AddObject = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _dart_PyModule_AddObject = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _c_PyModule_AddIntConstant = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int64 arg2,
);

typedef _dart_PyModule_AddIntConstant = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_PyModule_AddStringConstant = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_PyModule_AddStringConstant = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_PyModule_SetDocString = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_PyModule_SetDocString = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_PyModule_AddFunctions = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyMethodDef> arg1,
);

typedef _dart_PyModule_AddFunctions = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyMethodDef> arg1,
);

typedef _c_PyModule_ExecDef = ffi.Int32 Function(
  ffi.Pointer<PyObject> module,
  ffi.Pointer<PyModuleDef> def,
);

typedef _dart_PyModule_ExecDef = int Function(
  ffi.Pointer<PyObject> module,
  ffi.Pointer<PyModuleDef> def,
);

typedef _c_PyModule_Create2 = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyModuleDef> arg0,
  ffi.Int32 apiver,
);

typedef _dart_PyModule_Create2 = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyModuleDef> arg0,
  int apiver,
);

typedef _c_PyModule_CreateInitialized = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyModuleDef> arg0,
  ffi.Int32 apiver,
);

typedef _dart_PyModule_CreateInitialized = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyModuleDef> arg0,
  int apiver,
);

typedef _c_PyModule_FromDefAndSpec2 = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyModuleDef> def,
  ffi.Pointer<PyObject> spec,
  ffi.Int32 module_api_version,
);

typedef _dart_PyModule_FromDefAndSpec2 = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyModuleDef> def,
  ffi.Pointer<PyObject> spec,
  int module_api_version,
);

typedef _c_PyCode_New = ffi.Pointer<PyCodeObject> Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<PyObject> arg5,
  ffi.Pointer<PyObject> arg6,
  ffi.Pointer<PyObject> arg7,
  ffi.Pointer<PyObject> arg8,
  ffi.Pointer<PyObject> arg9,
  ffi.Pointer<PyObject> arg10,
  ffi.Pointer<PyObject> arg11,
  ffi.Pointer<PyObject> arg12,
  ffi.Int32 arg13,
  ffi.Pointer<PyObject> arg14,
);

typedef _dart_PyCode_New = ffi.Pointer<PyCodeObject> Function(
  int arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  ffi.Pointer<PyObject> arg5,
  ffi.Pointer<PyObject> arg6,
  ffi.Pointer<PyObject> arg7,
  ffi.Pointer<PyObject> arg8,
  ffi.Pointer<PyObject> arg9,
  ffi.Pointer<PyObject> arg10,
  ffi.Pointer<PyObject> arg11,
  ffi.Pointer<PyObject> arg12,
  int arg13,
  ffi.Pointer<PyObject> arg14,
);

typedef _c_PyCode_NewWithPosOnlyArgs = ffi.Pointer<PyCodeObject> Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Pointer<PyObject> arg6,
  ffi.Pointer<PyObject> arg7,
  ffi.Pointer<PyObject> arg8,
  ffi.Pointer<PyObject> arg9,
  ffi.Pointer<PyObject> arg10,
  ffi.Pointer<PyObject> arg11,
  ffi.Pointer<PyObject> arg12,
  ffi.Pointer<PyObject> arg13,
  ffi.Int32 arg14,
  ffi.Pointer<PyObject> arg15,
);

typedef _dart_PyCode_NewWithPosOnlyArgs = ffi.Pointer<PyCodeObject> Function(
  int arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  ffi.Pointer<PyObject> arg6,
  ffi.Pointer<PyObject> arg7,
  ffi.Pointer<PyObject> arg8,
  ffi.Pointer<PyObject> arg9,
  ffi.Pointer<PyObject> arg10,
  ffi.Pointer<PyObject> arg11,
  ffi.Pointer<PyObject> arg12,
  ffi.Pointer<PyObject> arg13,
  int arg14,
  ffi.Pointer<PyObject> arg15,
);

typedef _c_PyCode_NewEmpty = ffi.Pointer<PyCodeObject> Function(
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> funcname,
  ffi.Int32 firstlineno,
);

typedef _dart_PyCode_NewEmpty = ffi.Pointer<PyCodeObject> Function(
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> funcname,
  int firstlineno,
);

typedef _c_PyCode_Addr2Line = ffi.Int32 Function(
  ffi.Pointer<PyCodeObject> arg0,
  ffi.Int32 arg1,
);

typedef _dart_PyCode_Addr2Line = int Function(
  ffi.Pointer<PyCodeObject> arg0,
  int arg1,
);

typedef _c_PyCode_CheckLineNumber = ffi.Int32 Function(
  ffi.Pointer<PyCodeObject> co,
  ffi.Int32 lasti,
  ffi.Pointer<PyAddrPair> bounds,
);

typedef _dart_PyCode_CheckLineNumber = int Function(
  ffi.Pointer<PyCodeObject> co,
  int lasti,
  ffi.Pointer<PyAddrPair> bounds,
);

typedef _c_PyCode_ConstantKey = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> obj,
);

typedef _dart_PyCode_ConstantKey = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> obj,
);

typedef _c_PyCode_Optimize = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> code,
  ffi.Pointer<PyObject> consts,
  ffi.Pointer<PyObject> names,
  ffi.Pointer<PyObject> lnotab,
);

typedef _dart_PyCode_Optimize = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> code,
  ffi.Pointer<PyObject> consts,
  ffi.Pointer<PyObject> names,
  ffi.Pointer<PyObject> lnotab,
);

typedef _c_PyCode_GetExtra = ffi.Int32 Function(
  ffi.Pointer<PyObject> code,
  ffi.Int64 index,
  ffi.Pointer<ffi.Pointer<ffi.Void>> extra,
);

typedef _dart_PyCode_GetExtra = int Function(
  ffi.Pointer<PyObject> code,
  int index,
  ffi.Pointer<ffi.Pointer<ffi.Void>> extra,
);

typedef _c_PyCode_SetExtra = ffi.Int32 Function(
  ffi.Pointer<PyObject> code,
  ffi.Int64 index,
  ffi.Pointer<ffi.Void> extra,
);

typedef _dart_PyCode_SetExtra = int Function(
  ffi.Pointer<PyObject> code,
  int index,
  ffi.Pointer<ffi.Void> extra,
);

typedef _c_PyNode_Compile = ffi.Pointer<PyCodeObject> Function(
  ffi.Pointer<_node> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_PyNode_Compile = ffi.Pointer<PyCodeObject> Function(
  ffi.Pointer<_node> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_PyAST_CompileEx = ffi.Pointer<PyCodeObject> Function(
  ffi.Pointer<_mod> mod,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<PyCompilerFlags> flags,
  ffi.Int32 optimize,
  ffi.Pointer<_arena> arena,
);

typedef _dart_PyAST_CompileEx = ffi.Pointer<PyCodeObject> Function(
  ffi.Pointer<_mod> mod,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<PyCompilerFlags> flags,
  int optimize,
  ffi.Pointer<_arena> arena,
);

typedef _c_PyAST_CompileObject = ffi.Pointer<PyCodeObject> Function(
  ffi.Pointer<_mod> mod,
  ffi.Pointer<PyObject> filename,
  ffi.Pointer<PyCompilerFlags> flags,
  ffi.Int32 optimize,
  ffi.Pointer<_arena> arena,
);

typedef _dart_PyAST_CompileObject = ffi.Pointer<PyCodeObject> Function(
  ffi.Pointer<_mod> mod,
  ffi.Pointer<PyObject> filename,
  ffi.Pointer<PyCompilerFlags> flags,
  int optimize,
  ffi.Pointer<_arena> arena,
);

typedef _c_PyFuture_FromAST = ffi.Pointer<PyFutureFeatures> Function(
  ffi.Pointer<_mod> mod,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _dart_PyFuture_FromAST = ffi.Pointer<PyFutureFeatures> Function(
  ffi.Pointer<_mod> mod,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _c_PyFuture_FromASTObject = ffi.Pointer<PyFutureFeatures> Function(
  ffi.Pointer<_mod> mod,
  ffi.Pointer<PyObject> filename,
);

typedef _dart_PyFuture_FromASTObject = ffi.Pointer<PyFutureFeatures> Function(
  ffi.Pointer<_mod> mod,
  ffi.Pointer<PyObject> filename,
);

typedef _c_Py_Mangle = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> p,
  ffi.Pointer<PyObject> name,
);

typedef _dart_Py_Mangle = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> p,
  ffi.Pointer<PyObject> name,
);

typedef _c_PyCompile_OpcodeStackEffect = ffi.Int32 Function(
  ffi.Int32 opcode,
  ffi.Int32 oparg,
);

typedef _dart_PyCompile_OpcodeStackEffect = int Function(
  int opcode,
  int oparg,
);

typedef _c_PyCompile_OpcodeStackEffectWithJump = ffi.Int32 Function(
  ffi.Int32 opcode,
  ffi.Int32 oparg,
  ffi.Int32 jump,
);

typedef _dart_PyCompile_OpcodeStackEffectWithJump = int Function(
  int opcode,
  int oparg,
  int jump,
);

typedef _c_PyAST_Optimize = ffi.Int32 Function(
  ffi.Pointer<_mod> arg0,
  ffi.Pointer<_arena> arena,
  ffi.Int32 optimize,
);

typedef _dart_PyAST_Optimize = int Function(
  ffi.Pointer<_mod> arg0,
  ffi.Pointer<_arena> arena,
  int optimize,
);

typedef _c_PyRun_SimpleStringFlags = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<PyCompilerFlags> arg1,
);

typedef _dart_PyRun_SimpleStringFlags = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<PyCompilerFlags> arg1,
);

typedef _c_PyRun_AnyFileExFlags = ffi.Int32 Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Int32 closeit,
  ffi.Pointer<PyCompilerFlags> flags,
);

typedef _dart_PyRun_AnyFileExFlags = int Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<ffi.Int8> filename,
  int closeit,
  ffi.Pointer<PyCompilerFlags> flags,
);

typedef _c_PyRun_SimpleFileExFlags = ffi.Int32 Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Int32 closeit,
  ffi.Pointer<PyCompilerFlags> flags,
);

typedef _dart_PyRun_SimpleFileExFlags = int Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<ffi.Int8> filename,
  int closeit,
  ffi.Pointer<PyCompilerFlags> flags,
);

typedef _c_PyRun_InteractiveOneFlags = ffi.Int32 Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<PyCompilerFlags> flags,
);

typedef _dart_PyRun_InteractiveOneFlags = int Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<PyCompilerFlags> flags,
);

typedef _c_PyRun_InteractiveOneObject = ffi.Int32 Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<PyObject> filename,
  ffi.Pointer<PyCompilerFlags> flags,
);

typedef _dart_PyRun_InteractiveOneObject = int Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<PyObject> filename,
  ffi.Pointer<PyCompilerFlags> flags,
);

typedef _c_PyRun_InteractiveLoopFlags = ffi.Int32 Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<PyCompilerFlags> flags,
);

typedef _dart_PyRun_InteractiveLoopFlags = int Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<PyCompilerFlags> flags,
);

typedef _c_PyParser_ASTFromString = ffi.Pointer<_mod> Function(
  ffi.Pointer<ffi.Int8> s,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Int32 start,
  ffi.Pointer<PyCompilerFlags> flags,
  ffi.Pointer<_arena> arena,
);

typedef _dart_PyParser_ASTFromString = ffi.Pointer<_mod> Function(
  ffi.Pointer<ffi.Int8> s,
  ffi.Pointer<ffi.Int8> filename,
  int start,
  ffi.Pointer<PyCompilerFlags> flags,
  ffi.Pointer<_arena> arena,
);

typedef _c_PyParser_ASTFromStringObject = ffi.Pointer<_mod> Function(
  ffi.Pointer<ffi.Int8> s,
  ffi.Pointer<PyObject> filename,
  ffi.Int32 start,
  ffi.Pointer<PyCompilerFlags> flags,
  ffi.Pointer<_arena> arena,
);

typedef _dart_PyParser_ASTFromStringObject = ffi.Pointer<_mod> Function(
  ffi.Pointer<ffi.Int8> s,
  ffi.Pointer<PyObject> filename,
  int start,
  ffi.Pointer<PyCompilerFlags> flags,
  ffi.Pointer<_arena> arena,
);

typedef _c_PyParser_ASTFromFile = ffi.Pointer<_mod> Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> enc,
  ffi.Int32 start,
  ffi.Pointer<ffi.Int8> ps1,
  ffi.Pointer<ffi.Int8> ps2,
  ffi.Pointer<PyCompilerFlags> flags,
  ffi.Pointer<ffi.Int32> errcode,
  ffi.Pointer<_arena> arena,
);

typedef _dart_PyParser_ASTFromFile = ffi.Pointer<_mod> Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> enc,
  int start,
  ffi.Pointer<ffi.Int8> ps1,
  ffi.Pointer<ffi.Int8> ps2,
  ffi.Pointer<PyCompilerFlags> flags,
  ffi.Pointer<ffi.Int32> errcode,
  ffi.Pointer<_arena> arena,
);

typedef _c_PyParser_ASTFromFileObject = ffi.Pointer<_mod> Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<PyObject> filename,
  ffi.Pointer<ffi.Int8> enc,
  ffi.Int32 start,
  ffi.Pointer<ffi.Int8> ps1,
  ffi.Pointer<ffi.Int8> ps2,
  ffi.Pointer<PyCompilerFlags> flags,
  ffi.Pointer<ffi.Int32> errcode,
  ffi.Pointer<_arena> arena,
);

typedef _dart_PyParser_ASTFromFileObject = ffi.Pointer<_mod> Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<PyObject> filename,
  ffi.Pointer<ffi.Int8> enc,
  int start,
  ffi.Pointer<ffi.Int8> ps1,
  ffi.Pointer<ffi.Int8> ps2,
  ffi.Pointer<PyCompilerFlags> flags,
  ffi.Pointer<ffi.Int32> errcode,
  ffi.Pointer<_arena> arena,
);

typedef _c_PyParser_SimpleParseStringFlags = ffi.Pointer<_node> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_PyParser_SimpleParseStringFlags = ffi.Pointer<_node> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
);

typedef _c_PyParser_SimpleParseStringFlagsFilename = ffi.Pointer<_node>
    Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
);

typedef _dart_PyParser_SimpleParseStringFlagsFilename = ffi.Pointer<_node>
    Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  int arg3,
);

typedef _c_PyParser_SimpleParseFileFlags = ffi.Pointer<_node> Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
);

typedef _dart_PyParser_SimpleParseFileFlags = ffi.Pointer<_node> Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  int arg3,
);

typedef _c_PyRun_StringFlags = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<PyObject> arg2,
  ffi.Pointer<PyObject> arg3,
  ffi.Pointer<PyCompilerFlags> arg4,
);

typedef _dart_PyRun_StringFlags = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  ffi.Pointer<PyObject> arg2,
  ffi.Pointer<PyObject> arg3,
  ffi.Pointer<PyCompilerFlags> arg4,
);

typedef _c_PyRun_FileExFlags = ffi.Pointer<PyObject> Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Int32 start,
  ffi.Pointer<PyObject> globals,
  ffi.Pointer<PyObject> locals,
  ffi.Int32 closeit,
  ffi.Pointer<PyCompilerFlags> flags,
);

typedef _dart_PyRun_FileExFlags = ffi.Pointer<PyObject> Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<ffi.Int8> filename,
  int start,
  ffi.Pointer<PyObject> globals,
  ffi.Pointer<PyObject> locals,
  int closeit,
  ffi.Pointer<PyCompilerFlags> flags,
);

typedef _c_Py_CompileStringExFlags = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Int32 start,
  ffi.Pointer<PyCompilerFlags> flags,
  ffi.Int32 optimize,
);

typedef _dart_Py_CompileStringExFlags = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int8> filename,
  int start,
  ffi.Pointer<PyCompilerFlags> flags,
  int optimize,
);

typedef _c_Py_CompileStringObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<PyObject> filename,
  ffi.Int32 start,
  ffi.Pointer<PyCompilerFlags> flags,
  ffi.Int32 optimize,
);

typedef _dart_Py_CompileStringObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<PyObject> filename,
  int start,
  ffi.Pointer<PyCompilerFlags> flags,
  int optimize,
);

typedef _c_Py_SymtableString = ffi.Pointer<symtable> Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Int32 start,
);

typedef _dart_Py_SymtableString = ffi.Pointer<symtable> Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int8> filename,
  int start,
);

typedef _c_Py_SourceAsString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<PyObject> cmd,
  ffi.Pointer<ffi.Int8> funcname,
  ffi.Pointer<ffi.Int8> what,
  ffi.Pointer<PyCompilerFlags> cf,
  ffi.Pointer<ffi.Pointer<PyObject>> cmd_copy,
);

typedef _dart_Py_SourceAsString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<PyObject> cmd,
  ffi.Pointer<ffi.Int8> funcname,
  ffi.Pointer<ffi.Int8> what,
  ffi.Pointer<PyCompilerFlags> cf,
  ffi.Pointer<ffi.Pointer<PyObject>> cmd_copy,
);

typedef _c_Py_SymtableStringObject = ffi.Pointer<symtable> Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<PyObject> filename,
  ffi.Int32 start,
);

typedef _dart_Py_SymtableStringObject = ffi.Pointer<symtable> Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<PyObject> filename,
  int start,
);

typedef _c_Py_SymtableStringObjectFlags = ffi.Pointer<symtable> Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<PyObject> filename,
  ffi.Int32 start,
  ffi.Pointer<PyCompilerFlags> flags,
);

typedef _dart_Py_SymtableStringObjectFlags = ffi.Pointer<symtable> Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<PyObject> filename,
  int start,
  ffi.Pointer<PyCompilerFlags> flags,
);

typedef _c_PyErr_Print = ffi.Void Function();

typedef _dart_PyErr_Print = void Function();

typedef _c_PyErr_PrintEx = ffi.Void Function(
  ffi.Int32 arg0,
);

typedef _dart_PyErr_PrintEx = void Function(
  int arg0,
);

typedef _c_PyErr_Display = ffi.Void Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _dart_PyErr_Display = void Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _c_PyRun_String = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 s,
  ffi.Pointer<PyObject> g,
  ffi.Pointer<PyObject> l,
);

typedef _dart_PyRun_String = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> str,
  int s,
  ffi.Pointer<PyObject> g,
  ffi.Pointer<PyObject> l,
);

typedef _c_PyRun_AnyFile = ffi.Int32 Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_PyRun_AnyFile = int Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_PyRun_AnyFileEx = ffi.Int32 Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 closeit,
);

typedef _dart_PyRun_AnyFileEx = int Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<ffi.Int8> name,
  int closeit,
);

typedef _c_PyRun_AnyFileFlags = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<PyCompilerFlags> arg2,
);

typedef _dart_PyRun_AnyFileFlags = int Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<PyCompilerFlags> arg2,
);

typedef _c_PyRun_SimpleString = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> s,
);

typedef _dart_PyRun_SimpleString = int Function(
  ffi.Pointer<ffi.Int8> s,
);

typedef _c_PyRun_SimpleFile = ffi.Int32 Function(
  ffi.Pointer<FILE> f,
  ffi.Pointer<ffi.Int8> p,
);

typedef _dart_PyRun_SimpleFile = int Function(
  ffi.Pointer<FILE> f,
  ffi.Pointer<ffi.Int8> p,
);

typedef _c_PyRun_SimpleFileEx = ffi.Int32 Function(
  ffi.Pointer<FILE> f,
  ffi.Pointer<ffi.Int8> p,
  ffi.Int32 c,
);

typedef _dart_PyRun_SimpleFileEx = int Function(
  ffi.Pointer<FILE> f,
  ffi.Pointer<ffi.Int8> p,
  int c,
);

typedef _c_PyRun_InteractiveOne = ffi.Int32 Function(
  ffi.Pointer<FILE> f,
  ffi.Pointer<ffi.Int8> p,
);

typedef _dart_PyRun_InteractiveOne = int Function(
  ffi.Pointer<FILE> f,
  ffi.Pointer<ffi.Int8> p,
);

typedef _c_PyRun_InteractiveLoop = ffi.Int32 Function(
  ffi.Pointer<FILE> f,
  ffi.Pointer<ffi.Int8> p,
);

typedef _dart_PyRun_InteractiveLoop = int Function(
  ffi.Pointer<FILE> f,
  ffi.Pointer<ffi.Int8> p,
);

typedef _c_PyRun_File = ffi.Pointer<PyObject> Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<ffi.Int8> p,
  ffi.Int32 s,
  ffi.Pointer<PyObject> g,
  ffi.Pointer<PyObject> l,
);

typedef _dart_PyRun_File = ffi.Pointer<PyObject> Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<ffi.Int8> p,
  int s,
  ffi.Pointer<PyObject> g,
  ffi.Pointer<PyObject> l,
);

typedef _c_PyRun_FileEx = ffi.Pointer<PyObject> Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<ffi.Int8> p,
  ffi.Int32 s,
  ffi.Pointer<PyObject> g,
  ffi.Pointer<PyObject> l,
  ffi.Int32 c,
);

typedef _dart_PyRun_FileEx = ffi.Pointer<PyObject> Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<ffi.Int8> p,
  int s,
  ffi.Pointer<PyObject> g,
  ffi.Pointer<PyObject> l,
  int c,
);

typedef _c_PyRun_FileFlags = ffi.Pointer<PyObject> Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<ffi.Int8> p,
  ffi.Int32 s,
  ffi.Pointer<PyObject> g,
  ffi.Pointer<PyObject> l,
  ffi.Pointer<PyCompilerFlags> flags,
);

typedef _dart_PyRun_FileFlags = ffi.Pointer<PyObject> Function(
  ffi.Pointer<FILE> fp,
  ffi.Pointer<ffi.Int8> p,
  int s,
  ffi.Pointer<PyObject> g,
  ffi.Pointer<PyObject> l,
  ffi.Pointer<PyCompilerFlags> flags,
);

typedef _c_PyOS_Readline = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<FILE> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_PyOS_Readline = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<FILE> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _typedefC_6 = ffi.Int32 Function();

typedef _typedefC_7 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<FILE>,
  ffi.Pointer<FILE>,
  ffi.Pointer<ffi.Int8>,
);

typedef _c_Py_Initialize = ffi.Void Function();

typedef _dart_Py_Initialize = void Function();

typedef _c_Py_InitializeEx = ffi.Void Function(
  ffi.Int32 arg0,
);

typedef _dart_Py_InitializeEx = void Function(
  int arg0,
);

typedef _c_Py_Finalize = ffi.Void Function();

typedef _dart_Py_Finalize = void Function();

typedef _c_Py_FinalizeEx = ffi.Int32 Function();

typedef _dart_Py_FinalizeEx = int Function();

typedef _c_Py_IsInitialized = ffi.Int32 Function();

typedef _dart_Py_IsInitialized = int Function();

typedef _c_Py_NewInterpreter = ffi.Pointer<_ts> Function();

typedef _dart_Py_NewInterpreter = ffi.Pointer<_ts> Function();

typedef _c_Py_EndInterpreter = ffi.Void Function(
  ffi.Pointer<_ts> arg0,
);

typedef _dart_Py_EndInterpreter = void Function(
  ffi.Pointer<_ts> arg0,
);

typedef _typedefC_8 = ffi.Void Function();

typedef _c_Py_AtExit = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_8>> func,
);

typedef _dart_Py_AtExit = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_8>> func,
);

typedef _c_Py_Exit = ffi.Void Function(
  ffi.Int32 arg0,
);

typedef _dart_Py_Exit = void Function(
  int arg0,
);

typedef _c_Py_Main = ffi.Int32 Function(
  ffi.Int32 argc,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> argv,
);

typedef _dart_Py_Main = int Function(
  int argc,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> argv,
);

typedef _c_Py_BytesMain = ffi.Int32 Function(
  ffi.Int32 argc,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
);

typedef _dart_Py_BytesMain = int Function(
  int argc,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
);

typedef _c_Py_SetProgramName = ffi.Void Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart_Py_SetProgramName = void Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _c_Py_GetProgramName = ffi.Pointer<ffi.Int32> Function();

typedef _dart_Py_GetProgramName = ffi.Pointer<ffi.Int32> Function();

typedef _c_Py_SetPythonHome = ffi.Void Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart_Py_SetPythonHome = void Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _c_Py_GetPythonHome = ffi.Pointer<ffi.Int32> Function();

typedef _dart_Py_GetPythonHome = ffi.Pointer<ffi.Int32> Function();

typedef _c_Py_GetProgramFullPath = ffi.Pointer<ffi.Int32> Function();

typedef _dart_Py_GetProgramFullPath = ffi.Pointer<ffi.Int32> Function();

typedef _c_Py_GetPrefix = ffi.Pointer<ffi.Int32> Function();

typedef _dart_Py_GetPrefix = ffi.Pointer<ffi.Int32> Function();

typedef _c_Py_GetExecPrefix = ffi.Pointer<ffi.Int32> Function();

typedef _dart_Py_GetExecPrefix = ffi.Pointer<ffi.Int32> Function();

typedef _c_Py_GetPath = ffi.Pointer<ffi.Int32> Function();

typedef _dart_Py_GetPath = ffi.Pointer<ffi.Int32> Function();

typedef _c_Py_SetPath = ffi.Void Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart_Py_SetPath = void Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _c_Py_GetVersion = ffi.Pointer<ffi.Int8> Function();

typedef _dart_Py_GetVersion = ffi.Pointer<ffi.Int8> Function();

typedef _c_Py_GetPlatform = ffi.Pointer<ffi.Int8> Function();

typedef _dart_Py_GetPlatform = ffi.Pointer<ffi.Int8> Function();

typedef _c_Py_GetCopyright = ffi.Pointer<ffi.Int8> Function();

typedef _dart_Py_GetCopyright = ffi.Pointer<ffi.Int8> Function();

typedef _c_Py_GetCompiler = ffi.Pointer<ffi.Int8> Function();

typedef _dart_Py_GetCompiler = ffi.Pointer<ffi.Int8> Function();

typedef _c_Py_GetBuildInfo = ffi.Pointer<ffi.Int8> Function();

typedef _dart_Py_GetBuildInfo = ffi.Pointer<ffi.Int8> Function();

typedef PyOS_sighandler_t = ffi.Void Function(
  ffi.Int32,
);

typedef _c_PyOS_getsig = ffi.Pointer<ffi.NativeFunction<PyOS_sighandler_t>>
    Function(
  ffi.Int32 arg0,
);

typedef _dart_PyOS_getsig = ffi.Pointer<ffi.NativeFunction<PyOS_sighandler_t>>
    Function(
  int arg0,
);

typedef _c_PyOS_setsig = ffi.Pointer<ffi.NativeFunction<PyOS_sighandler_t>>
    Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.NativeFunction<PyOS_sighandler_t>> arg1,
);

typedef _dart_PyOS_setsig = ffi.Pointer<ffi.NativeFunction<PyOS_sighandler_t>>
    Function(
  int arg0,
  ffi.Pointer<ffi.NativeFunction<PyOS_sighandler_t>> arg1,
);

typedef _c_PyEval_CallObjectWithKeywords = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> callable,
  ffi.Pointer<PyObject> args,
  ffi.Pointer<PyObject> kwargs,
);

typedef _dart_PyEval_CallObjectWithKeywords = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> callable,
  ffi.Pointer<PyObject> args,
  ffi.Pointer<PyObject> kwargs,
);

typedef _c_PyEval_CallFunction = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> callable,
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_PyEval_CallFunction = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> callable,
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_PyEval_CallMethod = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_PyEval_CallMethod = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> format,
);

typedef Py_tracefunc = ffi.Int32 Function(
  ffi.Pointer<PyObject>,
  ffi.Pointer<_frame>,
  ffi.Int32,
  ffi.Pointer<PyObject>,
);

typedef _c_PyEval_SetProfile = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<Py_tracefunc>> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyEval_SetProfile = void Function(
  ffi.Pointer<ffi.NativeFunction<Py_tracefunc>> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyEval_SetTrace = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<Py_tracefunc>> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyEval_SetTrace = void Function(
  ffi.Pointer<ffi.NativeFunction<Py_tracefunc>> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyEval_SetCoroutineOriginTrackingDepth = ffi.Void Function(
  ffi.Int32 new_depth,
);

typedef _dart_PyEval_SetCoroutineOriginTrackingDepth = void Function(
  int new_depth,
);

typedef _c_PyEval_GetCoroutineOriginTrackingDepth = ffi.Int32 Function();

typedef _dart_PyEval_GetCoroutineOriginTrackingDepth = int Function();

typedef _c_PyEval_SetAsyncGenFirstiter = ffi.Void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyEval_SetAsyncGenFirstiter = void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyEval_GetAsyncGenFirstiter = ffi.Pointer<PyObject> Function();

typedef _dart_PyEval_GetAsyncGenFirstiter = ffi.Pointer<PyObject> Function();

typedef _c_PyEval_SetAsyncGenFinalizer = ffi.Void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyEval_SetAsyncGenFinalizer = void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyEval_GetAsyncGenFinalizer = ffi.Pointer<PyObject> Function();

typedef _dart_PyEval_GetAsyncGenFinalizer = ffi.Pointer<PyObject> Function();

typedef _c_PyEval_GetBuiltins = ffi.Pointer<PyObject> Function();

typedef _dart_PyEval_GetBuiltins = ffi.Pointer<PyObject> Function();

typedef _c_PyEval_GetGlobals = ffi.Pointer<PyObject> Function();

typedef _dart_PyEval_GetGlobals = ffi.Pointer<PyObject> Function();

typedef _c_PyEval_GetLocals = ffi.Pointer<PyObject> Function();

typedef _dart_PyEval_GetLocals = ffi.Pointer<PyObject> Function();

typedef _c_PyEval_GetFrame = ffi.Pointer<_frame> Function();

typedef _dart_PyEval_GetFrame = ffi.Pointer<_frame> Function();

typedef _c_PyEval_GetBuiltinId = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_Py_Identifier> arg0,
);

typedef _dart_PyEval_GetBuiltinId = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_Py_Identifier> arg0,
);

typedef _c_PyEval_MergeCompilerFlags = ffi.Int32 Function(
  ffi.Pointer<PyCompilerFlags> cf,
);

typedef _dart_PyEval_MergeCompilerFlags = int Function(
  ffi.Pointer<PyCompilerFlags> cf,
);

typedef _typedefC_9 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_Py_AddPendingCall = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_9>> func,
  ffi.Pointer<ffi.Void> arg,
);

typedef _dart_Py_AddPendingCall = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_9>> func,
  ffi.Pointer<ffi.Void> arg,
);

typedef _c_Py_MakePendingCalls = ffi.Int32 Function();

typedef _dart_Py_MakePendingCalls = int Function();

typedef _c_Py_SetRecursionLimit = ffi.Void Function(
  ffi.Int32 arg0,
);

typedef _dart_Py_SetRecursionLimit = void Function(
  int arg0,
);

typedef _c_Py_GetRecursionLimit = ffi.Int32 Function();

typedef _dart_Py_GetRecursionLimit = int Function();

typedef _c_Py_CheckRecursiveCall = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> where,
);

typedef _dart_Py_CheckRecursiveCall = int Function(
  ffi.Pointer<ffi.Int8> where,
);

typedef _c_PyEval_GetFuncName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyEval_GetFuncName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyEval_GetFuncDesc = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyEval_GetFuncDesc = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyEval_EvalFrame = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_frame> arg0,
);

typedef _dart_PyEval_EvalFrame = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_frame> arg0,
);

typedef _c_PyEval_EvalFrameEx = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_frame> f,
  ffi.Int32 exc,
);

typedef _dart_PyEval_EvalFrameEx = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_frame> f,
  int exc,
);

typedef _c_PyEval_EvalFrameDefault = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_frame> f,
  ffi.Int32 exc,
);

typedef _dart_PyEval_EvalFrameDefault = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_frame> f,
  int exc,
);

typedef _c_PyEval_SaveThread = ffi.Pointer<_ts> Function();

typedef _dart_PyEval_SaveThread = ffi.Pointer<_ts> Function();

typedef _c_PyEval_RestoreThread = ffi.Void Function(
  ffi.Pointer<_ts> arg0,
);

typedef _dart_PyEval_RestoreThread = void Function(
  ffi.Pointer<_ts> arg0,
);

typedef _c_PyEval_ThreadsInitialized = ffi.Int32 Function();

typedef _dart_PyEval_ThreadsInitialized = int Function();

typedef _c_PyEval_InitThreads = ffi.Void Function();

typedef _dart_PyEval_InitThreads = void Function();

typedef _c_PyEval_AcquireLock = ffi.Void Function();

typedef _dart_PyEval_AcquireLock = void Function();

typedef _c_PyEval_ReleaseLock = ffi.Void Function();

typedef _dart_PyEval_ReleaseLock = void Function();

typedef _c_PyEval_AcquireThread = ffi.Void Function(
  ffi.Pointer<_ts> tstate,
);

typedef _dart_PyEval_AcquireThread = void Function(
  ffi.Pointer<_ts> tstate,
);

typedef _c_PyEval_ReleaseThread = ffi.Void Function(
  ffi.Pointer<_ts> tstate,
);

typedef _dart_PyEval_ReleaseThread = void Function(
  ffi.Pointer<_ts> tstate,
);

typedef _c_PyEval_SetSwitchInterval = ffi.Void Function(
  ffi.Uint64 microseconds,
);

typedef _dart_PyEval_SetSwitchInterval = void Function(
  int microseconds,
);

typedef _c_PyEval_GetSwitchInterval = ffi.Uint64 Function();

typedef _dart_PyEval_GetSwitchInterval = int Function();

typedef freefunc = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_PyEval_RequestCodeExtraIndex = ffi.Int64 Function(
  ffi.Pointer<ffi.NativeFunction<freefunc>> arg0,
);

typedef _dart_PyEval_RequestCodeExtraIndex = int Function(
  ffi.Pointer<ffi.NativeFunction<freefunc>> arg0,
);

typedef _c_PyEval_SliceIndex = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _dart_PyEval_SliceIndex = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _c_PyEval_SliceIndexNotNone = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _dart_PyEval_SliceIndexNotNone = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _c_PySys_GetObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_PySys_GetObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_PySys_SetObject = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PySys_SetObject = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PySys_SetArgv = ffi.Void Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> arg1,
);

typedef _dart_PySys_SetArgv = void Function(
  int arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> arg1,
);

typedef _c_PySys_SetArgvEx = ffi.Void Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> arg1,
  ffi.Int32 arg2,
);

typedef _dart_PySys_SetArgvEx = void Function(
  int arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> arg1,
  int arg2,
);

typedef _c_PySys_SetPath = ffi.Void Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart_PySys_SetPath = void Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _c_PySys_WriteStdout = ffi.Void Function(
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_PySys_WriteStdout = void Function(
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_PySys_WriteStderr = ffi.Void Function(
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_PySys_WriteStderr = void Function(
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_PySys_FormatStdout = ffi.Void Function(
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_PySys_FormatStdout = void Function(
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_PySys_FormatStderr = ffi.Void Function(
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_PySys_FormatStderr = void Function(
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_PySys_ResetWarnOptions = ffi.Void Function();

typedef _dart_PySys_ResetWarnOptions = void Function();

typedef _c_PySys_AddWarnOption = ffi.Void Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart_PySys_AddWarnOption = void Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _c_PySys_AddWarnOptionUnicode = ffi.Void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PySys_AddWarnOptionUnicode = void Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PySys_HasWarnOptions = ffi.Int32 Function();

typedef _dart_PySys_HasWarnOptions = int Function();

typedef _c_PySys_AddXOption = ffi.Void Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart_PySys_AddXOption = void Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _c_PySys_GetXOptions = ffi.Pointer<PyObject> Function();

typedef _dart_PySys_GetXOptions = ffi.Pointer<PyObject> Function();

typedef _c_PyOS_FSPath = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> path,
);

typedef _dart_PyOS_FSPath = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> path,
);

typedef _c_PyOS_InterruptOccurred = ffi.Int32 Function();

typedef _dart_PyOS_InterruptOccurred = int Function();

typedef _c_PyOS_InitInterrupts = ffi.Void Function();

typedef _dart_PyOS_InitInterrupts = void Function();

typedef _c_PyOS_BeforeFork = ffi.Void Function();

typedef _dart_PyOS_BeforeFork = void Function();

typedef _c_PyOS_AfterFork_Parent = ffi.Void Function();

typedef _dart_PyOS_AfterFork_Parent = void Function();

typedef _c_PyOS_AfterFork_Child = ffi.Void Function();

typedef _dart_PyOS_AfterFork_Child = void Function();

typedef _c_PyOS_AfterFork = ffi.Void Function();

typedef _dart_PyOS_AfterFork = void Function();

typedef _c_PyOS_IsMainThread = ffi.Int32 Function();

typedef _dart_PyOS_IsMainThread = int Function();

typedef _c_PySignal_AfterFork = ffi.Void Function();

typedef _dart_PySignal_AfterFork = void Function();

typedef _c_PyInit__imp = ffi.Pointer<PyObject> Function();

typedef _dart_PyInit__imp = ffi.Pointer<PyObject> Function();

typedef _c_PyImport_GetMagicNumber = ffi.Int64 Function();

typedef _dart_PyImport_GetMagicNumber = int Function();

typedef _c_PyImport_GetMagicTag = ffi.Pointer<ffi.Int8> Function();

typedef _dart_PyImport_GetMagicTag = ffi.Pointer<ffi.Int8> Function();

typedef _c_PyImport_ExecCodeModule = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<PyObject> co,
);

typedef _dart_PyImport_ExecCodeModule = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<PyObject> co,
);

typedef _c_PyImport_ExecCodeModuleEx = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<PyObject> co,
  ffi.Pointer<ffi.Int8> pathname,
);

typedef _dart_PyImport_ExecCodeModuleEx = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<PyObject> co,
  ffi.Pointer<ffi.Int8> pathname,
);

typedef _c_PyImport_ExecCodeModuleWithPathnames = ffi.Pointer<PyObject>
    Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<PyObject> co,
  ffi.Pointer<ffi.Int8> pathname,
  ffi.Pointer<ffi.Int8> cpathname,
);

typedef _dart_PyImport_ExecCodeModuleWithPathnames = ffi.Pointer<PyObject>
    Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<PyObject> co,
  ffi.Pointer<ffi.Int8> pathname,
  ffi.Pointer<ffi.Int8> cpathname,
);

typedef _c_PyImport_ExecCodeModuleObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> name,
  ffi.Pointer<PyObject> co,
  ffi.Pointer<PyObject> pathname,
  ffi.Pointer<PyObject> cpathname,
);

typedef _dart_PyImport_ExecCodeModuleObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> name,
  ffi.Pointer<PyObject> co,
  ffi.Pointer<PyObject> pathname,
  ffi.Pointer<PyObject> cpathname,
);

typedef _c_PyImport_GetModuleDict = ffi.Pointer<PyObject> Function();

typedef _dart_PyImport_GetModuleDict = ffi.Pointer<PyObject> Function();

typedef _c_PyImport_GetModule = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> name,
);

typedef _dart_PyImport_GetModule = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> name,
);

typedef _c_PyImport_IsInitialized = ffi.Int32 Function(
  ffi.Pointer<_is> arg0,
);

typedef _dart_PyImport_IsInitialized = int Function(
  ffi.Pointer<_is> arg0,
);

typedef _c_PyImport_GetModuleId = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_Py_Identifier> name,
);

typedef _dart_PyImport_GetModuleId = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_Py_Identifier> name,
);

typedef _c_PyImport_AddModuleObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> name,
  ffi.Pointer<PyObject> modules,
);

typedef _dart_PyImport_AddModuleObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> name,
  ffi.Pointer<PyObject> modules,
);

typedef _c_PyImport_SetModule = ffi.Int32 Function(
  ffi.Pointer<PyObject> name,
  ffi.Pointer<PyObject> module,
);

typedef _dart_PyImport_SetModule = int Function(
  ffi.Pointer<PyObject> name,
  ffi.Pointer<PyObject> module,
);

typedef _c_PyImport_SetModuleString = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<PyObject> module,
);

typedef _dart_PyImport_SetModuleString = int Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<PyObject> module,
);

typedef _c_PyImport_AddModuleObject_1 = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> name,
);

typedef _dart_PyImport_AddModuleObject_1 = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> name,
);

typedef _c_PyImport_AddModule = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_PyImport_AddModule = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_PyImport_ImportModule = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_PyImport_ImportModule = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_PyImport_ImportModuleNoBlock = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_PyImport_ImportModuleNoBlock = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_PyImport_ImportModuleLevel = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<PyObject> globals,
  ffi.Pointer<PyObject> locals,
  ffi.Pointer<PyObject> fromlist,
  ffi.Int32 level,
);

typedef _dart_PyImport_ImportModuleLevel = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<PyObject> globals,
  ffi.Pointer<PyObject> locals,
  ffi.Pointer<PyObject> fromlist,
  int level,
);

typedef _c_PyImport_ImportModuleLevelObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> name,
  ffi.Pointer<PyObject> globals,
  ffi.Pointer<PyObject> locals,
  ffi.Pointer<PyObject> fromlist,
  ffi.Int32 level,
);

typedef _dart_PyImport_ImportModuleLevelObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> name,
  ffi.Pointer<PyObject> globals,
  ffi.Pointer<PyObject> locals,
  ffi.Pointer<PyObject> fromlist,
  int level,
);

typedef _c_PyImport_GetImporter = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> path,
);

typedef _dart_PyImport_GetImporter = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> path,
);

typedef _c_PyImport_Import = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> name,
);

typedef _dart_PyImport_Import = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> name,
);

typedef _c_PyImport_ReloadModule = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> m,
);

typedef _dart_PyImport_ReloadModule = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> m,
);

typedef _c_PyImport_Cleanup = ffi.Void Function();

typedef _dart_PyImport_Cleanup = void Function();

typedef _c_PyImport_ImportFrozenModuleObject = ffi.Int32 Function(
  ffi.Pointer<PyObject> name,
);

typedef _dart_PyImport_ImportFrozenModuleObject = int Function(
  ffi.Pointer<PyObject> name,
);

typedef _c_PyImport_ImportFrozenModule = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_PyImport_ImportFrozenModule = int Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_PyImport_AcquireLock = ffi.Void Function();

typedef _dart_PyImport_AcquireLock = void Function();

typedef _c_PyImport_ReleaseLock = ffi.Int32 Function();

typedef _dart_PyImport_ReleaseLock = int Function();

typedef _c_PyImport_ReInitLock = ffi.Void Function();

typedef _dart_PyImport_ReInitLock = void Function();

typedef _c_PyImport_FindBuiltin = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<PyObject> modules,
);

typedef _dart_PyImport_FindBuiltin = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<PyObject> modules,
);

typedef _c_PyImport_FindExtensionObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _dart_PyImport_FindExtensionObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
);

typedef _c_PyImport_FindExtensionObjectEx = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _dart_PyImport_FindExtensionObjectEx = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _c_PyImport_FixupBuiltin = ffi.Int32 Function(
  ffi.Pointer<PyObject> mod,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<PyObject> modules,
);

typedef _dart_PyImport_FixupBuiltin = int Function(
  ffi.Pointer<PyObject> mod,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<PyObject> modules,
);

typedef _c_PyImport_FixupExtensionObject = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
  ffi.Pointer<PyObject> arg3,
);

typedef _dart_PyImport_FixupExtensionObject = int Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
  ffi.Pointer<PyObject> arg3,
);

typedef _c_PyImport_ExtendInittab = ffi.Int32 Function(
  ffi.Pointer<_inittab> newtab,
);

typedef _dart_PyImport_ExtendInittab = int Function(
  ffi.Pointer<_inittab> newtab,
);

typedef _typedefC_11 = ffi.Pointer<PyObject> Function();

typedef _c_PyImport_AppendInittab = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.NativeFunction<_typedefC_11>> initfunc,
);

typedef _dart_PyImport_AppendInittab = int Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.NativeFunction<_typedefC_11>> initfunc,
);

typedef _c_PyObject_Call = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> callable,
  ffi.Pointer<PyObject> args,
  ffi.Pointer<PyObject> kwargs,
);

typedef _dart_PyObject_Call = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> callable,
  ffi.Pointer<PyObject> args,
  ffi.Pointer<PyObject> kwargs,
);

typedef _c_PyObject_CallObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> callable,
  ffi.Pointer<PyObject> args,
);

typedef _dart_PyObject_CallObject = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> callable,
  ffi.Pointer<PyObject> args,
);

typedef _c_PyObject_CallFunction = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> callable,
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_PyObject_CallFunction = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> callable,
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_PyObject_CallMethod = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_PyObject_CallMethod = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_PyObject_CallFunction_SizeT = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> callable,
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_PyObject_CallFunction_SizeT = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> callable,
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_PyObject_CallMethod_SizeT = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_PyObject_CallMethod_SizeT = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_PyObject_CallFunctionObjArgs = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> callable,
);

typedef _dart_PyObject_CallFunctionObjArgs = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> callable,
);

typedef _c_PyObject_CallMethodObjArgs = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<PyObject> name,
);

typedef _dart_PyObject_CallMethodObjArgs = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<PyObject> name,
);

typedef _c_PyObject_Type = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _dart_PyObject_Type = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _c_PyObject_Size = ffi.Int64 Function(
  ffi.Pointer<PyObject> o,
);

typedef _dart_PyObject_Size = int Function(
  ffi.Pointer<PyObject> o,
);

typedef _c_PyObject_Length = ffi.Int64 Function(
  ffi.Pointer<PyObject> o,
);

typedef _dart_PyObject_Length = int Function(
  ffi.Pointer<PyObject> o,
);

typedef _c_PyObject_GetItem = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<PyObject> key,
);

typedef _dart_PyObject_GetItem = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<PyObject> key,
);

typedef _c_PyObject_SetItem = ffi.Int32 Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<PyObject> key,
  ffi.Pointer<PyObject> v,
);

typedef _dart_PyObject_SetItem = int Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<PyObject> key,
  ffi.Pointer<PyObject> v,
);

typedef _c_PyObject_DelItemString = ffi.Int32 Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<ffi.Int8> key,
);

typedef _dart_PyObject_DelItemString = int Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<ffi.Int8> key,
);

typedef _c_PyObject_DelItem = ffi.Int32 Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<PyObject> key,
);

typedef _dart_PyObject_DelItem = int Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<PyObject> key,
);

typedef _c_PyObject_AsCharBuffer = ffi.Int32 Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> buffer,
  ffi.Pointer<ffi.Int64> buffer_len,
);

typedef _dart_PyObject_AsCharBuffer = int Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> buffer,
  ffi.Pointer<ffi.Int64> buffer_len,
);

typedef _c_PyObject_CheckReadBuffer = ffi.Int32 Function(
  ffi.Pointer<PyObject> obj,
);

typedef _dart_PyObject_CheckReadBuffer = int Function(
  ffi.Pointer<PyObject> obj,
);

typedef _c_PyObject_AsReadBuffer = ffi.Int32 Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<ffi.Pointer<ffi.Void>> buffer,
  ffi.Pointer<ffi.Int64> buffer_len,
);

typedef _dart_PyObject_AsReadBuffer = int Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<ffi.Pointer<ffi.Void>> buffer,
  ffi.Pointer<ffi.Int64> buffer_len,
);

typedef _c_PyObject_AsWriteBuffer = ffi.Int32 Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<ffi.Pointer<ffi.Void>> buffer,
  ffi.Pointer<ffi.Int64> buffer_len,
);

typedef _dart_PyObject_AsWriteBuffer = int Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<ffi.Pointer<ffi.Void>> buffer,
  ffi.Pointer<ffi.Int64> buffer_len,
);

typedef _c_PyObject_Format = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<PyObject> format_spec,
);

typedef _dart_PyObject_Format = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<PyObject> format_spec,
);

typedef _c_PyObject_GetIter = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyObject_GetIter = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyIter_Check = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyIter_Check = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyIter_Next = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyIter_Next = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyNumber_Check = ffi.Int32 Function(
  ffi.Pointer<PyObject> o,
);

typedef _dart_PyNumber_Check = int Function(
  ffi.Pointer<PyObject> o,
);

typedef _c_PyNumber_Add = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PyNumber_Add = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PyNumber_Subtract = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PyNumber_Subtract = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PyNumber_Multiply = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PyNumber_Multiply = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PyNumber_MatrixMultiply = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PyNumber_MatrixMultiply = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PyNumber_FloorDivide = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PyNumber_FloorDivide = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PyNumber_TrueDivide = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PyNumber_TrueDivide = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PyNumber_Remainder = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PyNumber_Remainder = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PyNumber_Divmod = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PyNumber_Divmod = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PyNumber_Power = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
  ffi.Pointer<PyObject> o3,
);

typedef _dart_PyNumber_Power = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
  ffi.Pointer<PyObject> o3,
);

typedef _c_PyNumber_Negative = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _dart_PyNumber_Negative = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _c_PyNumber_Positive = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _dart_PyNumber_Positive = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _c_PyNumber_Absolute = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _dart_PyNumber_Absolute = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _c_PyNumber_Invert = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _dart_PyNumber_Invert = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _c_PyNumber_Lshift = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PyNumber_Lshift = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PyNumber_Rshift = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PyNumber_Rshift = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PyNumber_And = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PyNumber_And = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PyNumber_Xor = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PyNumber_Xor = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PyNumber_Or = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PyNumber_Or = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PyIndex_Check = ffi.Int32 Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _dart_PyIndex_Check = int Function(
  ffi.Pointer<PyObject> arg0,
);

typedef _c_PyNumber_Index = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _dart_PyNumber_Index = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _c_PyNumber_AsSsize_t = ffi.Int64 Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<PyObject> exc,
);

typedef _dart_PyNumber_AsSsize_t = int Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<PyObject> exc,
);

typedef _c_PyNumber_Long = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _dart_PyNumber_Long = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _c_PyNumber_Float = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _dart_PyNumber_Float = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _c_PyNumber_InPlaceAdd = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PyNumber_InPlaceAdd = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PyNumber_InPlaceSubtract = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PyNumber_InPlaceSubtract = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PyNumber_InPlaceMultiply = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PyNumber_InPlaceMultiply = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PyNumber_InPlaceMatrixMultiply = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PyNumber_InPlaceMatrixMultiply = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PyNumber_InPlaceFloorDivide = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PyNumber_InPlaceFloorDivide = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PyNumber_InPlaceTrueDivide = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PyNumber_InPlaceTrueDivide = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PyNumber_InPlaceRemainder = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PyNumber_InPlaceRemainder = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PyNumber_InPlacePower = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
  ffi.Pointer<PyObject> o3,
);

typedef _dart_PyNumber_InPlacePower = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
  ffi.Pointer<PyObject> o3,
);

typedef _c_PyNumber_InPlaceLshift = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PyNumber_InPlaceLshift = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PyNumber_InPlaceRshift = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PyNumber_InPlaceRshift = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PyNumber_InPlaceAnd = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PyNumber_InPlaceAnd = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PyNumber_InPlaceXor = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PyNumber_InPlaceXor = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PyNumber_InPlaceOr = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PyNumber_InPlaceOr = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PyNumber_ToBase = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> n,
  ffi.Int32 base,
);

typedef _dart_PyNumber_ToBase = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> n,
  int base,
);

typedef _c_PySequence_Check = ffi.Int32 Function(
  ffi.Pointer<PyObject> o,
);

typedef _dart_PySequence_Check = int Function(
  ffi.Pointer<PyObject> o,
);

typedef _c_PySequence_Size = ffi.Int64 Function(
  ffi.Pointer<PyObject> o,
);

typedef _dart_PySequence_Size = int Function(
  ffi.Pointer<PyObject> o,
);

typedef _c_PySequence_Length = ffi.Int64 Function(
  ffi.Pointer<PyObject> o,
);

typedef _dart_PySequence_Length = int Function(
  ffi.Pointer<PyObject> o,
);

typedef _c_PySequence_Concat = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PySequence_Concat = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PySequence_Repeat = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
  ffi.Int64 count,
);

typedef _dart_PySequence_Repeat = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
  int count,
);

typedef _c_PySequence_GetItem = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
  ffi.Int64 i,
);

typedef _dart_PySequence_GetItem = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
  int i,
);

typedef _c_PySequence_GetSlice = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
  ffi.Int64 i1,
  ffi.Int64 i2,
);

typedef _dart_PySequence_GetSlice = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
  int i1,
  int i2,
);

typedef _c_PySequence_SetItem = ffi.Int32 Function(
  ffi.Pointer<PyObject> o,
  ffi.Int64 i,
  ffi.Pointer<PyObject> v,
);

typedef _dart_PySequence_SetItem = int Function(
  ffi.Pointer<PyObject> o,
  int i,
  ffi.Pointer<PyObject> v,
);

typedef _c_PySequence_DelItem = ffi.Int32 Function(
  ffi.Pointer<PyObject> o,
  ffi.Int64 i,
);

typedef _dart_PySequence_DelItem = int Function(
  ffi.Pointer<PyObject> o,
  int i,
);

typedef _c_PySequence_SetSlice = ffi.Int32 Function(
  ffi.Pointer<PyObject> o,
  ffi.Int64 i1,
  ffi.Int64 i2,
  ffi.Pointer<PyObject> v,
);

typedef _dart_PySequence_SetSlice = int Function(
  ffi.Pointer<PyObject> o,
  int i1,
  int i2,
  ffi.Pointer<PyObject> v,
);

typedef _c_PySequence_DelSlice = ffi.Int32 Function(
  ffi.Pointer<PyObject> o,
  ffi.Int64 i1,
  ffi.Int64 i2,
);

typedef _dart_PySequence_DelSlice = int Function(
  ffi.Pointer<PyObject> o,
  int i1,
  int i2,
);

typedef _c_PySequence_Tuple = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _dart_PySequence_Tuple = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _c_PySequence_List = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _dart_PySequence_List = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _c_PySequence_Fast = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<ffi.Int8> m,
);

typedef _dart_PySequence_Fast = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<ffi.Int8> m,
);

typedef _c_PySequence_Count = ffi.Int64 Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<PyObject> value,
);

typedef _dart_PySequence_Count = int Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<PyObject> value,
);

typedef _c_PySequence_Contains = ffi.Int32 Function(
  ffi.Pointer<PyObject> seq,
  ffi.Pointer<PyObject> ob,
);

typedef _dart_PySequence_Contains = int Function(
  ffi.Pointer<PyObject> seq,
  ffi.Pointer<PyObject> ob,
);

typedef _c_PySequence_In = ffi.Int32 Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<PyObject> value,
);

typedef _dart_PySequence_In = int Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<PyObject> value,
);

typedef _c_PySequence_Index = ffi.Int64 Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<PyObject> value,
);

typedef _dart_PySequence_Index = int Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<PyObject> value,
);

typedef _c_PySequence_InPlaceConcat = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _dart_PySequence_InPlaceConcat = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o1,
  ffi.Pointer<PyObject> o2,
);

typedef _c_PySequence_InPlaceRepeat = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
  ffi.Int64 count,
);

typedef _dart_PySequence_InPlaceRepeat = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
  int count,
);

typedef _c_PyMapping_Check = ffi.Int32 Function(
  ffi.Pointer<PyObject> o,
);

typedef _dart_PyMapping_Check = int Function(
  ffi.Pointer<PyObject> o,
);

typedef _c_PyMapping_Size = ffi.Int64 Function(
  ffi.Pointer<PyObject> o,
);

typedef _dart_PyMapping_Size = int Function(
  ffi.Pointer<PyObject> o,
);

typedef _c_PyMapping_Length = ffi.Int64 Function(
  ffi.Pointer<PyObject> o,
);

typedef _dart_PyMapping_Length = int Function(
  ffi.Pointer<PyObject> o,
);

typedef _c_PyMapping_HasKeyString = ffi.Int32 Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<ffi.Int8> key,
);

typedef _dart_PyMapping_HasKeyString = int Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<ffi.Int8> key,
);

typedef _c_PyMapping_HasKey = ffi.Int32 Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<PyObject> key,
);

typedef _dart_PyMapping_HasKey = int Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<PyObject> key,
);

typedef _c_PyMapping_Keys = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _dart_PyMapping_Keys = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _c_PyMapping_Values = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _dart_PyMapping_Values = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _c_PyMapping_Items = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _dart_PyMapping_Items = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
);

typedef _c_PyMapping_GetItemString = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<ffi.Int8> key,
);

typedef _dart_PyMapping_GetItemString = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<ffi.Int8> key,
);

typedef _c_PyMapping_SetItemString = ffi.Int32 Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<PyObject> value,
);

typedef _dart_PyMapping_SetItemString = int Function(
  ffi.Pointer<PyObject> o,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<PyObject> value,
);

typedef _c_PyObject_IsInstance = ffi.Int32 Function(
  ffi.Pointer<PyObject> object,
  ffi.Pointer<PyObject> typeorclass,
);

typedef _dart_PyObject_IsInstance = int Function(
  ffi.Pointer<PyObject> object,
  ffi.Pointer<PyObject> typeorclass,
);

typedef _c_PyObject_IsSubclass = ffi.Int32 Function(
  ffi.Pointer<PyObject> object,
  ffi.Pointer<PyObject> typeorclass,
);

typedef _dart_PyObject_IsSubclass = int Function(
  ffi.Pointer<PyObject> object,
  ffi.Pointer<PyObject> typeorclass,
);

typedef _c_PyEval_EvalCode = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _dart_PyEval_EvalCode = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> arg0,
  ffi.Pointer<PyObject> arg1,
  ffi.Pointer<PyObject> arg2,
);

typedef _c_PyEval_EvalCodeEx = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> co,
  ffi.Pointer<PyObject> globals,
  ffi.Pointer<PyObject> locals,
  ffi.Pointer<ffi.Pointer<PyObject>> args,
  ffi.Int32 argc,
  ffi.Pointer<ffi.Pointer<PyObject>> kwds,
  ffi.Int32 kwdc,
  ffi.Pointer<ffi.Pointer<PyObject>> defs,
  ffi.Int32 defc,
  ffi.Pointer<PyObject> kwdefs,
  ffi.Pointer<PyObject> closure,
);

typedef _dart_PyEval_EvalCodeEx = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> co,
  ffi.Pointer<PyObject> globals,
  ffi.Pointer<PyObject> locals,
  ffi.Pointer<ffi.Pointer<PyObject>> args,
  int argc,
  ffi.Pointer<ffi.Pointer<PyObject>> kwds,
  int kwdc,
  ffi.Pointer<ffi.Pointer<PyObject>> defs,
  int defc,
  ffi.Pointer<PyObject> kwdefs,
  ffi.Pointer<PyObject> closure,
);

typedef _c_PyEval_EvalCodeWithName = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> co,
  ffi.Pointer<PyObject> globals,
  ffi.Pointer<PyObject> locals,
  ffi.Pointer<ffi.Pointer<PyObject>> args,
  ffi.Int64 argcount,
  ffi.Pointer<ffi.Pointer<PyObject>> kwnames,
  ffi.Pointer<ffi.Pointer<PyObject>> kwargs,
  ffi.Int64 kwcount,
  ffi.Int32 kwstep,
  ffi.Pointer<ffi.Pointer<PyObject>> defs,
  ffi.Int64 defcount,
  ffi.Pointer<PyObject> kwdefs,
  ffi.Pointer<PyObject> closure,
  ffi.Pointer<PyObject> name,
  ffi.Pointer<PyObject> qualname,
);

typedef _dart_PyEval_EvalCodeWithName = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> co,
  ffi.Pointer<PyObject> globals,
  ffi.Pointer<PyObject> locals,
  ffi.Pointer<ffi.Pointer<PyObject>> args,
  int argcount,
  ffi.Pointer<ffi.Pointer<PyObject>> kwnames,
  ffi.Pointer<ffi.Pointer<PyObject>> kwargs,
  int kwcount,
  int kwstep,
  ffi.Pointer<ffi.Pointer<PyObject>> defs,
  int defcount,
  ffi.Pointer<PyObject> kwdefs,
  ffi.Pointer<PyObject> closure,
  ffi.Pointer<PyObject> name,
  ffi.Pointer<PyObject> qualname,
);

typedef _c_PyEval_CallTracing = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> func,
  ffi.Pointer<PyObject> args,
);

typedef _dart_PyEval_CallTracing = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject> func,
  ffi.Pointer<PyObject> args,
);

typedef _c_PyOS_string_to_double = ffi.Double Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> endptr,
  ffi.Pointer<PyObject> overflow_exception,
);

typedef _dart_PyOS_string_to_double = double Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> endptr,
  ffi.Pointer<PyObject> overflow_exception,
);

typedef _c_PyOS_double_to_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Double val,
  ffi.Int8 format_code,
  ffi.Int32 precision,
  ffi.Int32 flags,
  ffi.Pointer<ffi.Int32> type,
);

typedef _dart_PyOS_double_to_string = ffi.Pointer<ffi.Int8> Function(
  double val,
  int format_code,
  int precision,
  int flags,
  ffi.Pointer<ffi.Int32> type,
);

typedef _typedefC_12 = ffi.Pointer<PyObject> Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Int64,
  ffi.Pointer<ffi.Void>,
);

typedef _c_Py_string_to_number_with_underscores = ffi.Pointer<PyObject>
    Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Int64 len,
  ffi.Pointer<ffi.Int8> what,
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<ffi.Void> arg,
  ffi.Pointer<ffi.NativeFunction<_typedefC_12>> innerfunc,
);

typedef _dart_Py_string_to_number_with_underscores = ffi.Pointer<PyObject>
    Function(
  ffi.Pointer<ffi.Int8> str,
  int len,
  ffi.Pointer<ffi.Int8> what,
  ffi.Pointer<PyObject> obj,
  ffi.Pointer<ffi.Void> arg,
  ffi.Pointer<ffi.NativeFunction<_typedefC_12>> innerfunc,
);

typedef _c_Py_parse_inf_or_nan = ffi.Double Function(
  ffi.Pointer<ffi.Int8> p,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> endptr,
);

typedef _dart_Py_parse_inf_or_nan = double Function(
  ffi.Pointer<ffi.Int8> p,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> endptr,
);

typedef _c_PyOS_mystrnicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int64 arg2,
);

typedef _dart_PyOS_mystrnicmp = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_PyOS_mystricmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_PyOS_mystricmp = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_Py_dg_strtod = ffi.Double Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> ptr,
);

typedef _dart_Py_dg_strtod = double Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> ptr,
);

typedef _c_Py_dg_dtoa = ffi.Pointer<ffi.Int8> Function(
  ffi.Double d,
  ffi.Int32 mode,
  ffi.Int32 ndigits,
  ffi.Pointer<ffi.Int32> decpt,
  ffi.Pointer<ffi.Int32> sign,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> rve,
);

typedef _dart_Py_dg_dtoa = ffi.Pointer<ffi.Int8> Function(
  double d,
  int mode,
  int ndigits,
  ffi.Pointer<ffi.Int32> decpt,
  ffi.Pointer<ffi.Int32> sign,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> rve,
);

typedef _c_Py_dg_freedtoa = ffi.Void Function(
  ffi.Pointer<ffi.Int8> s,
);

typedef _dart_Py_dg_freedtoa = void Function(
  ffi.Pointer<ffi.Int8> s,
);

typedef _c_Py_dg_stdnan = ffi.Double Function(
  ffi.Int32 sign,
);

typedef _dart_Py_dg_stdnan = double Function(
  int sign,
);

typedef _c_Py_dg_infinity = ffi.Double Function(
  ffi.Int32 sign,
);

typedef _dart_Py_dg_infinity = double Function(
  int sign,
);

typedef _c_Py_DecodeLocale = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int8> arg,
  ffi.Pointer<ffi.Uint64> size,
);

typedef _dart_Py_DecodeLocale = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int8> arg,
  ffi.Pointer<ffi.Uint64> size,
);

typedef _c_Py_EncodeLocale = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int32> text,
  ffi.Pointer<ffi.Uint64> error_pos,
);

typedef _dart_Py_EncodeLocale = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int32> text,
  ffi.Pointer<ffi.Uint64> error_pos,
);

typedef _c_Py_EncodeLocaleRaw = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int32> text,
  ffi.Pointer<ffi.Uint64> error_pos,
);

typedef _dart_Py_EncodeLocaleRaw = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int32> text,
  ffi.Pointer<ffi.Uint64> error_pos,
);

typedef _c_Py_GetErrorHandler = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> errors,
);

typedef _dart_Py_GetErrorHandler = int Function(
  ffi.Pointer<ffi.Int8> errors,
);

typedef _c_Py_DecodeLocaleEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> wstr,
  ffi.Pointer<ffi.Uint64> wlen,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> reason,
  ffi.Int32 current_locale,
  ffi.Int32 errors,
);

typedef _dart_Py_DecodeLocaleEx = int Function(
  ffi.Pointer<ffi.Int8> arg,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> wstr,
  ffi.Pointer<ffi.Uint64> wlen,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> reason,
  int current_locale,
  int errors,
);

typedef _c_Py_EncodeLocaleEx = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> text,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> str,
  ffi.Pointer<ffi.Uint64> error_pos,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> reason,
  ffi.Int32 current_locale,
  ffi.Int32 errors,
);

typedef _dart_Py_EncodeLocaleEx = int Function(
  ffi.Pointer<ffi.Int32> text,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> str,
  ffi.Pointer<ffi.Uint64> error_pos,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> reason,
  int current_locale,
  int errors,
);

typedef _c_Py_device_encoding = ffi.Pointer<PyObject> Function(
  ffi.Int32 arg0,
);

typedef _dart_Py_device_encoding = ffi.Pointer<PyObject> Function(
  int arg0,
);

typedef _c_Py_fstat = ffi.Int32 Function(
  ffi.Int32 fd,
  ffi.Pointer<stat> status,
);

typedef _dart_Py_fstat = int Function(
  int fd,
  ffi.Pointer<stat> status,
);

typedef _c_Py_fstat_noraise = ffi.Int32 Function(
  ffi.Int32 fd,
  ffi.Pointer<stat> status,
);

typedef _dart_Py_fstat_noraise = int Function(
  int fd,
  ffi.Pointer<stat> status,
);

typedef _c_Py_stat = ffi.Int32 Function(
  ffi.Pointer<PyObject> path,
  ffi.Pointer<stat> status,
);

typedef _dart_Py_stat = int Function(
  ffi.Pointer<PyObject> path,
  ffi.Pointer<stat> status,
);

typedef _c_Py_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> pathname,
  ffi.Int32 flags,
);

typedef _dart_Py_open = int Function(
  ffi.Pointer<ffi.Int8> pathname,
  int flags,
);

typedef _c_Py_open_noraise = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> pathname,
  ffi.Int32 flags,
);

typedef _dart_Py_open_noraise = int Function(
  ffi.Pointer<ffi.Int8> pathname,
  int flags,
);

typedef _c_Py_wfopen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Int32> path,
  ffi.Pointer<ffi.Int32> mode,
);

typedef _dart_Py_wfopen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Int32> path,
  ffi.Pointer<ffi.Int32> mode,
);

typedef _c_Py_fopen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Int8> pathname,
  ffi.Pointer<ffi.Int8> mode,
);

typedef _dart_Py_fopen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Int8> pathname,
  ffi.Pointer<ffi.Int8> mode,
);

typedef _c_Py_fopen_obj = ffi.Pointer<FILE> Function(
  ffi.Pointer<PyObject> path,
  ffi.Pointer<ffi.Int8> mode,
);

typedef _dart_Py_fopen_obj = ffi.Pointer<FILE> Function(
  ffi.Pointer<PyObject> path,
  ffi.Pointer<ffi.Int8> mode,
);

typedef _c_Py_read = ffi.Int64 Function(
  ffi.Int32 fd,
  ffi.Pointer<ffi.Void> buf,
  ffi.Uint64 count,
);

typedef _dart_Py_read = int Function(
  int fd,
  ffi.Pointer<ffi.Void> buf,
  int count,
);

typedef _c_Py_write = ffi.Int64 Function(
  ffi.Int32 fd,
  ffi.Pointer<ffi.Void> buf,
  ffi.Uint64 count,
);

typedef _dart_Py_write = int Function(
  int fd,
  ffi.Pointer<ffi.Void> buf,
  int count,
);

typedef _c_Py_write_noraise = ffi.Int64 Function(
  ffi.Int32 fd,
  ffi.Pointer<ffi.Void> buf,
  ffi.Uint64 count,
);

typedef _dart_Py_write_noraise = int Function(
  int fd,
  ffi.Pointer<ffi.Void> buf,
  int count,
);

typedef _c_Py_wreadlink = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> path,
  ffi.Pointer<ffi.Int32> buf,
  ffi.Uint64 buflen,
);

typedef _dart_Py_wreadlink = int Function(
  ffi.Pointer<ffi.Int32> path,
  ffi.Pointer<ffi.Int32> buf,
  int buflen,
);

typedef _c_Py_wrealpath = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> path,
  ffi.Pointer<ffi.Int32> resolved_path,
  ffi.Uint64 resolved_path_len,
);

typedef _dart_Py_wrealpath = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> path,
  ffi.Pointer<ffi.Int32> resolved_path,
  int resolved_path_len,
);

typedef _c_Py_wgetcwd = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> buf,
  ffi.Uint64 buflen,
);

typedef _dart_Py_wgetcwd = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> buf,
  int buflen,
);

typedef _c_Py_get_inheritable = ffi.Int32 Function(
  ffi.Int32 fd,
);

typedef _dart_Py_get_inheritable = int Function(
  int fd,
);

typedef _c_Py_set_inheritable = ffi.Int32 Function(
  ffi.Int32 fd,
  ffi.Int32 inheritable,
  ffi.Pointer<ffi.Int32> atomic_flag_works,
);

typedef _dart_Py_set_inheritable = int Function(
  int fd,
  int inheritable,
  ffi.Pointer<ffi.Int32> atomic_flag_works,
);

typedef _c_Py_set_inheritable_async_safe = ffi.Int32 Function(
  ffi.Int32 fd,
  ffi.Int32 inheritable,
  ffi.Pointer<ffi.Int32> atomic_flag_works,
);

typedef _dart_Py_set_inheritable_async_safe = int Function(
  int fd,
  int inheritable,
  ffi.Pointer<ffi.Int32> atomic_flag_works,
);

typedef _c_Py_dup = ffi.Int32 Function(
  ffi.Int32 fd,
);

typedef _dart_Py_dup = int Function(
  int fd,
);

typedef _c_Py_get_blocking = ffi.Int32 Function(
  ffi.Int32 fd,
);

typedef _dart_Py_get_blocking = int Function(
  int fd,
);

typedef _c_Py_set_blocking = ffi.Int32 Function(
  ffi.Int32 fd,
  ffi.Int32 blocking,
);

typedef _dart_Py_set_blocking = int Function(
  int fd,
  int blocking,
);

typedef _c_PyTraceMalloc_Track = ffi.Int32 Function(
  ffi.Uint32 domain,
  ffi.Uint64 ptr,
  ffi.Uint64 size,
);

typedef _dart_PyTraceMalloc_Track = int Function(
  int domain,
  int ptr,
  int size,
);

typedef _c_PyTraceMalloc_Untrack = ffi.Int32 Function(
  ffi.Uint32 domain,
  ffi.Uint64 ptr,
);

typedef _dart_PyTraceMalloc_Untrack = int Function(
  int domain,
  int ptr,
);

typedef _c_PyTraceMalloc_GetTraceback = ffi.Pointer<PyObject> Function(
  ffi.Uint32 domain,
  ffi.Uint64 ptr,
);

typedef _dart_PyTraceMalloc_GetTraceback = ffi.Pointer<PyObject> Function(
  int domain,
  int ptr,
);

typedef unaryfunc = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject>,
);

typedef binaryfunc = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject>,
  ffi.Pointer<PyObject>,
);

typedef ternaryfunc = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject>,
  ffi.Pointer<PyObject>,
  ffi.Pointer<PyObject>,
);

typedef inquiry = ffi.Int32 Function(
  ffi.Pointer<PyObject>,
);

typedef lenfunc = ffi.Int64 Function(
  ffi.Pointer<PyObject>,
);

typedef ssizeargfunc = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject>,
  ffi.Int64,
);

typedef ssizeobjargproc = ffi.Int32 Function(
  ffi.Pointer<PyObject>,
  ffi.Int64,
  ffi.Pointer<PyObject>,
);

typedef objobjproc = ffi.Int32 Function(
  ffi.Pointer<PyObject>,
  ffi.Pointer<PyObject>,
);

typedef objobjargproc = ffi.Int32 Function(
  ffi.Pointer<PyObject>,
  ffi.Pointer<PyObject>,
  ffi.Pointer<PyObject>,
);

typedef getbufferproc = ffi.Int32 Function(
  ffi.Pointer<PyObject>,
  ffi.Pointer<Py_buffer>,
  ffi.Int32,
);

typedef releasebufferproc = ffi.Void Function(
  ffi.Pointer<PyObject>,
  ffi.Pointer<Py_buffer>,
);

typedef getter = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject>,
  ffi.Pointer<ffi.Void>,
);

typedef setter = ffi.Int32 Function(
  ffi.Pointer<PyObject>,
  ffi.Pointer<PyObject>,
  ffi.Pointer<ffi.Void>,
);

typedef destructor = ffi.Void Function(
  ffi.Pointer<PyObject>,
);

typedef getattrfunc = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject>,
  ffi.Pointer<ffi.Int8>,
);

typedef setattrfunc = ffi.Int32 Function(
  ffi.Pointer<PyObject>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<PyObject>,
);

typedef reprfunc = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject>,
);

typedef hashfunc = ffi.Int64 Function(
  ffi.Pointer<PyObject>,
);

typedef getattrofunc = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject>,
  ffi.Pointer<PyObject>,
);

typedef setattrofunc = ffi.Int32 Function(
  ffi.Pointer<PyObject>,
  ffi.Pointer<PyObject>,
  ffi.Pointer<PyObject>,
);

typedef visitproc = ffi.Int32 Function(
  ffi.Pointer<PyObject>,
  ffi.Pointer<ffi.Void>,
);

typedef traverseproc = ffi.Int32 Function(
  ffi.Pointer<PyObject>,
  ffi.Pointer<ffi.NativeFunction<visitproc>>,
  ffi.Pointer<ffi.Void>,
);

typedef richcmpfunc = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject>,
  ffi.Pointer<PyObject>,
  ffi.Int32,
);

typedef getiterfunc = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject>,
);

typedef iternextfunc = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject>,
);

typedef descrgetfunc = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject>,
  ffi.Pointer<PyObject>,
  ffi.Pointer<PyObject>,
);

typedef descrsetfunc = ffi.Int32 Function(
  ffi.Pointer<PyObject>,
  ffi.Pointer<PyObject>,
  ffi.Pointer<PyObject>,
);

typedef initproc = ffi.Int32 Function(
  ffi.Pointer<PyObject>,
  ffi.Pointer<PyObject>,
  ffi.Pointer<PyObject>,
);

typedef allocfunc = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_typeobject>,
  ffi.Int64,
);

typedef newfunc = ffi.Pointer<PyObject> Function(
  ffi.Pointer<_typeobject>,
  ffi.Pointer<PyObject>,
  ffi.Pointer<PyObject>,
);

typedef vectorcallfunc = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject>,
  ffi.Pointer<ffi.Pointer<PyObject>>,
  ffi.Uint64,
  ffi.Pointer<PyObject>,
);

typedef _typedefC_1 = ffi.Int32 Function(
  ffi.Pointer<PyObject>,
  ffi.Pointer<FILE>,
  ffi.Int32,
);

typedef _typedefC_2 = ffi.Int64 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int64,
);

typedef _typedefC_3 = ffi.Pointer<PyObject> Function();

typedef _typedefC_5 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef wrapperfunc = ffi.Pointer<PyObject> Function(
  ffi.Pointer<PyObject>,
  ffi.Pointer<PyObject>,
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_10 = ffi.Pointer<PyObject> Function();
